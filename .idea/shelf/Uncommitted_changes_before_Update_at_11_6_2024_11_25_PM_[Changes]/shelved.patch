Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/LogUpdateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/LogUpdateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/LogUpdateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225990)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/LogUpdateRequest.java	(date 1730910225990)
@@ -0,0 +1,25 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import java.time.LocalDateTime;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class LogUpdateRequest {
+
+    @NotBlank(message = "Title is required")
+    String logTitle;
+    LocalDateTime logDate;
+    String category;
+    String note;
+    @NotNull
+    long koiPondId;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/LogCreateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/LogCreateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/LogCreateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225990)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/LogCreateRequest.java	(date 1730910225990)
@@ -0,0 +1,27 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import com.swpproject.koi_care_system.enums.LogCategory;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDateTime;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class LogCreateRequest {
+
+    @NotBlank(message = "Title is required")
+    String logTitle;
+    LocalDateTime logDate;
+    LogCategory category;
+    String note;
+    @NotNull
+    long koiPondId;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/KoiPondUpdateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/KoiPondUpdateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/KoiPondUpdateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225990)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/KoiPondUpdateRequest.java	(date 1730910225990)
@@ -0,0 +1,22 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import org.springframework.web.multipart.MultipartFile;
+import reactor.util.annotation.Nullable;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class KoiPondUpdateRequest {
+    private Long id;
+    private String name;
+    private int drainCount;
+    private int volume;
+    private Double depth;
+    private int skimmer;
+    private Double pumpCapacity;
+    private MultipartFile file;
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/KoiFishUpdateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/KoiFishUpdateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/KoiFishUpdateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225989)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/KoiFishUpdateRequest.java	(date 1730910225989)
@@ -0,0 +1,27 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import com.swpproject.koi_care_system.models.KoiPond;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import org.springframework.web.multipart.MultipartFile;
+
+import java.time.LocalDate;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class KoiFishUpdateRequest {
+    private Long id;
+    private String name;
+    private int age;
+    private String gender;
+    private String variety;
+    private LocalDate pondDate;
+    private String breeder;
+    private Double price;
+    private Long koiPondId;
+    private KoiPond koiPond;
+    private String status;
+    private MultipartFile file;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/PaymentStoreRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/PaymentStoreRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/PaymentStoreRequest.java
new file mode 100644
--- /dev/null	(date 1730910225991)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/PaymentStoreRequest.java	(date 1730910225991)
@@ -0,0 +1,17 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import lombok.Builder;
+import lombok.Data;
+
+import java.time.LocalDateTime;
+
+@Data
+@Builder
+public class PaymentStoreRequest {
+    private LocalDateTime createDate;
+    private Long amount;
+    private String status;
+    private String invoiceCode;
+    private String transactionCode;
+    private Long orderId;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ParametersUpdateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ParametersUpdateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ParametersUpdateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225990)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ParametersUpdateRequest.java	(date 1730910225990)
@@ -0,0 +1,35 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import jakarta.validation.constraints.NotNull;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDateTime;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class ParametersUpdateRequest {
+    LocalDateTime createDateTime;
+    double nitrite;
+    double nitrate;  // NO3
+    double phosphate; // PO4
+    double ammonium;  // NH4
+    double hardness;  // GH
+    double oxygen;    // O2
+    double temperature;
+    double phValue;
+    double carbonHardness;  // KH
+    double carbonDioxide;  // CO2
+    double salt;
+    double totalChlorine;
+    double temp;
+    double amountFed;
+    String note;
+    @NotNull
+    long koiPondId;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ParametersCreateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ParametersCreateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ParametersCreateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225990)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ParametersCreateRequest.java	(date 1730910225990)
@@ -0,0 +1,35 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import jakarta.validation.constraints.NotNull;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDateTime;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class ParametersCreateRequest {
+    LocalDateTime createDateTime;
+    double nitrite;
+    double nitrate;  // NO3
+    double phosphate; // PO4
+    double ammonium;  // NH4
+    double hardness;  // GH
+    double oxygen;    // O2
+    double temperature;
+    double phValue;
+    double carbonHardness;  // KH
+    double carbonDioxide;  // CO2
+    double salt;
+    double totalChlorine;
+    double temp;
+    double amountFed;
+    String note;
+    @NotNull
+    long koiPondId;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/NotificationRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/NotificationRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/NotificationRequest.java
new file mode 100644
--- /dev/null	(date 1730910225990)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/NotificationRequest.java	(date 1730910225990)
@@ -0,0 +1,19 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import lombok.AccessLevel;
+import lombok.Getter;
+import lombok.Setter;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDateTime;
+
+@Getter
+@Setter
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class NotificationRequest {
+    String title;
+    String message;
+    boolean delivered;
+    LocalDateTime dateTime;
+    String username;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/EditFeedbackRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/EditFeedbackRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/EditFeedbackRequest.java
new file mode 100644
--- /dev/null	(date 1730910225989)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/EditFeedbackRequest.java	(date 1730910225989)
@@ -0,0 +1,17 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@Builder
+public class EditFeedbackRequest {
+    private Long id;
+    private int star;
+    private String comment;
+    private Long productId;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/CreateUserRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/CreateUserRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/CreateUserRequest.java
new file mode 100644
--- /dev/null	(date 1730910225989)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/CreateUserRequest.java	(date 1730910225989)
@@ -0,0 +1,22 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import jakarta.validation.constraints.Email;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.Size;
+import lombok.*;
+import lombok.experimental.FieldDefaults;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+@Builder
+public class CreateUserRequest {
+    @Size(min = 3, message = "USERNAME_INVALID")
+    String username;
+    @Size(min = 8, message = "USER_PASSWORD")
+    String password;
+    @NotBlank
+    @Email
+    String email;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ChangePasswordRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ChangePasswordRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ChangePasswordRequest.java
new file mode 100644
--- /dev/null	(date 1730910225989)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ChangePasswordRequest.java	(date 1730910225989)
@@ -0,0 +1,20 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import jakarta.validation.constraints.Size;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class ChangePasswordRequest {
+    String currentPassword;
+    @Size(min = 8, message = "USER_PASSWORD")
+    String newPassword;
+    @Size(min = 8, message = "USER_CONFIRM_PASSWORD")
+    String confirmationPassword;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/BlogUpdateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/BlogUpdateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/BlogUpdateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225989)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/BlogUpdateRequest.java	(date 1730910225989)
@@ -0,0 +1,26 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import jakarta.validation.constraints.NotBlank;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.web.multipart.MultipartFile;
+import reactor.util.annotation.Nullable;
+
+import java.util.Set;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class BlogUpdateRequest {
+    @NotBlank
+    String blogTitle;
+    @NotBlank
+    String blogContent;
+    String blogDate;
+    Set<Integer> tagIds;
+    MultipartFile file;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/GrowthUpdateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/GrowthUpdateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/GrowthUpdateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225989)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/GrowthUpdateRequest.java	(date 1730910225989)
@@ -0,0 +1,30 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import jakarta.mail.Multipart;
+import jakarta.validation.constraints.Min;
+import jakarta.validation.constraints.NotNull;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.web.multipart.MultipartFile;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class GrowthUpdateRequest {
+    LocalDateTime createDate;
+    String physique;
+    @NotNull
+    @Min(value = 0, message = "Length must be positive")
+    Double length;
+    @NotNull
+    @Min(value = 0, message = "Weight must be positive")
+    Double weight;
+    MultipartFile file;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/GrowthCreateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/GrowthCreateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/GrowthCreateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225989)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/GrowthCreateRequest.java	(date 1730910225989)
@@ -0,0 +1,32 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import jakarta.validation.constraints.Min;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.web.multipart.MultipartFile;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class GrowthCreateRequest {
+    LocalDateTime createDate;
+    String physique;
+    @NotNull
+    @Min(value = 0, message = "Length must be positive")
+    Double length;
+    @NotNull
+    @Min(value = 0, message = "Weight must be positive")
+    Double weight;
+    MultipartFile file;
+    @NotBlank
+    Long koiFishId;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/FeedbackCreateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/FeedbackCreateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/FeedbackCreateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225989)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/FeedbackCreateRequest.java	(date 1730910225989)
@@ -0,0 +1,18 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@Builder
+public class FeedbackCreateRequest {
+    private int star;
+    private String comment;
+    private Long userId;
+    private Long productId;
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddPromotionRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddPromotionRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddPromotionRequest.java
new file mode 100644
--- /dev/null	(date 1730910225988)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddPromotionRequest.java	(date 1730910225988)
@@ -0,0 +1,16 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import lombok.Data;
+
+import java.time.LocalDateTime;
+import java.util.List;
+
+@Data
+public class AddPromotionRequest {
+    private String name;
+    private Double discountRate;
+    private String description;
+    private LocalDateTime startDate;
+    private LocalDateTime endDate;
+    private List<Long> productIds;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddProductRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddProductRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddProductRequest.java
new file mode 100644
--- /dev/null	(date 1730910225988)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddProductRequest.java	(date 1730910225988)
@@ -0,0 +1,20 @@
+package com.swpproject.koi_care_system.payload.request;
+import com.swpproject.koi_care_system.models.Category;
+import lombok.Data;
+
+import java.math.BigDecimal;
+import java.util.Set;
+
+@Data
+public class AddProductRequest {
+    private Long id;
+    private String name;
+    private String brand;
+    private BigDecimal price;
+    private int inventory;
+    private String description;
+    private String description_detail;
+    private Category category;
+    private String supplierName;
+    private Set<Long> issueTypeId;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddKoiPondRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddKoiPondRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddKoiPondRequest.java
new file mode 100644
--- /dev/null	(date 1730910225988)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddKoiPondRequest.java	(date 1730910225988)
@@ -0,0 +1,20 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import com.swpproject.koi_care_system.models.User;
+import lombok.Data;
+import org.springframework.web.multipart.MultipartFile;
+
+import java.time.LocalDate;
+
+@Data
+public class AddKoiPondRequest {
+    private String name;
+    private LocalDate createDate;
+    private int drainCount;
+    private int volume;
+    private Double depth;
+    private int skimmer;
+    private Double pumpCapacity;
+    private User user;
+    private MultipartFile file;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddKoiFishRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddKoiFishRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddKoiFishRequest.java
new file mode 100644
--- /dev/null	(date 1730910225988)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddKoiFishRequest.java	(date 1730910225988)
@@ -0,0 +1,25 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import com.swpproject.koi_care_system.models.KoiPond;
+import lombok.Data;
+import org.springframework.web.multipart.MultipartFile;
+import reactor.util.annotation.Nullable;
+
+import java.time.LocalDate;
+
+@Data
+public class AddKoiFishRequest {
+    private String name;
+    private String physique;
+    private int age;
+    private Double length;
+    private Double weight;
+    private String gender;
+    private String variety;
+    private LocalDate pondDate;
+    private String breeder;
+    private Double price;
+    private Long koiPondId;
+    private MultipartFile file;
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/BlogCreateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/BlogCreateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/BlogCreateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225989)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/BlogCreateRequest.java	(date 1730910225989)
@@ -0,0 +1,25 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import jakarta.validation.constraints.NotBlank;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.web.multipart.MultipartFile;
+import reactor.util.annotation.Nullable;
+
+import java.util.Set;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class BlogCreateRequest {
+    @NotBlank
+    String blogTitle;
+    @NotBlank
+    String blogContent;
+    Set<Integer> tagIds;
+    MultipartFile file;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AdminConfirmPromotionRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AdminConfirmPromotionRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AdminConfirmPromotionRequest.java
new file mode 100644
--- /dev/null	(date 1730910225989)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AdminConfirmPromotionRequest.java	(date 1730910225989)
@@ -0,0 +1,10 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import com.swpproject.koi_care_system.enums.PromotionStatus;
+import lombok.Data;
+
+@Data
+public class AdminConfirmPromotionRequest {
+    Long promotionId;
+    PromotionStatus status;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddSupplierRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddSupplierRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddSupplierRequest.java
new file mode 100644
--- /dev/null	(date 1730910225988)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddSupplierRequest.java	(date 1730910225988)
@@ -0,0 +1,14 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import lombok.Data;
+
+@Data
+public class AddSupplierRequest {
+    private Long id;
+
+    private String name;
+
+    private String phone;
+
+    private String address;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/TagController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/TagController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/TagController.java
new file mode 100644
--- /dev/null	(date 1730910225976)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/TagController.java	(date 1730910225976)
@@ -0,0 +1,60 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.payload.request.TagCreateRequest;
+import com.swpproject.koi_care_system.payload.request.TagUpdateRequest;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.tag.ITagService;
+import jakarta.validation.Valid;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+@RestController
+@RequestMapping("/tag")
+@RequiredArgsConstructor
+public class TagController {
+    private final ITagService tagService;
+
+    @PostMapping("/create")
+    public ResponseEntity<ApiResponse> createTag(@RequestBody TagCreateRequest tagCreateRequest) {
+        return ResponseEntity.status(HttpStatus.CREATED).body(ApiResponse.builder()
+                .message("Tag has been created")
+                .data(tagService.createTag(tagCreateRequest))
+                .build());
+    }
+
+    @PutMapping("/update/{tagId}")
+    public ResponseEntity<ApiResponse> updateTag(@PathVariable int tagId, @RequestBody @Valid TagUpdateRequest tagUpdateRequest) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Tag has been updated")
+                .data(tagService.updateTag(tagId, tagUpdateRequest))
+                .build());
+    }
+
+    @GetMapping("/getID/{tagId}")
+    public ResponseEntity<ApiResponse> getTagById(@PathVariable int tagId) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Tag found")
+                .data(tagService.getTagById(tagId))
+                .build());
+    }
+
+    @GetMapping
+    public ResponseEntity<ApiResponse> getAllTags() {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("List of tags")
+                .data(tagService.getAllTags())
+                .build());
+    }
+
+    @DeleteMapping("/delete/{tagId}")
+    public ResponseEntity<ApiResponse> deleteTag(@PathVariable int tagId) {
+        tagService.deleteTag(tagId);
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Tag has been deleted")
+                .build());
+    }
+
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/SupplierController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/SupplierController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/SupplierController.java
new file mode 100644
--- /dev/null	(date 1730910225975)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/SupplierController.java	(date 1730910225975)
@@ -0,0 +1,78 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.models.Supplier;
+import com.swpproject.koi_care_system.payload.request.AddSupplierRequest;
+import com.swpproject.koi_care_system.payload.request.SupplierUpdateRequest;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.supplier.ISupplierService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
+import static org.springframework.http.HttpStatus.NOT_FOUND;
+
+@RequiredArgsConstructor
+@RestController
+@RequestMapping("/suppliers")
+public class SupplierController {
+    private final ISupplierService supplierService;
+    @GetMapping("/all")
+    public ResponseEntity<ApiResponse> getAllSupplier(){
+        try{
+            List<Supplier> supplierList = supplierService.getAllSupplier();
+            return ResponseEntity.ok(new ApiResponse("Found!",supplierList));
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse("Error",null));
+        }
+    }
+    @PostMapping("/add")
+    public ResponseEntity<ApiResponse> addSupplier(@RequestBody AddSupplierRequest addSupplierRequest){
+        try{
+            Supplier theSupplier = supplierService.addSupplier(addSupplierRequest);
+            return ResponseEntity.ok(new ApiResponse("Added success!",theSupplier));
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse("Error",null));
+        }
+    }
+    @GetMapping("/supplier/{id}/by_id")
+    public ResponseEntity<ApiResponse> getSupplierById(@PathVariable Long id){
+        try {
+            Supplier supplier = supplierService.getSupplierById(id);
+            return  ResponseEntity.ok(new ApiResponse("Found", supplier));
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+    @GetMapping("/supplier/{name}/by_name")
+    public ResponseEntity<ApiResponse> getSupplierByName(@PathVariable String name){
+        try {
+            Supplier supplier = supplierService.getSupplierByName(name);
+            return  ResponseEntity.ok(new ApiResponse("Found", supplier));
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+    @DeleteMapping("/supplier/{id}/delete")
+    public ResponseEntity<ApiResponse> deleteSupplier(@PathVariable Long id){
+        try {
+            supplierService.deleteSupplierById(id);
+            return  ResponseEntity.ok(new ApiResponse("Found",null));
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+    @PutMapping("/supplier/{id}/update")
+    public ResponseEntity<ApiResponse> updateSupplier(@PathVariable Long id, @RequestBody SupplierUpdateRequest supplierUpdateRequest){
+        try {
+            Supplier updatedSupplier = supplierService.updateSupplier(supplierUpdateRequest,id);
+            return ResponseEntity.ok(new ApiResponse("Update success!", updatedSupplier));
+        }catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/SubscribeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/SubscribeController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/SubscribeController.java
new file mode 100644
--- /dev/null	(date 1730910225975)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/SubscribeController.java	(date 1730910225975)
@@ -0,0 +1,39 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.payload.request.UpgradePremiumRequest;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.subscribe.ISubscribePlanService;
+import jakarta.validation.Valid;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
+
+@Slf4j
+@RestController
+@RequestMapping("/subscribe")
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class SubscribeController {
+    private final ISubscribePlanService subscribePlanService;
+    @GetMapping("/all")
+    public ResponseEntity<ApiResponse> getAllCustomer(){
+        try{
+            return ResponseEntity.ok(new ApiResponse("Found",subscribePlanService.getAllCustomer()));
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+    @PutMapping("/upgrade")
+    public ResponseEntity<ApiResponse> upgradePremium(@RequestBody @Valid UpgradePremiumRequest request){
+        try{
+            return ResponseEntity.ok(new ApiResponse("Upgrade success",subscribePlanService.upgradePremium(request)));
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddItemToCartRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddItemToCartRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddItemToCartRequest.java
new file mode 100644
--- /dev/null	(date 1730910225988)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/AddItemToCartRequest.java	(date 1730910225988)
@@ -0,0 +1,10 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import lombok.Data;
+
+@Data
+public class AddItemToCartRequest {
+    private Long cartId;
+    private Long productId;
+    private int quantity;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/WebSocketReminderController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/WebSocketReminderController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/WebSocketReminderController.java
new file mode 100644
--- /dev/null	(date 1730910225976)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/WebSocketReminderController.java	(date 1730910225976)
@@ -0,0 +1,14 @@
+package com.swpproject.koi_care_system.controllers;
+
+import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.GetMapping;
+
+@Controller
+public class WebSocketReminderController {
+
+    @GetMapping("/reminders")
+    public String notificationsPage() {
+        return "reminders"; // This points to the reminders.html file
+    }
+}
+
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/WaterParametersController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/WaterParametersController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/WaterParametersController.java
new file mode 100644
--- /dev/null	(date 1730910225976)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/WaterParametersController.java	(date 1730910225976)
@@ -0,0 +1,79 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.payload.request.ParametersCreateRequest;
+import com.swpproject.koi_care_system.payload.request.ParametersUpdateRequest;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.waterparameter.WaterParameterService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+@RestController
+@RequestMapping("water-parameters")
+@RequiredArgsConstructor
+public class WaterParametersController {
+    private final WaterParameterService waterParameterService;
+
+    @PostMapping("/create")
+    public ResponseEntity<ApiResponse> createWaterParameters(@RequestBody ParametersCreateRequest request) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Water parameters created")
+                .data(waterParameterService.createWaterParameters(request))
+                .build());
+    }
+
+    @PutMapping("/update/{id}")
+    public ResponseEntity<ApiResponse> updateWaterParameters(@PathVariable long id, @RequestBody ParametersUpdateRequest request) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Water parameters updated")
+                .data(waterParameterService.updateWaterParameters(id, request))
+                .build());
+    }
+
+    @DeleteMapping("/delete/{id}")
+    public ResponseEntity<ApiResponse> deleteWaterParameters(@PathVariable long id) {
+        waterParameterService.deleteWaterParameters(id);
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Water parameters deleted")
+                .build());
+    }
+
+    @GetMapping
+    public ResponseEntity<ApiResponse> getAllWaterParameters(@RequestParam(defaultValue = "0") int pageNumber, @RequestParam(defaultValue = "20") int pageSize, @RequestParam(defaultValue = "createDateTime") String sortBy, @RequestParam(defaultValue = "Desc") String sortDir) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Water parameters list")
+                .data(waterParameterService.getAllWaterParameters(pageNumber, pageSize, sortBy, sortDir))
+                .build());
+    }
+
+    @GetMapping("/getById/{id}")
+    public ResponseEntity<ApiResponse> getWaterParametersById(@PathVariable long id) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Water parameters found")
+                .data(waterParameterService.getWaterParametersById(id))
+                .build());
+    }
+    @GetMapping("/getByKoiPondId/{koiPondId}")
+    public ResponseEntity<ApiResponse> getWaterParametersByKoiPondId(@PathVariable Long koiPondId){
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Water parameters found")
+                .data(waterParameterService.getAllWaterParametersByKoiPondId(koiPondId))
+                .build());
+    }
+
+    @GetMapping("/getByUserId/{userId}")
+    public ResponseEntity<ApiResponse> getWaterParametersByUserId(@PathVariable Long userId){
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Water parameters found")
+                .data(waterParameterService.getAllWaterParametersByUserId(userId))
+                .build()
+        );
+    }
+    @GetMapping("/getLatestByKoiPondId/{koiPondId}")
+    public ResponseEntity<ApiResponse> getLatestWaterParametersByKoiPondId(@PathVariable Long koiPondId){
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Water parameters found")
+                .data(waterParameterService.getLatestWaterParametersByKoiPondId(koiPondId))
+                .build());
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/UserProfileController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/UserProfileController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/UserProfileController.java
new file mode 100644
--- /dev/null	(date 1730910225976)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/UserProfileController.java	(date 1730910225976)
@@ -0,0 +1,54 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.payload.request.ProfileUpdateRequest;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.profile.ProfileService;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
+
+@RestController
+@RequestMapping("/profile")
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class UserProfileController {
+    ProfileService profileService;
+    @PutMapping("/update/{userId}")
+    public ResponseEntity<ApiResponse> updateProfile(@PathVariable Long userId, @ModelAttribute ProfileUpdateRequest request) {
+        try {
+            return ResponseEntity.ok(ApiResponse.builder()
+                    .message("Profile has been updated")
+                    .data(profileService.updateProfile(userId, request))
+                    .build());
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+    @GetMapping("/{userId}")
+    public ResponseEntity<ApiResponse> getProfile(@PathVariable Long userId) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Profile found")
+                .data(profileService.getProfile(userId))
+                .build());
+    }
+
+    @GetMapping("/all")
+    public ResponseEntity<ApiResponse> getAllProfile(){
+        return ResponseEntity.ok(ApiResponse.builder()
+                        .message("Profile list found")
+                        .data(profileService.getAllProfile())
+                .build());
+    }
+
+    @GetMapping("/all/member")
+    public ResponseEntity<ApiResponse> getAllMemberProfile(){
+        return ResponseEntity.ok(ApiResponse.builder()
+                        .message("Profile member list found")
+                        .data(profileService.getAllMemberProfile())
+                .build());
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ProductController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ProductController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ProductController.java
new file mode 100644
--- /dev/null	(date 1730910225974)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ProductController.java	(date 1730910225974)
@@ -0,0 +1,178 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.dto.ProductDto;
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.models.Product;
+import com.swpproject.koi_care_system.payload.request.AddProductRequest;
+import com.swpproject.koi_care_system.payload.request.ProductUpdateRequest;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.product.IProductService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
+import static org.springframework.http.HttpStatus.NOT_FOUND;
+
+@RequiredArgsConstructor
+@RestController
+@RequestMapping("/products")
+public class ProductController {
+
+    private final IProductService productService;
+
+    @GetMapping("/all")
+    public ResponseEntity<ApiResponse> getAllProducts() {
+        List<Product> products = productService.getAllProducts();
+        List<ProductDto> convertedProducts = productService.getConvertedProducts(products);
+        return  ResponseEntity.ok(new ApiResponse("success", convertedProducts));
+    }
+    @GetMapping("/product/{productId}/product")
+    public ResponseEntity<ApiResponse> getProductById(@PathVariable Long productId) throws ResourceNotFoundException {
+        Product product = productService.getProductById(productId);
+        ProductDto productDto = productService.convertToDto(product);
+        return  ResponseEntity.ok(new ApiResponse("success", productDto));
+    }
+
+    @PostMapping("/add")
+    public ResponseEntity<ApiResponse> addProduct(@RequestBody AddProductRequest product) {
+        try {
+            Product theProduct = productService.addProduct(product);
+            ProductDto productDto = productService.convertToDto(theProduct);
+            return ResponseEntity.ok(new ApiResponse("Add product success!", productDto));
+        } catch (Exception e) {
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+
+    @PutMapping("/product/{productId}/update")
+    public  ResponseEntity<ApiResponse> updateProduct(@RequestBody ProductUpdateRequest request, @PathVariable Long productId) {
+        try {
+            Product theProduct = productService.updateProduct(request, productId);
+            ProductDto productDto = productService.convertToDto(theProduct);
+            return ResponseEntity.ok(new ApiResponse("Update product success!", productDto));
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+    @DeleteMapping("/product/{productId}/delete")
+    public ResponseEntity<ApiResponse> deleteProduct(@PathVariable Long productId) {
+        try {
+            productService.deleteProductById(productId);
+            return ResponseEntity.ok(new ApiResponse("Delete product success!", productId));
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+
+    @GetMapping("/products/by/brand-and-name")
+    public ResponseEntity<ApiResponse> getProductByBrandAndName(@RequestParam String brandName, @RequestParam String productName) {
+        try {
+            List<Product> products = productService.getProductsByBrandAndName(brandName, productName);
+            if (products.isEmpty()) {
+                return ResponseEntity.status(NOT_FOUND).body(new ApiResponse("No products found ", null));
+            }
+            List<ProductDto> convertedProducts = productService.getConvertedProducts(products);
+            return  ResponseEntity.ok(new ApiResponse("success", convertedProducts));
+        } catch (Exception e) {
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+    @GetMapping("/products/by/supplier")
+    public ResponseEntity<ApiResponse> getProductsBySupplier(@RequestParam String supplierName){
+        try{
+            List<Product> productList = productService.getProductsBySupplier(supplierName);
+            if(productList.isEmpty()){
+                return ResponseEntity.status(NOT_FOUND).body(new ApiResponse("No products found ",null));
+            }
+            List<ProductDto> productDtos=productService.getConvertedProducts(productList);
+            return ResponseEntity.ok(new ApiResponse("Success",productDtos));
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse("Error",null));
+        }
+    }
+    @GetMapping("/products/by/category-and-brand")
+    public ResponseEntity<ApiResponse> getProductByCategoryAndBrand(@RequestParam String category, @RequestParam String brand){
+        try {
+            List<Product> products = productService.getProductsByCategoryAndBrand(category, brand);
+            if (products.isEmpty()) {
+                return ResponseEntity.status(NOT_FOUND).body(new ApiResponse("No products found ", null));
+            }
+            List<ProductDto> convertedProducts = productService.getConvertedProducts(products);
+            return  ResponseEntity.ok(new ApiResponse("success", convertedProducts));
+        } catch (Exception e) {
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse("error", e.getMessage()));
+        }
+    }
+
+    @GetMapping("/products/{name}/products")
+    public ResponseEntity<ApiResponse> getProductByName(@PathVariable String name){
+        try {
+            List<Product> products = productService.getProductsByName(name);
+            if (products.isEmpty()) {
+                return ResponseEntity.status(NOT_FOUND).body(new ApiResponse("No products found ", null));
+            }
+            List<ProductDto> convertedProducts = productService.getConvertedProducts(products);
+            return  ResponseEntity.ok(new ApiResponse("success", convertedProducts));
+        } catch (Exception e) {
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse("error", e.getMessage()));
+        }
+    }
+
+    @GetMapping("/product/by-brand")
+    public ResponseEntity<ApiResponse> findProductByBrand(@RequestParam String brand) {
+        try {
+            List<Product> products = productService.getProductsByBrand(brand);
+            if (products.isEmpty()) {
+                return ResponseEntity.status(NOT_FOUND).body(new ApiResponse("No products found ", null));
+            }
+            List<ProductDto> convertedProducts = productService.getConvertedProducts(products);
+            return  ResponseEntity.ok(new ApiResponse("success", convertedProducts));
+        } catch (Exception e) {
+            return ResponseEntity.ok(new ApiResponse(e.getMessage(), null));
+        }
+    }
+
+    @GetMapping("/product/{category}/all/products")
+    public ResponseEntity<ApiResponse> findProductByCategory(@PathVariable String category) {
+        try {
+            List<Product> products = productService.getProductsByCategory(category);
+            if (products.isEmpty()) {
+                return ResponseEntity.status(NOT_FOUND).body(new ApiResponse("No products found ", null));
+            }
+            List<ProductDto> convertedProducts = productService.getConvertedProducts(products);
+            return  ResponseEntity.ok(new ApiResponse("success", convertedProducts));
+        } catch (Exception e) {
+            return ResponseEntity.ok(new ApiResponse(e.getMessage(), null));
+        }
+    }
+
+    @GetMapping("/product/count/by-brand/and-name")
+    public ResponseEntity<ApiResponse> countProductsByBrandAndName(@RequestParam String brand, @RequestParam String name) {
+        try {
+            var productCount = productService.countProductsByBrandAndName(brand, name);
+            return ResponseEntity.ok(new ApiResponse("Product count!", productCount));
+        } catch (Exception e) {
+            return ResponseEntity.ok(new ApiResponse(e.getMessage(), null));
+        }
+    }
+
+    @GetMapping("/recommend/{issueTypeId}")
+    public ResponseEntity<ApiResponse> getProductsByIssueType(@PathVariable Long issueTypeId) {
+        try {
+            List<Product> products = productService.getProductsByIssueType(issueTypeId);
+            if (products.isEmpty()) {
+                return ResponseEntity.status(NOT_FOUND).body(new ApiResponse("No products found ", null));
+            }
+            List<ProductDto> convertedProducts = productService.getConvertedProducts(products);
+            return ResponseEntity.ok(new ApiResponse("success", convertedProducts));
+        } catch (Exception e) {
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse("error", e.getMessage()));
+        }
+    }
+
+
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/PaymentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/PaymentController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/PaymentController.java
new file mode 100644
--- /dev/null	(date 1730910225974)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/PaymentController.java	(date 1730910225974)
@@ -0,0 +1,79 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.dto.PaymentDto;
+import com.swpproject.koi_care_system.dto.VnPayDto;
+import com.swpproject.koi_care_system.enums.OrderStatus;
+import com.swpproject.koi_care_system.payload.request.PaymentStoreRequest;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.payment.IPaymentService;
+import com.swpproject.koi_care_system.service.vnpay.VnPayService;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
+import jakarta.validation.Valid;
+import lombok.RequiredArgsConstructor;
+import org.springframework.format.annotation.DateTimeFormat;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+import org.springframework.web.servlet.ModelAndView;
+
+import java.net.URI;
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
+
+@RestController
+@RequestMapping("/payment")
+@RequiredArgsConstructor
+public class PaymentController {
+    private final VnPayService vnPayService;
+    private final IPaymentService paymentService;
+    @GetMapping("/vn-pay")
+    public ResponseEntity<VnPayDto> pay(HttpServletRequest request) {
+        return new ResponseEntity<>(vnPayService.createVnPayPayment(request), HttpStatus.OK);
+    }
+    @GetMapping("/vn-pay/order")
+    public ResponseEntity<VnPayDto> payForOrder(HttpServletRequest request){
+        return new ResponseEntity<>(vnPayService.createVnPayPaymentViaOrderId(request),HttpStatus.OK);
+    }
+    @RequestMapping("vn-pay-return")
+    public ResponseEntity<Void> payResponse(HttpServletRequest request){
+        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMddHHmmss");
+        PaymentDto payment = paymentService.storePayment(PaymentStoreRequest.builder()
+                        .createDate(LocalDateTime.parse(request.getParameter("vnp_PayDate"),formatter))
+                        .amount(Long.parseLong(request.getParameter("vnp_Amount"))/100)
+                        .status(request.getParameter("vnp_ResponseCode"))
+                        .invoiceCode(request.getParameter("vnp_TxnRef"))
+                        .transactionCode(request.getParameter("vnp_TransactionNo"))
+                        .orderId(Long.parseLong(
+                                request.getParameter("vnp_OrderInfo")
+                                        .split(" ")[request.getParameter("vnp_OrderInfo").split(" ").length - 1]
+                                        .trim()))
+                        .build());
+        if (payment.getStatus().equals("COMPLETED")) {
+            return ResponseEntity.status(HttpStatus.FOUND)
+                    .location(URI.create("https://koi-care-system.vercel.app/member/paymentSuccess"))
+                    .build();
+        } else {
+            return ResponseEntity.status(HttpStatus.FOUND)
+                    .location(URI.create("https://koi-care-system.vercel.app/member/paymentError"))
+                    .build();
+        }
+    }
+    @GetMapping("/all")
+    public ResponseEntity<ApiResponse> getAllPayment(){
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Get successful")
+                .data(paymentService.getAllPayment())
+                .build());
+    }
+
+    @GetMapping("/user/{userId}")
+    public ResponseEntity<ApiResponse> getPaymentsByUserId(@PathVariable Long userId){
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Get successful")
+                .data(paymentService.getAllPaymentByUserId(userId))
+                .build());
+    }
+
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/OrderController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/OrderController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/OrderController.java
new file mode 100644
--- /dev/null	(date 1730910225974)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/OrderController.java	(date 1730910225974)
@@ -0,0 +1,97 @@
+package com.swpproject.koi_care_system.controllers;
+import com.swpproject.koi_care_system.dto.OrderDto;
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.payload.request.PlaceOrderRequest;
+import com.swpproject.koi_care_system.payload.request.PlacePremiumOrderRequest;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.order.IOrderService;
+import jakarta.validation.Valid;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@RequiredArgsConstructor
+@RestController
+@RequestMapping("/orders")
+public class OrderController {
+    private final IOrderService orderService;
+
+    @PostMapping("/order")
+    public ResponseEntity<ApiResponse> createOrder(@RequestBody @Valid PlaceOrderRequest request) {
+        try {
+            OrderDto order =  orderService.placeOrder(request);
+            return ResponseEntity.ok(new ApiResponse("Place Order Success!", order));
+        } catch (Exception e) {
+            return  ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new ApiResponse("Error Occured!", e.getMessage()));
+        }
+    }
+
+    @PostMapping("/order/premium")
+    public ResponseEntity<ApiResponse> placePremiumOrder(@RequestBody @Valid PlacePremiumOrderRequest request){
+        try {
+            OrderDto order =  orderService.placePremiumPlanOrder(request);
+            return ResponseEntity.ok(new ApiResponse("Order premium Success!", order));
+        } catch (Exception e) {
+            return  ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new ApiResponse("Error Occured!", e.getMessage()));
+        }
+    }
+
+    @GetMapping("/{orderId}/order")
+    public ResponseEntity<ApiResponse> getOrderById(@PathVariable Long orderId){
+        try {
+            OrderDto order = orderService.getOrder(orderId);
+            return ResponseEntity.ok(new ApiResponse("Item Order Success!", order));
+        } catch (ResourceNotFoundException e) {
+            return  ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ApiResponse("Oops!", e.getMessage()));
+        }
+    }
+    @GetMapping("/order/inMonth")
+    public ResponseEntity<ApiResponse> getOrderInMonth(){
+        return ResponseEntity.ok(ApiResponse.builder()
+                        .message("Get order successful")
+                        .data(orderService.getOrdersInOneMonth())
+                .build());
+    }
+    @GetMapping("/user/{userId}/order")
+    public ResponseEntity<ApiResponse> getUserOrders(@PathVariable Long userId) {
+        try {
+            List<OrderDto> order = orderService.getUserOrders(userId);
+            return ResponseEntity.ok(new ApiResponse("Get Order Success", order));
+        } catch (ResourceNotFoundException e) {
+            return  ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ApiResponse("Oops!", e.getMessage()));
+        }
+    }
+
+    @GetMapping("/all")
+    public ResponseEntity<ApiResponse> getAllOrders(){
+        try {
+            return ResponseEntity.ok(ApiResponse.builder()
+                            .message("Get all orders success")
+                            .data(orderService.getAllOrders())
+                    .build());
+        }catch (ResourceNotFoundException e){
+            return ResponseEntity.status((HttpStatus.NOT_FOUND)).body(new ApiResponse("Ooops! Not found",e.getMessage()));
+        }
+    }
+
+
+    @GetMapping("/isBought/user/{userId}/product/{productId}")
+    public ResponseEntity<ApiResponse> isBought(@PathVariable Long userId, @PathVariable Long productId){
+        return ResponseEntity.ok(ApiResponse.builder()
+                        .message("Get result successs")
+                        .data(orderService.isBoughtProduct(userId,productId))
+                .build());
+    }
+    @PutMapping("/{orderId}/order/delivery")
+    public ResponseEntity<ApiResponse> updateDelivered(@PathVariable Long orderId) {
+        try {
+            orderService.updateDeliveredStatus(orderId);
+            return ResponseEntity.ok(new ApiResponse("Update order success!",null));
+        } catch (ResourceNotFoundException e) {
+            return  ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ApiResponse("Oops!", e.getMessage()));
+        }
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/NotificationController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/NotificationController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/NotificationController.java
new file mode 100644
--- /dev/null	(date 1730910225974)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/NotificationController.java	(date 1730910225974)
@@ -0,0 +1,62 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.notification.INotificationService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+@RestController
+@RequestMapping("/notifications")
+@RequiredArgsConstructor
+public class NotificationController {
+    private final INotificationService notificationService;
+
+    @GetMapping("/list/{userId}")
+    public ResponseEntity<ApiResponse> getListNotification(@PathVariable Long userId) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("List of notifications")
+                .data(notificationService.getNotifications(userId))
+                .build());
+    }
+
+    @GetMapping("/list-unread/{userId}")
+    public ResponseEntity<ApiResponse> getListUnreadNotification(@PathVariable Long userId) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("List of unread notifications")
+                .data(notificationService.getUnreadNotifications(userId))
+                .build());
+    }
+
+    @GetMapping("/mark-as-read/{id}")
+    public ResponseEntity<ApiResponse> markAsRead(@PathVariable Long id) {
+        notificationService.markAsRead(id);
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Notification marked as read")
+                .build());
+    }
+
+    @GetMapping("/mark-as-read-all/{id}")
+    public ResponseEntity<ApiResponse> markAsReadAll(@PathVariable Long id) {
+        notificationService.markAsReadAll(id);
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("All notifications marked as read")
+                .build());
+    }
+
+    @DeleteMapping("/delete/{id}")
+    public ResponseEntity<ApiResponse> deleteNotification(@PathVariable Long id) {
+        notificationService.deleteNotification(id);
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Notification deleted")
+                .build());
+    }
+
+    @DeleteMapping("/delete-all/{userId}")
+    public ResponseEntity<ApiResponse> deleteAllNotifications(@PathVariable Long userId) {
+        notificationService.deleteAllNotifications(userId);
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("All notifications deleted")
+                .build());
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ReportController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ReportController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ReportController.java
new file mode 100644
--- /dev/null	(date 1730910225975)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ReportController.java	(date 1730910225975)
@@ -0,0 +1,50 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.report.FishGrowthReportService;
+import com.swpproject.koi_care_system.service.report.FishPondWaterTimeReportService;
+import com.swpproject.koi_care_system.service.report.ProductReportService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.time.LocalDate;
+
+@RequiredArgsConstructor
+@RestController
+@RequestMapping("/reports")
+public class ReportController {
+    private final ProductReportService productReportService;
+    private final FishPondWaterTimeReportService fishPondWaterTimeReportService;
+    private final FishGrowthReportService fishGrowthReportService;
+    @GetMapping("/product")
+    public ResponseEntity<ApiResponse> getProductReport(){
+        return ResponseEntity.ok(ApiResponse.builder()
+                        .message("Get report success")
+                        .data(productReportService.getProductReport())
+                .build());
+    }
+
+    @GetMapping("/category")
+    public ResponseEntity<ApiResponse> getProductCategoryReport(){
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Get report success")
+                .data(productReportService.getProductCategoryReport())
+                .build());
+    }
+    @GetMapping("/FishPondWater")
+    public ResponseEntity<ApiResponse> getFishPondWaterTimeReport(@RequestParam Long userId, @RequestParam LocalDate date){
+        return ResponseEntity.ok(ApiResponse.builder()
+                        .message("Get report success")
+                        .data(fishPondWaterTimeReportService.getFishPondWaterTimeReport(userId,date))
+                .build());
+    }
+
+    @GetMapping("/GrowthFish/{koiFishId}")
+    public ResponseEntity<ApiResponse> getGrowthFishReport(@PathVariable Long koiFishId){
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Get report success")
+                .data(fishGrowthReportService.getFishGrowthReport(koiFishId))
+                .build());
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ReminderController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ReminderController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ReminderController.java
new file mode 100644
--- /dev/null	(date 1730910225975)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ReminderController.java	(date 1730910225975)
@@ -0,0 +1,55 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.payload.request.ReminderRequest;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.reminder.IReminderService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.security.Principal;
+
+@RestController
+@RequestMapping("/reminders")
+@RequiredArgsConstructor
+public class ReminderController {
+    private final IReminderService reminderService;
+
+    @PostMapping("/create")
+    public ResponseEntity<ApiResponse> createReminder(@RequestBody ReminderRequest request, Principal connectedUser) {
+        return ResponseEntity.status(201).body(ApiResponse.builder()
+                .message("Reminder created successfully")
+                .data(reminderService.createReminder(request, connectedUser))
+                .build());
+    }
+
+    @PutMapping("/update/{id}")
+    public ResponseEntity<ApiResponse> updateReminder(@PathVariable Long id, @RequestBody ReminderRequest request) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Reminder updated successfully")
+                .data(reminderService.updateReminder(id, request))
+                .build());
+    }
+
+    @DeleteMapping("/delete/{id}")
+    public ResponseEntity<ApiResponse> deleteReminder(@PathVariable Long id) {
+        reminderService.deleteReminder(id);
+        return ResponseEntity.noContent().build();
+    }
+
+    @GetMapping("/list")
+    public ResponseEntity<ApiResponse> getListReminder() {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("List of reminders")
+                .data(reminderService.getListReminder())
+                .build());
+    }
+
+    @GetMapping("/list/user")
+    public ResponseEntity<ApiResponse> getListReminderByUser(Principal connectedUser) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("List of reminders")
+                .data(reminderService.getListReminderByUser(connectedUser))
+                .build());
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/RemarkController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/RemarkController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/RemarkController.java
new file mode 100644
--- /dev/null	(date 1730910225975)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/RemarkController.java	(date 1730910225975)
@@ -0,0 +1,58 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.payload.request.RemarkCreateRequest;
+import com.swpproject.koi_care_system.payload.request.RemarkUpdateRequest;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.remark.IRemarkService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+@RequestMapping("/remark")
+@RestController
+@RequiredArgsConstructor
+public class RemarkController {
+    private final IRemarkService remarkService;
+
+    @PostMapping("/create")
+    ResponseEntity<ApiResponse> createRemark(@RequestBody RemarkCreateRequest remarkCreateRequest) {
+        return ResponseEntity.status(HttpStatus.CREATED).body(ApiResponse.builder()
+                .data(remarkService.createRemark(remarkCreateRequest))
+                .message("Remark has been created")
+                .build());
+    }
+
+    @PutMapping("/update/{remarkId}")
+    ResponseEntity<ApiResponse> updateRemark(@PathVariable Long remarkId, @RequestBody RemarkUpdateRequest remarkUpdateRequest) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .data(remarkService.updateRemark(remarkId, remarkUpdateRequest))
+                .message("Remark has been updated")
+                .build());
+    }
+
+    @DeleteMapping("/delete/{remarkId}")
+    ResponseEntity<ApiResponse> deleteRemark(@PathVariable Long remarkId) {
+        remarkService.deleteRemark(remarkId);
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Remark has been deleted")
+                .build());
+    }
+
+    @GetMapping("/get/{remarkId}")
+    ResponseEntity<ApiResponse> getRemark(@PathVariable Long remarkId) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .data(remarkService.getRemark(remarkId))
+                .message("Remark found")
+                .build());
+    }
+
+    @GetMapping("/get-all/{koiFishId}")
+    ResponseEntity<ApiResponse> getRemarksByKoiFish(@PathVariable Long koiFishId) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("List of remarks")
+                .data(remarkService.getRemarksByKoiFish(koiFishId))
+                .build());
+    }
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/PromotionController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/PromotionController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/PromotionController.java
new file mode 100644
--- /dev/null	(date 1730910225974)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/PromotionController.java	(date 1730910225974)
@@ -0,0 +1,102 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.dto.PromotionDto;
+import com.swpproject.koi_care_system.payload.request.AddPromotionRequest;
+import com.swpproject.koi_care_system.payload.request.AdminConfirmPromotionRequest;
+import com.swpproject.koi_care_system.payload.request.PromotionUpdateRequest;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.promotion.IPromotionService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.access.prepost.PostAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
+
+@RestController
+@RequestMapping("/promotions")
+@RequiredArgsConstructor
+public class PromotionController {
+    private final IPromotionService promotionService;
+
+    @PostMapping("/create")
+    public ResponseEntity<ApiResponse> createPromotion(@RequestBody AddPromotionRequest addPromotionRequest){
+        try{
+            PromotionDto promotion = promotionService.createPromotion(addPromotionRequest);
+            return ResponseEntity.ok(new ApiResponse("Create promotion success",promotion));
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+
+    @PutMapping("/promotion/{id}/update")
+    public ResponseEntity<ApiResponse> updatePromotion(@PathVariable Long id, @RequestBody PromotionUpdateRequest promotionUpdateRequest){
+        try{
+            PromotionDto promotionDto = promotionService.updatePromotion(id,promotionUpdateRequest);
+            return ResponseEntity.ok(new ApiResponse("Update promotion success", promotionDto));
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+    @PutMapping("/promotion/confirm")
+    public ResponseEntity<ApiResponse> confirmPromotion(@RequestBody AdminConfirmPromotionRequest request){
+        try{
+            PromotionDto promotionDto = promotionService.verifyByAdmin(request);
+            return ResponseEntity.ok(new ApiResponse("Update promotion success", promotionDto));
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+
+    @DeleteMapping("/promotion/{id}/delete")
+    public ResponseEntity<ApiResponse> deletePromotion(@PathVariable Long id){
+        try{
+            promotionService.deletePromotion(id);
+            return ResponseEntity.ok(new ApiResponse("Delete promotion success", null));
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse(e.getMessage(),null));
+        }
+    }
+    @GetMapping("/all")
+    public ResponseEntity<ApiResponse> getAllPromotions(){
+        try{
+            List<PromotionDto> promotionDtoList = promotionService.getAllPromotions();
+            return ResponseEntity.ok(new ApiResponse("Found", promotionDtoList));
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse(e.getMessage(),null));
+        }
+    }
+    @GetMapping("/promotion/{id}")
+    public ResponseEntity<ApiResponse> getPromotionById(@PathVariable Long id){
+        try{
+            PromotionDto promotionDto = promotionService.getPromotionById(id);
+            return ResponseEntity.ok(new ApiResponse("Found",promotionDto));
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse(e.getMessage(),null));
+        }
+    }
+
+    @GetMapping("/promotion/request")
+    public ResponseEntity<ApiResponse> getPromotionRequest(){
+        try {
+            List<PromotionDto> promotionDtoList = promotionService.getAllPromotionsRequest();
+            return ResponseEntity.ok(new ApiResponse("Found",promotionDtoList));
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse(e.getMessage(),null));
+        }
+    }
+
+    @GetMapping("/{promotionId}/products/view")
+    public ResponseEntity<ApiResponse> getAllProductByPromotionId(@PathVariable Long promotionId) {
+        try{
+            return ResponseEntity.ok(new ApiResponse("Get product by promotion success",promotionService.getAllProductByPromotionId(promotionId)));
+        }catch (Exception e) {
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/IssueController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/IssueController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/IssueController.java
new file mode 100644
--- /dev/null	(date 1730910225973)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/IssueController.java	(date 1730910225973)
@@ -0,0 +1,51 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.issue.IIssueService;
+import com.swpproject.koi_care_system.service.issue.IIssueTypeService;
+import com.swpproject.koi_care_system.service.waterparameter.IWaterParameters;
+import lombok.RequiredArgsConstructor;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping("/issues")
+@RequiredArgsConstructor
+public class IssueController {
+    @Autowired
+    private final IIssueService issueService;
+
+    @Autowired
+    private final IIssueTypeService iIssueTypeService;
+
+    @Autowired
+    private final IWaterParameters waterParameters;
+
+    @GetMapping("/all/{waterParametersId}")
+    public ResponseEntity<ApiResponse> getAllIssues(@PathVariable Long waterParametersId) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("All issues from water parameters")
+                .data(issueService.getIssue(waterParametersId))
+                .build());
+    }
+    @GetMapping("/latest/{koipondId}")
+    public ResponseEntity<ApiResponse> getCurrentIssueByKoiPondId(@PathVariable Long koipondId){
+            long waterId = waterParameters.getLatestWaterParametersByKoiPondId(koipondId).getId();
+            return ResponseEntity.ok(ApiResponse.builder()
+                    .message("All current issue of koi pond")
+                    .data(issueService.getIssue(waterId))
+                    .build());
+    }
+    @GetMapping("/issueType/all")
+    public ResponseEntity<ApiResponse> getAllIssuesType(){
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("All issues type")
+                .data(iIssueTypeService.getAllIssueType())
+                .build());
+    }
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ImageController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ImageController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ImageController.java
new file mode 100644
--- /dev/null	(date 1730910225973)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ImageController.java	(date 1730910225973)
@@ -0,0 +1,76 @@
+package com.swpproject.koi_care_system.controllers;
+import com.swpproject.koi_care_system.dto.ImageDto;
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.models.Image;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.image.IImageService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.core.io.ByteArrayResource;
+import org.springframework.core.io.Resource;
+import org.springframework.http.HttpHeaders;
+import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+import org.springframework.web.multipart.MultipartFile;
+
+import java.sql.SQLException;
+import java.util.List;
+
+import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
+import static org.springframework.http.HttpStatus.NOT_FOUND;
+
+@RequiredArgsConstructor
+@RestController
+@RequestMapping("/images")
+public class ImageController {
+    private final IImageService imageService;
+    @PostMapping("/upload")
+    public ResponseEntity<ApiResponse> saveImages(@RequestParam List<MultipartFile> files, @RequestParam Long productId) {
+        try {
+            List<ImageDto> imageDtos = imageService.saveImages(productId, files);
+            return ResponseEntity.ok(new ApiResponse("Upload success!", imageDtos));
+        } catch (Exception e) {
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse("Upload failed!", e.getMessage()));
+        }
+    }
+
+    @GetMapping("/image/download/{imageId}")
+    public ResponseEntity<Resource> downloadImage(@PathVariable Long imageId) throws SQLException {
+        Image image = imageService.getImageById(imageId);
+        ByteArrayResource resource = new ByteArrayResource(image.getImage().getBytes(1, (int) image.getImage().length()));
+        return  ResponseEntity.ok().contentType(MediaType.parseMediaType(image.getFileType()))
+                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" +image.getFileName() + "\"")
+                .body(resource);
+    }
+    @GetMapping("/all")
+    public ResponseEntity<ApiResponse> getAll(){
+        return ResponseEntity.ok(new ApiResponse("Get Image success",imageService.getAll()));
+    }
+
+    @PutMapping("/image/{imageId}/update")
+    public ResponseEntity<ApiResponse> updateImage(@PathVariable Long imageId, @RequestBody MultipartFile file) {
+        try {
+            Image image = imageService.getImageById(imageId);
+            if(image != null) {
+                imageService.updateImage(file, imageId);
+                return ResponseEntity.ok(new ApiResponse("Update success!", null));
+            }
+        } catch (ResourceNotFoundException e) {
+            return  ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+        return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse("Update failed!", INTERNAL_SERVER_ERROR));
+    }
+    @DeleteMapping("/image/{imageId}/delete")
+    public ResponseEntity<ApiResponse> deleteImage(@PathVariable Long imageId) {
+        try {
+            Image image = imageService.getImageById(imageId);
+            if(image != null) {
+                imageService.deleteImageById( imageId);
+                return ResponseEntity.ok(new ApiResponse("Delete success!", null));
+            }
+        } catch (ResourceNotFoundException e) {
+            return  ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+        return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse("Delete failed!", INTERNAL_SERVER_ERROR));
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/GrowthHistoryController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/GrowthHistoryController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/GrowthHistoryController.java
new file mode 100644
--- /dev/null	(date 1730910225973)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/GrowthHistoryController.java	(date 1730910225973)
@@ -0,0 +1,65 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.payload.request.GrowthCreateRequest;
+import com.swpproject.koi_care_system.payload.request.GrowthUpdateRequest;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.growthhistory.IGrowthHistoryService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
+
+@RestController
+@RequestMapping("growth-history")
+@RequiredArgsConstructor
+public class GrowthHistoryController {
+    private final IGrowthHistoryService growthHistoryService;
+
+    @PostMapping("/create")
+    public ResponseEntity<ApiResponse> createGrowHistory(@ModelAttribute GrowthCreateRequest growCreateRequest) {
+        try{
+            return ResponseEntity.ok(ApiResponse.builder()
+                    .data(growthHistoryService.createGrowthHistory(growCreateRequest))
+                    .message("Growth history has been created")
+                    .build());
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse("Error", INTERNAL_SERVER_ERROR));
+        }
+
+    }
+
+    @PutMapping("/update/{id}")
+    public ResponseEntity<ApiResponse> updateGrowHistory(@PathVariable Long id, @ModelAttribute GrowthUpdateRequest growUpdateRequest) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .data(growthHistoryService.updateGrowthHistory(id, growUpdateRequest))
+                .message("Growth history has been updated")
+                .build());
+    }
+
+    @DeleteMapping("/delete/{id}")
+    public ResponseEntity<ApiResponse> deleteGrowHistory(@PathVariable Long id) {
+        growthHistoryService.deleteGrowthHistory(id);
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Grow history has been deleted")
+                .build());
+    }
+
+    @GetMapping("/get/{id}")
+    public ResponseEntity<ApiResponse> getGrowHistory(@PathVariable Long id) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .data(growthHistoryService.getGrowthHistory(id))
+                .message("Grow history has been found")
+                .build());
+    }
+
+    @GetMapping("/list/{koiFishId}")
+    public ResponseEntity<ApiResponse> getListGrowHistory(@PathVariable Long koiFishId) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .data(growthHistoryService.getListGrowthHistory(koiFishId))
+                .message("List of grow history has been found")
+                .build());
+    }
+
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/FeedbackController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/FeedbackController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/FeedbackController.java
new file mode 100644
--- /dev/null	(date 1730910225973)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/FeedbackController.java	(date 1730910225973)
@@ -0,0 +1,76 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.dto.FeedbackDto;
+import com.swpproject.koi_care_system.payload.request.EditFeedbackRequest;
+import com.swpproject.koi_care_system.payload.request.FeedbackCreateRequest;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.feedback.IFeedbackService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
+import static org.springframework.http.HttpStatus.NOT_FOUND;
+
+@RestController
+@RequestMapping("/feedbacks")
+public class FeedbackController {
+
+    @Autowired
+    private IFeedbackService feedbackService;
+
+    @PostMapping
+    public ResponseEntity<ApiResponse> createFeedback(@RequestBody FeedbackCreateRequest request) {
+        try{
+            FeedbackDto createdFeedback = feedbackService.createFeedBack(request);
+            return ResponseEntity.ok(new ApiResponse("Create Feedback success",createdFeedback));
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+    @PutMapping
+    public ResponseEntity<ApiResponse> editFeedback(@RequestBody EditFeedbackRequest request) {
+        try{
+            FeedbackDto updatedFeedback = feedbackService.editFeedback(request);
+            return ResponseEntity.ok(new ApiResponse("Update success!",updatedFeedback));
+        }catch (Exception e){
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(),null));
+        }
+    }
+    @GetMapping("/product/{productId}")
+    public ResponseEntity<ApiResponse> getFeedbackByProductId(@PathVariable Long productId) {
+        try{
+            List<FeedbackDto> feedbacks = feedbackService.findFeedbackByProductId(productId);
+            return ResponseEntity.ok(new ApiResponse("Found",feedbacks));
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse("Error",INTERNAL_SERVER_ERROR));
+        }
+    }
+    @GetMapping("/{userId}/all")
+    public ResponseEntity<ApiResponse> getFeedbacksByUserId(@PathVariable Long userId){
+        try{
+            List<FeedbackDto> feedbacks = feedbackService.findFeedbackByUserId(userId);
+            return ResponseEntity.ok(new ApiResponse("Found",feedbacks));
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse("Error",INTERNAL_SERVER_ERROR));
+        }
+    }
+
+    @GetMapping("/user/{userId}/product/{productId}")
+    public ResponseEntity<ApiResponse> isPushedFeedback(@PathVariable Long userId, @PathVariable Long productId){
+        return ResponseEntity.ok(new ApiResponse("Found",feedbackService.isPushedFeedback(productId,userId)));
+
+    }
+
+    @DeleteMapping("/feedback/{id}/delete")
+    public ResponseEntity<ApiResponse> deleteFeedbackById(@PathVariable Long id){
+        try{
+            feedbackService.deleteFeedback(id);
+            return ResponseEntity.ok(new ApiResponse("Delete success!",null));
+        }catch (Exception e){
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(),null));
+        }
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/LoginGoogleController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/LoginGoogleController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/LoginGoogleController.java
new file mode 100644
--- /dev/null	(date 1730910225973)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/LoginGoogleController.java	(date 1730910225973)
@@ -0,0 +1,23 @@
+package com.swpproject.koi_care_system.controllers;
+
+import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
+import org.springframework.stereotype.Controller;
+import org.springframework.ui.Model;
+import org.springframework.web.bind.annotation.GetMapping;
+
+@Controller
+public class LoginGoogleController {
+
+    @GetMapping("/login")
+    public String login() {
+        return "login";
+    }
+
+    @GetMapping("/profile")
+    public String profile(OAuth2AuthenticationToken token, Model model) {
+        model.addAttribute("name", token.getPrincipal().getAttributes().get("name"));
+        model.addAttribute("email", token.getPrincipal().getAttributes().get("email"));
+        model.addAttribute("photo", token.getPrincipal().getAttributes().get("picture"));
+        return "user-profile";
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/LogController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/LogController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/LogController.java
new file mode 100644
--- /dev/null	(date 1730910225973)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/LogController.java	(date 1730910225973)
@@ -0,0 +1,84 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.payload.request.LogCreateRequest;
+import com.swpproject.koi_care_system.payload.request.LogUpdateRequest;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.log.ILogService;
+import jakarta.validation.Valid;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
+
+@RestController
+@RequestMapping("/log")
+@RequiredArgsConstructor
+public class LogController {
+    private final ILogService logService;
+
+    @PostMapping("/create")
+    public ResponseEntity<ApiResponse> createLog(@RequestBody @Valid LogCreateRequest logCreateRequest) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .data(logService.createLog(logCreateRequest, logCreateRequest.getKoiPondId()))
+                .message("Log has been created")
+                .build());
+
+    }
+    @PutMapping("/update/{logId}")
+    public ResponseEntity<ApiResponse> updateLog(@PathVariable int logId, @RequestBody @Valid LogUpdateRequest logUpdateRequest) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .data(logService.updateLog(logId, logUpdateRequest))
+                .message("Log has been updated")
+                .build());
+    }
+    @DeleteMapping("/delete/{logId}")
+    public ResponseEntity<ApiResponse> deleteLog(@PathVariable int logId) {
+        logService.deleteLog(logId);
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Log has been deleted")
+                .build());
+    }
+
+    @GetMapping("/getID/{logId}")
+    public ResponseEntity<ApiResponse> getLog(@PathVariable int logId) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Log found")
+                .data(logService.getLogById(logId))
+                .build());
+    }
+    @GetMapping
+    public ResponseEntity<ApiResponse> getAllLogs(@RequestParam(defaultValue = "logDate") String sortBy,
+                                                  @RequestParam(defaultValue = "Desc") String sortDir) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("List of logs")
+                .data(logService.getAllLogs(sortBy, sortDir))
+                .build());
+    }
+    @GetMapping("/koiPond/{pondId}")
+    public ResponseEntity<ApiResponse> getLogsByPondId(@PathVariable long pondId) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("List of logs")
+                .data(logService.getLogsByPondId(pondId))
+                .build());
+    }
+    @GetMapping("/category/{category}")
+    public ResponseEntity<ApiResponse> getLogsByCategory(@PathVariable String category) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("List of logs")
+                .data(logService.getLogsByCategory(category))
+                .build());
+    }
+
+    @GetMapping("/user/{userId}/getAll")
+    public ResponseEntity<ApiResponse> getLogsByUserId(@PathVariable long userId){
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("List of logs")
+                .data(logService.getLogsByUserId(userId))
+                .build());
+    }
+
+}
+
+
+
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/KoiPondController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/KoiPondController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/KoiPondController.java
new file mode 100644
--- /dev/null	(date 1730910225973)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/KoiPondController.java	(date 1730910225973)
@@ -0,0 +1,79 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.dto.KoiPondDto;
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.models.KoiPond;
+import com.swpproject.koi_care_system.models.User;
+import com.swpproject.koi_care_system.payload.request.AddKoiPondRequest;
+import com.swpproject.koi_care_system.payload.request.KoiPondUpdateRequest;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.repository.UserRepository;
+import com.swpproject.koi_care_system.service.koipond.IKoiPondService;
+import com.swpproject.koi_care_system.service.user.IUserService;
+import lombok.RequiredArgsConstructor;
+
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
+import org.springframework.web.bind.annotation.*;
+import java.lang.module.ResolutionException;
+import java.util.List;
+
+import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
+import static org.springframework.http.HttpStatus.NOT_FOUND;
+
+@RequiredArgsConstructor
+@RestController
+@RequestMapping("/koiponds")
+public class KoiPondController {
+    private final IKoiPondService koiPondService;
+    private final UserRepository userRepository;
+    @PostMapping("/create")
+    public ResponseEntity<ApiResponse> createKoiPond(@ModelAttribute AddKoiPondRequest addKoiPondRequest, Authentication authentication) {
+        try{
+            String username = authentication.getName();
+            User user = userRepository.findByUsername(username)
+                    .orElseThrow(()->new RuntimeException("User not found"));
+            addKoiPondRequest.setUser(user);
+            KoiPondDto koiPond = koiPondService.addKoiPond(addKoiPondRequest);
+            return ResponseEntity.ok(new ApiResponse("Add Koi pond success!", koiPond));
+        } catch (Exception e) {
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+    @GetMapping("/user/{userID}/koiponds")
+    public ResponseEntity<ApiResponse> getAllKoiPondByUserID(@PathVariable Long userID) {
+        try {
+            List<KoiPondDto> koiPondDtos = koiPondService.getKoiPondByUserID(userID);
+            return ResponseEntity.ok(new ApiResponse("Found!", koiPondDtos));
+        } catch (Exception e) {
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse("Error", INTERNAL_SERVER_ERROR));
+        }
+    }
+    @GetMapping("/koipond/{id}")
+    public ResponseEntity<ApiResponse> getKoiPondByID(@PathVariable Long id){
+        try{
+            KoiPondDto koiPondDto = koiPondService.getKoiPondById(id);
+            return ResponseEntity.ok(new ApiResponse("Found",koiPondDto));
+        }catch(ResolutionException e){
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(),null));
+        }
+    }
+    @DeleteMapping("/koipond/{id}/delete")
+    public ResponseEntity<ApiResponse> deleteKoiPond(@PathVariable Long id){
+        try{
+            koiPondService.deleteKoiPond(id);
+            return ResponseEntity.ok(new ApiResponse("Delete success!",null));
+        }catch(ResourceNotFoundException e){
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(),null));
+        }
+    }
+    @PutMapping("/koipond/{id}/update")
+    public ResponseEntity<ApiResponse> updateKoiPond(@PathVariable Long id,@ModelAttribute KoiPondUpdateRequest koiPondUpdateRequest) {
+        try {
+            KoiPondDto koiPondDto = koiPondService.updateKoiPond(koiPondUpdateRequest, id);
+            return ResponseEntity.ok(new ApiResponse("Update success!", koiPondDto));
+        } catch (Exception e) {
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/KoiFishController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/KoiFishController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/KoiFishController.java
new file mode 100644
--- /dev/null	(date 1730910225973)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/KoiFishController.java	(date 1730910225973)
@@ -0,0 +1,78 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.dto.KoiFishDto;
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.payload.request.AddKoiFishRequest;
+import com.swpproject.koi_care_system.payload.request.KoiFishUpdateRequest;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.koifish.IKoiFishService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+import java.util.List;
+
+import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
+import static org.springframework.http.HttpStatus.NOT_FOUND;
+
+@RequiredArgsConstructor
+@RestController
+@RequestMapping("/koifishs")
+public class KoiFishController {
+    private final IKoiFishService koiFishService;
+    @PostMapping("/create")
+    public ResponseEntity<ApiResponse> createKoiFish(@ModelAttribute AddKoiFishRequest addKoiFishRequest){
+        try{
+            KoiFishDto koiFishDto = koiFishService.addKoiFish(addKoiFishRequest);
+            return ResponseEntity.ok(new ApiResponse("Add Koi success!",koiFishDto));
+        }catch(Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+    @GetMapping("/koipond/{id}/allKoi")
+    public ResponseEntity<ApiResponse> getAllKoiFishByKoiPondId(@PathVariable Long id){
+        try{
+            List<KoiFishDto> koiFishDtos = koiFishService.getKoiFishByKoiPond(id);
+            return ResponseEntity.ok(new ApiResponse("Found!",koiFishDtos));
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse("Error",INTERNAL_SERVER_ERROR));
+        }
+    }
+
+    @GetMapping("/koifish/{id}")
+    public ResponseEntity<ApiResponse> getKoiFishById(@PathVariable Long id){
+        try{
+            KoiFishDto koiFishDto = koiFishService.getKoiFishById(id);
+            return ResponseEntity.ok(new ApiResponse("Found!",koiFishDto));
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse("Error",INTERNAL_SERVER_ERROR));
+        }
+    }
+    @GetMapping("/user/{id}/allKoi")
+    public ResponseEntity<ApiResponse> getAllKoiFishByUserId(@PathVariable Long id){
+        try{
+            List<KoiFishDto> koiFishDtos = koiFishService.getAllFishByUserId(id);
+            return ResponseEntity.ok(new ApiResponse("Found!",koiFishDtos));
+        }catch(Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse("Error",INTERNAL_SERVER_ERROR));
+
+        }
+    }
+    @DeleteMapping("/koifish/{id}/delete")
+    public ResponseEntity<ApiResponse> deleteKoiFish(@PathVariable Long id){
+        try{
+            koiFishService.deleteKoiFish(id);
+            return ResponseEntity.ok(new ApiResponse("Delete success!",null));
+        }catch (ResourceNotFoundException e){
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(),null));
+        }
+    }
+    @PutMapping("/koifish/{id}/update")
+    public ResponseEntity<ApiResponse> updateKoiFish(@PathVariable Long id,@ModelAttribute KoiFishUpdateRequest koiFishUpdateRequest){
+        try{
+            KoiFishDto koiFishDto = koiFishService.updateKoiFish(koiFishUpdateRequest,id);
+            return ResponseEntity.ok(new ApiResponse("Update success!",koiFishDto));
+        }catch(Exception e){
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(),null));
+        }
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/CartController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/CartController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/CartController.java
new file mode 100644
--- /dev/null	(date 1730910225973)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/CartController.java	(date 1730910225973)
@@ -0,0 +1,61 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.dto.CartDto;
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.models.Cart;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.cart.ICartService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.math.BigDecimal;
+
+import static org.springframework.http.HttpStatus.NOT_FOUND;
+
+@RequiredArgsConstructor
+@RestController
+@RequestMapping("/carts")
+public class CartController {
+    private final ICartService cartService;
+
+    @GetMapping("/cart/{cartId}/my-cart")
+    public ResponseEntity<ApiResponse> getCart( @PathVariable Long cartId) {
+        try {
+            CartDto cart = cartService.getCartDto(cartId);
+            return ResponseEntity.ok(new ApiResponse("Success", cart));
+        } catch (ResourceNotFoundException e) {
+          return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+
+    @DeleteMapping("/cart/{cartId}/clear")
+    public ResponseEntity<ApiResponse> clearCart( @PathVariable Long cartId) {
+        try {
+            cartService.clearCart(cartId);
+            return ResponseEntity.ok(new ApiResponse("Clear Cart Success!", null));
+        } catch (ResourceNotFoundException e) {
+          return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+
+    @GetMapping("/cart/{cartId}/total-price")
+    public ResponseEntity<ApiResponse> getTotalAmount( @PathVariable Long cartId) {
+        try {
+            BigDecimal totalPrice = cartService.getTotalPrice(cartId);
+            return ResponseEntity.ok(new ApiResponse("Total Price", totalPrice));
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+    @GetMapping("/user/{userId}/cartId")
+    public ResponseEntity<ApiResponse> getCartIdByUserId(@PathVariable Long userId){
+        Long cartId;
+        if(cartService.getCartByUserId(userId)==null)
+            cartId=cartService.initializeNewCart(userId);
+        else
+            cartId=cartService.getCartByUserId(userId).getId();
+        return  ResponseEntity.ok(new ApiResponse("CartId found!", cartId));
+    }
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/BlogController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/BlogController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/BlogController.java
new file mode 100644
--- /dev/null	(date 1730910225972)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/BlogController.java	(date 1730910225972)
@@ -0,0 +1,113 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.dto.BlogDto;
+import com.swpproject.koi_care_system.payload.request.BlogCreateRequest;
+import com.swpproject.koi_care_system.payload.request.BlogUpdateRequest;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.Blog.IBlogService;
+import com.swpproject.koi_care_system.service.imageBlobStorage.ImageStorage;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
+
+@RestController
+@RequestMapping("/blog")
+@RequiredArgsConstructor
+public class BlogController {
+
+    private final IBlogService blogService;
+    private final ImageStorage imageStorage;
+
+    @PostMapping("/create")
+    public ResponseEntity<ApiResponse> createBlog(@ModelAttribute BlogCreateRequest blogCreateRequest, Authentication authentication){
+        try {
+            String username = authentication.getName();
+            return ResponseEntity.status(HttpStatus.CREATED).body(ApiResponse.builder()
+                    .data(blogService.createBlog(blogCreateRequest, username))
+                    .message("Blog has been created")
+                    .build());
+        }catch (Exception e){
+            return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+    @PutMapping("/update/{blogId}")
+    public ResponseEntity<ApiResponse> updateBlog(@PathVariable int blogId, @ModelAttribute BlogUpdateRequest blogUpdateRequest){
+        return ResponseEntity.ok(ApiResponse.builder()
+                .data(blogService.updateBlog(blogId, blogUpdateRequest))
+                .message("Blog has been updated")
+                .build());
+    }
+    @GetMapping("/getID/{blogId}")
+    public ResponseEntity<ApiResponse> getBlogById(@PathVariable int blogId) {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Blog found")
+                .data(blogService.getBlogById(blogId))
+                .build());
+    }
+
+    @GetMapping
+    public ResponseEntity<ApiResponse> getAllBlogs() {
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("List of blogs")
+                .data(blogService.getAllBlogs())
+                .build());
+    }
+
+    @DeleteMapping("/delete/{blogId}")
+    public ResponseEntity<ApiResponse> deleteBlog(@PathVariable int blogId) {
+        blogService.deleteBlog(blogId);
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("Blog has been deleted")
+                .build());
+    }
+
+    @GetMapping("/getByUser/{userId}")
+    public ResponseEntity<ApiResponse> getBlogsByUser(@PathVariable long userId) {
+        List<BlogDto> blogDtos = blogService.getBlogByUsername(userId);
+        if (blogDtos.isEmpty()) {
+            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(ApiResponse.builder()
+                    .message("No blogs found")
+                    .build());
+        }
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("List of blogs")
+                .data(blogDtos)
+                .build());
+    }
+
+    @GetMapping("/getByTag/{tagId}")
+    public ResponseEntity<ApiResponse> getBlogsByTag(@PathVariable int tagId) {
+        List<BlogDto> blogDtos = blogService.getBlogByTag(tagId);
+        if (blogDtos.isEmpty()) {
+            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(ApiResponse.builder()
+                    .message("No blogs found")
+                    .build());
+        }
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("List of blogs")
+                .data(blogDtos)
+                .build());
+    }
+
+    @GetMapping("/search/{keyword}")
+    public ResponseEntity<ApiResponse> searchBlogs(@PathVariable String keyword) {
+        List<BlogDto> blogDtos = blogService.searchBlogs(keyword);
+        if (blogDtos.isEmpty()) {
+            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(ApiResponse.builder()
+                    .message("No blogs found")
+                    .build());
+        }
+        return ResponseEntity.ok(ApiResponse.builder()
+                .message("List of blogs")
+                .data(blogDtos)
+                .build());
+    }
+
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/WaterParametersRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/WaterParametersRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/WaterParametersRepository.java
new file mode 100644
--- /dev/null	(date 1730910225996)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/WaterParametersRepository.java	(date 1730910225996)
@@ -0,0 +1,19 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.WaterParameters;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.stereotype.Repository;
+
+import java.time.LocalDate;
+import java.util.List;
+
+@Repository
+public interface WaterParametersRepository extends JpaRepository<WaterParameters, Long> {
+    
+    List<WaterParameters> findByKoiPondId(Long koiPondId);
+
+    @Query("SELECT w FROM WaterParameters w WHERE w.koiPond.id = :koiPondId ORDER BY w.createDateTime DESC LIMIT 1")
+    WaterParameters findTopByKoiPondId(Long koiPondId);
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ChatUserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ChatUserController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ChatUserController.java
new file mode 100644
--- /dev/null	(date 1730910225973)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ChatUserController.java	(date 1730910225973)
@@ -0,0 +1,40 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.models.ChatUser;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.chatservice.ChatUserService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.ResponseEntity;
+import org.springframework.messaging.handler.annotation.MessageMapping;
+import org.springframework.messaging.handler.annotation.Payload;
+import org.springframework.messaging.handler.annotation.SendTo;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RequiredArgsConstructor
+@RestController
+public class ChatUserController {
+    private final ChatUserService service;
+
+    @MessageMapping("/user.addUser")
+    @SendTo("/user/public")
+    public ChatUser addUser(
+            @Payload ChatUser user
+    ) {
+        service.saveUser(user);
+        return user;
+    }
+    @MessageMapping("/user.disconnectUser")
+    @SendTo("/user/public")
+    public ChatUser disconnect(
+            @Payload ChatUser user
+    ){
+        service.disconnect(user);
+        return user;
+    }
+
+    @GetMapping("/chatUserOnlines")
+    public ResponseEntity<ApiResponse> findConnectedUsers(){
+        return ResponseEntity.ok(ApiResponse.builder().message("Get list user online success").data(service.findConnectedUsers()).build());
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ChatController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ChatController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ChatController.java
new file mode 100644
--- /dev/null	(date 1730910225973)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/ChatController.java	(date 1730910225973)
@@ -0,0 +1,54 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.models.ChatMessage;
+import com.swpproject.koi_care_system.models.ChatNotification;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.chatservice.ChatMessageService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.ResponseEntity;
+import org.springframework.messaging.handler.annotation.MessageMapping;
+import org.springframework.messaging.handler.annotation.Payload;
+import org.springframework.messaging.simp.SimpMessagingTemplate;
+import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.*;
+
+@RequiredArgsConstructor
+@RestController
+public class ChatController {
+    private final SimpMessagingTemplate simpMessagingTemplate;
+    private final ChatMessageService chatMessageService;
+
+    @MessageMapping("/chat")
+    public void processMessage(@Payload ChatMessage chatMessage) {
+        ChatMessage savedMsg = chatMessageService.save(chatMessage);
+        simpMessagingTemplate.convertAndSendToUser(
+                chatMessage.getRecipientId(), "/queue/messages",
+                new ChatNotification(
+                        savedMsg.getId(),
+                        savedMsg.getSenderId(),
+                        savedMsg.getRecipientId(),
+                        savedMsg.getContent()
+                )
+        );
+    }
+    @GetMapping("/messages/{senderId}/{recipientId}")
+    public ResponseEntity<ApiResponse> findChatMessage(@PathVariable("senderId") String senderId,@PathVariable("recipientId") String recipientId ){
+        return ResponseEntity.ok(ApiResponse.builder().message("Find message success").data(chatMessageService.findChatMessage(senderId,recipientId)).build());
+    }
+    @GetMapping("/messages/{senderId}")
+    public ResponseEntity<ApiResponse> findChatMessageWithShop(@PathVariable("senderId") String senderId){
+        return ResponseEntity.ok(ApiResponse.builder().message("Find message success").data(chatMessageService.findChatMessage(senderId)).build());
+    }
+
+    @GetMapping("/messages/{userId}/{shopId}/update")
+    public ResponseEntity<ApiResponse> updateUserInChat(@PathVariable("userId") String userId,@PathVariable("shopId") String shopId ){
+        chatMessageService.updateRecipientInchat(userId,shopId);
+        return ResponseEntity.ok(ApiResponse.builder().message("Update success").build());
+    }
+    @GetMapping("/messages/{userId}/defaultRoom")
+    public ResponseEntity<ApiResponse> backToDefault(@PathVariable("userId") String userId){
+        chatMessageService.backRecipientInChat(userId);
+        return ResponseEntity.ok(ApiResponse.builder().message("Update success").build());
+    }
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/CategoryController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/CategoryController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/CategoryController.java
new file mode 100644
--- /dev/null	(date 1730910225973)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/CategoryController.java	(date 1730910225973)
@@ -0,0 +1,84 @@
+package com.swpproject.koi_care_system.controllers;
+
+
+import com.swpproject.koi_care_system.exceptions.AlreadyExistsException;
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.models.Category;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.category.ICategoryService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+import static org.springframework.http.HttpStatus.*;
+
+@RequiredArgsConstructor
+@RestController
+@RequestMapping("/categories")
+public class CategoryController {
+    private final ICategoryService categoryService;
+
+    @GetMapping("/all")
+    public ResponseEntity<ApiResponse> getAllCategories() {
+        try {
+            List<Category> categories = categoryService.getAllCategories();
+            return  ResponseEntity.ok(new ApiResponse("Found!", categories));
+        } catch (Exception e) {
+           return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new ApiResponse("Error:", INTERNAL_SERVER_ERROR));
+        }
+    }
+
+    @PostMapping("/add")
+    public ResponseEntity<ApiResponse> addCategory(@RequestBody Category name) {
+        try {
+            Category theCategory = categoryService.addCategory(name);
+            return  ResponseEntity.ok(new ApiResponse("Success", theCategory));
+        } catch (AlreadyExistsException e) {
+           return ResponseEntity.status(CONFLICT).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+
+    @GetMapping("/category/{id}/category")
+    public ResponseEntity<ApiResponse> getCategoryById(@PathVariable Long id){
+        try {
+            Category theCategory = categoryService.getCategoryById(id);
+            return  ResponseEntity.ok(new ApiResponse("Found", theCategory));
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+
+    @GetMapping("/category/{name}/category/by_name")
+    public ResponseEntity<ApiResponse> getCategoryByName(@PathVariable String name){
+        try {
+            Category theCategory = categoryService.getCategoryByName(name);
+            return  ResponseEntity.ok(new ApiResponse("Found", theCategory));
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+
+
+    @DeleteMapping("/category/{id}/delete")
+    public ResponseEntity<ApiResponse> deleteCategory(@PathVariable Long id){
+        try {
+            categoryService.deleteCategoryById(id);
+            return  ResponseEntity.ok(new ApiResponse("Found", null));
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+
+    @PutMapping("/category/{id}/update")
+    public ResponseEntity<ApiResponse> updateCategory(@PathVariable Long id, @RequestBody Category category) {
+        try {
+            Category updatedCategory = categoryService.updateCategory(category, id);
+            return ResponseEntity.ok(new ApiResponse("Update success!", updatedCategory));
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/CartItemController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/CartItemController.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/CartItemController.java
new file mode 100644
--- /dev/null	(date 1730910225973)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/controllers/CartItemController.java	(date 1730910225973)
@@ -0,0 +1,53 @@
+package com.swpproject.koi_care_system.controllers;
+
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.payload.request.AddItemToCartRequest;
+import com.swpproject.koi_care_system.payload.request.UpdateItemRequest;
+import com.swpproject.koi_care_system.payload.response.ApiResponse;
+import com.swpproject.koi_care_system.service.cart.ICartItemService;
+import com.swpproject.koi_care_system.service.cart.ICartService;
+import jakarta.validation.Valid;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import static org.springframework.http.HttpStatus.NOT_FOUND;
+
+@RequiredArgsConstructor
+@RestController
+@RequestMapping("/cartItems")
+public class CartItemController {
+    private final ICartItemService cartItemService;
+
+    @PostMapping("/item/add")
+    public ResponseEntity<ApiResponse> addItemToCart(@RequestBody @Valid AddItemToCartRequest request) {
+        try {
+            cartItemService.addItemToCart(request.getCartId(), request.getProductId(), request.getQuantity());
+            return ResponseEntity.ok(new ApiResponse("Add Item Success", null));
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+    @DeleteMapping("/cart/{cartId}/product/{productId}/remove")
+    public ResponseEntity<ApiResponse> removeItemFromCart(@PathVariable Long cartId, @PathVariable Long productId) {
+        try {
+            cartItemService.removeItemFromCart(cartId, productId);
+            return ResponseEntity.ok(new ApiResponse("Remove Item Success", null));
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+    }
+
+    @PutMapping("/cart/{cartId}/product/{productId}/update")
+    public  ResponseEntity<ApiResponse> updateItemQuantity(@PathVariable Long cartId,
+                                                           @PathVariable Long productId,
+                                                           @RequestBody @Valid UpdateItemRequest request) {
+        try {
+            cartItemService.updateItemQuantity(cartId, productId, request.getQuantity());
+            return ResponseEntity.ok(new ApiResponse("Update Item Success", null));
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(NOT_FOUND).body(new ApiResponse(e.getMessage(), null));
+        }
+
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/SubscribePlanRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/SubscribePlanRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/SubscribePlanRepository.java
new file mode 100644
--- /dev/null	(date 1730910225995)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/SubscribePlanRepository.java	(date 1730910225995)
@@ -0,0 +1,10 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.SubscribePlan;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface SubscribePlanRepository extends JpaRepository<SubscribePlan,Long> {
+    SubscribePlan findSubscribePlanByUserProfileId(Long userProfileId);
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ReminderRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ReminderRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ReminderRepository.java
new file mode 100644
--- /dev/null	(date 1730910225995)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ReminderRepository.java	(date 1730910225995)
@@ -0,0 +1,18 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.Reminder;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+
+import java.time.LocalDateTime;
+import java.util.List;
+
+@Repository
+public interface ReminderRepository extends JpaRepository<Reminder, Long> {
+    @Query("SELECT r FROM Reminder r WHERE HOUR(r.dateTime) = HOUR(:currentTime) AND MINUTE(r.dateTime) = MINUTE(:currentTime)")
+    List<Reminder> findDueRemindersAtTime(@Param("currentTime") LocalDateTime currentTime);
+
+    List<Reminder> findByUserId(Long userid);
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ReminderMongoRepo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ReminderMongoRepo.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ReminderMongoRepo.java
new file mode 100644
--- /dev/null	(date 1730910225995)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ReminderMongoRepo.java	(date 1730910225995)
@@ -0,0 +1,17 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.ReminderMongo;
+import org.springframework.data.mongodb.repository.MongoRepository;
+import org.springframework.data.mongodb.repository.Query;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+
+@Repository
+public interface ReminderMongoRepo extends MongoRepository<ReminderMongo, Long> {
+    @Query("{ 'dateTime': { $regex: '^?0' } }")
+    List<ReminderMongo> findDueRemindersBetween(String startTime);
+
+    List<ReminderMongo> findByDateTimeBetween(String startTime, String endTime);
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/RemarkRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/RemarkRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/RemarkRepository.java
new file mode 100644
--- /dev/null	(date 1730910225995)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/RemarkRepository.java	(date 1730910225995)
@@ -0,0 +1,14 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.Remark;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+
+@Repository
+public interface RemarkRepository extends JpaRepository<Remark, Long> {
+    @Query("SELECT r FROM Remark r WHERE r.koiFish.id = :koiFishId ORDER BY r.createDate DESC")
+    List<Remark> findAllByKoiFishId(Long koiFishId);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/UserProfileRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/UserProfileRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/UserProfileRepository.java
new file mode 100644
--- /dev/null	(date 1730910225996)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/UserProfileRepository.java	(date 1730910225996)
@@ -0,0 +1,17 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.enums.Role;
+import com.swpproject.koi_care_system.models.UserProfile;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+import java.util.Optional;
+
+@Repository
+public interface UserProfileRepository extends JpaRepository<UserProfile, Long> {
+    Optional<UserProfile> findByUserId(Long userId);
+    UserProfile findUserProfileByUserId(Long userId);
+
+    List<UserProfile> findUserProfileByRole(String role);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/TagRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/TagRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/TagRepository.java
new file mode 100644
--- /dev/null	(date 1730910225996)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/TagRepository.java	(date 1730910225996)
@@ -0,0 +1,13 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.Tag;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface TagRepository extends JpaRepository<Tag, Integer> {
+    boolean existsByTagName(String tagName);
+
+    boolean existsByTagDescription(String tagDescription);
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/SupplierRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/SupplierRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/SupplierRepository.java
new file mode 100644
--- /dev/null	(date 1730910225995)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/SupplierRepository.java	(date 1730910225995)
@@ -0,0 +1,9 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.Supplier;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface SupplierRepository extends JpaRepository<Supplier,Long> {
+    Supplier findByName(String name);
+    boolean existsByName(String name);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/OriginStateOfFishRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/OriginStateOfFishRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/OriginStateOfFishRepository.java
new file mode 100644
--- /dev/null	(date 1730910225994)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/OriginStateOfFishRepository.java	(date 1730910225994)
@@ -0,0 +1,8 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.OriginStateOfFish;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface OriginStateOfFishRepository extends JpaRepository<OriginStateOfFish,Long> {
+    OriginStateOfFish findOriginStateOfFishByKoiFishId(Long koiFishId);
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/OrderRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/OrderRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/OrderRepository.java
new file mode 100644
--- /dev/null	(date 1730910225994)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/OrderRepository.java	(date 1730910225994)
@@ -0,0 +1,11 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.Order;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.List;
+
+public interface OrderRepository extends JpaRepository<Order, Long> {
+  List<Order> findByUserId(Long userId);
+  Order findByOrderId(Long orderId);
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/NotificaitonRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/NotificaitonRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/NotificaitonRepository.java
new file mode 100644
--- /dev/null	(date 1730910225994)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/NotificaitonRepository.java	(date 1730910225994)
@@ -0,0 +1,14 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.Notification;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+
+@Repository
+public interface NotificaitonRepository extends JpaRepository<Notification, Long> {
+    List<Notification> findAllByUserId(long userId);
+
+    List<Notification> findByUserIdAndDeliveredFalse(Long userId);
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/LogRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/LogRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/LogRepository.java
new file mode 100644
--- /dev/null	(date 1730910225994)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/LogRepository.java	(date 1730910225994)
@@ -0,0 +1,15 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.enums.LogCategory;
+import com.swpproject.koi_care_system.models.Log;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+
+@Repository
+public interface LogRepository extends JpaRepository<Log, Integer> {
+    List<Log> findAllByKoiPondId(long pondId);
+
+    List<Log> findAllByCategory(LogCategory category);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/PromotionRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/PromotionRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/PromotionRepository.java
new file mode 100644
--- /dev/null	(date 1730910225995)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/PromotionRepository.java	(date 1730910225995)
@@ -0,0 +1,19 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.enums.PromotionStatus;
+import com.swpproject.koi_care_system.models.Promotion;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.time.LocalDate;
+import java.util.List;
+
+public interface PromotionRepository extends JpaRepository<Promotion, Long> {
+
+    boolean existsByName(String promotionName);
+
+    List<Promotion> findPromotionByStatus(PromotionStatus status);
+
+    Promotion findPromotionById(Long promotionId);
+
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ProductRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ProductRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ProductRepository.java
new file mode 100644
--- /dev/null	(date 1730910225995)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ProductRepository.java	(date 1730910225995)
@@ -0,0 +1,25 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.IssueType;
+import com.swpproject.koi_care_system.models.Product;
+import com.swpproject.koi_care_system.models.Promotion;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface ProductRepository extends JpaRepository<Product, Long> {
+    List<Product> findByCategoryName(String category);
+
+    List<Product> findByBrand(String brand);
+
+    List<Product> findByCategoryNameAndBrand(String category, String brand);
+
+    List<Product> findBySupplierName(String supplierName);
+    List<Product> findByName(String name);
+
+    List<Product> findByBrandAndName(String brand, String name);
+
+    Long countByBrandAndName(String brand, String name);
+    List<Product> findByIssues(IssueType issueType);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/PaymentRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/PaymentRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/PaymentRepository.java
new file mode 100644
--- /dev/null	(date 1730910225994)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/PaymentRepository.java	(date 1730910225994)
@@ -0,0 +1,13 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.Payment;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+
+@Repository
+public interface PaymentRepository extends JpaRepository<Payment,Long> {
+    List<Payment> findPaymentsByOrder_OrderId(Long orderId);
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/OtpRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/OtpRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/OtpRepository.java
new file mode 100644
--- /dev/null	(date 1730910225994)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/OtpRepository.java	(date 1730910225994)
@@ -0,0 +1,14 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.Otp;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.Optional;
+
+@Repository
+public interface OtpRepository extends JpaRepository<Otp, Long> {
+    Optional<Otp> findByEmail(String email);
+
+    Optional<Otp> findByEmailAndOtp(String email, String otp);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ImageRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ImageRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ImageRepository.java
new file mode 100644
--- /dev/null	(date 1730910225994)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ImageRepository.java	(date 1730910225994)
@@ -0,0 +1,9 @@
+package com.swpproject.koi_care_system.repository;
+import com.swpproject.koi_care_system.models.Image;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.List;
+
+public interface ImageRepository extends JpaRepository<Image, Long> {
+    List<Image> findByProductId(Long id);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/GrowthHistoryRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/GrowthHistoryRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/GrowthHistoryRepository.java
new file mode 100644
--- /dev/null	(date 1730910225993)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/GrowthHistoryRepository.java	(date 1730910225993)
@@ -0,0 +1,18 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.GrowthHistory;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+
+@Repository
+public interface GrowthHistoryRepository extends JpaRepository<GrowthHistory, Long> {
+    @Query("SELECT g.id FROM GrowthHistory g WHERE g.koiFish.id = :koiFishId ORDER BY g.createDate DESC, g.id DESC LIMIT 1")
+        //:koiFishId is a placeholder
+    Long findLatestByKoiFishId(Long koiFishId);
+
+    @Query("SELECT g FROM GrowthHistory g WHERE g.koiFish.id = :koiFishId ORDER BY g.createDate DESC, g.id DESC")
+    List<GrowthHistory> findAllByKoiFishId(Long koiFishId);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/FeedbackRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/FeedbackRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/FeedbackRepository.java
new file mode 100644
--- /dev/null	(date 1730910225993)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/FeedbackRepository.java	(date 1730910225993)
@@ -0,0 +1,12 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.Feedback;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.List;
+
+public interface FeedbackRepository extends JpaRepository<Feedback, Long> {
+    List<Feedback> findFeedbackByProductId(Long productId);
+
+    List<Feedback> findFeedbackByUserId(Long userId);
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ChatUserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ChatUserRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ChatUserRepository.java
new file mode 100644
--- /dev/null	(date 1730910225993)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ChatUserRepository.java	(date 1730910225993)
@@ -0,0 +1,12 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.ChatUser;
+import com.swpproject.koi_care_system.enums.ChatUserStatus;
+import org.springframework.data.mongodb.repository.MongoRepository;
+
+import java.util.List;
+
+public interface ChatUserRepository extends MongoRepository<ChatUser,String> {
+    ChatUser findByNickname(String nickName);
+    List<ChatUser> findAllByStatus(ChatUserStatus status);
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/KoiPondRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/KoiPondRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/KoiPondRepository.java
new file mode 100644
--- /dev/null	(date 1730910225994)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/KoiPondRepository.java	(date 1730910225994)
@@ -0,0 +1,18 @@
+package com.swpproject.koi_care_system.repository;
+
+
+import com.swpproject.koi_care_system.dto.KoiPondDto;
+import com.swpproject.koi_care_system.models.KoiPond;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.Optional;
+import java.util.List;
+
+public interface KoiPondRepository extends JpaRepository<KoiPond,Long> {
+    KoiPond findKoiPondsById(Long id);
+
+    List<KoiPond> findByUserId(Long userId);
+
+    List<KoiPond> findKoiPondsByUserId(Long userId);
+    boolean existsByNameAndUserId(String name, Long id);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/KoiFishRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/KoiFishRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/KoiFishRepository.java
new file mode 100644
--- /dev/null	(date 1730910225994)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/KoiFishRepository.java	(date 1730910225994)
@@ -0,0 +1,14 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.KoiFish;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.List;
+
+public interface KoiFishRepository extends JpaRepository<KoiFish,Long> {
+
+    KoiFish findKoiFishById(Long id);
+    List<KoiFish> findByKoiPondId(Long koiPondId);
+    KoiFish findKoiFishByName(String name);
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/IssueTypeRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/IssueTypeRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/IssueTypeRepository.java
new file mode 100644
--- /dev/null	(date 1730910225994)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/IssueTypeRepository.java	(date 1730910225994)
@@ -0,0 +1,17 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.enums.RangeParameter;
+import com.swpproject.koi_care_system.models.IssueType;
+import org.jetbrains.annotations.NotNull;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+
+@Repository
+public interface IssueTypeRepository extends JpaRepository<IssueType, Long> {
+    IssueType findByParameterTypeAndConditionType(RangeParameter parameter, String high);
+
+    @NotNull List<IssueType> findAll();
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/IssueRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/IssueRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/IssueRepository.java
new file mode 100644
--- /dev/null	(date 1730910225994)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/IssueRepository.java	(date 1730910225994)
@@ -0,0 +1,19 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.Issue;
+import com.swpproject.koi_care_system.models.WaterParameters;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+
+@Repository
+public interface IssueRepository extends JpaRepository<Issue, Long> {
+    Issue findByWaterParametersAndName(WaterParameters waterParameters, String name);
+
+    boolean existsByWaterParametersAndDescription(WaterParameters waterParameters, String description);
+
+    List<Issue> findByWaterParametersId(Long waterParametersId);
+
+    List<Issue> findByWaterParametersKoiPondId(Long id);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/CartItemRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/CartItemRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/CartItemRepository.java
new file mode 100644
--- /dev/null	(date 1730910225993)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/CartItemRepository.java	(date 1730910225993)
@@ -0,0 +1,7 @@
+package com.swpproject.koi_care_system.repository;
+import com.swpproject.koi_care_system.models.CartItem;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface CartItemRepository extends JpaRepository<CartItem, Long> {
+    void deleteAllByCartId(Long id);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/BlogRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/BlogRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/BlogRepository.java
new file mode 100644
--- /dev/null	(date 1730910225992)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/BlogRepository.java	(date 1730910225992)
@@ -0,0 +1,21 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.Blog;
+import com.swpproject.koi_care_system.models.Tag;
+import com.swpproject.koi_care_system.models.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+
+@Repository
+public interface BlogRepository extends JpaRepository<Blog, Integer> {
+
+    boolean existsByBlogTitle(String blogTitle);
+
+    List<Blog> findByTags(Tag tag);
+
+    List<Blog> findByUser(User user);
+
+    List<Blog> findByBlogTitleContaining(String keyword);
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/exceptions/ResourceNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/exceptions/ResourceNotFoundException.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/exceptions/ResourceNotFoundException.java
new file mode 100644
--- /dev/null	(date 1730910225981)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/exceptions/ResourceNotFoundException.java	(date 1730910225981)
@@ -0,0 +1,8 @@
+package com.swpproject.koi_care_system.exceptions;
+
+public class ResourceNotFoundException extends RuntimeException {
+    public ResourceNotFoundException(String message) {
+        super(message);
+
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/exceptions/ProductNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/exceptions/ProductNotFoundException.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/exceptions/ProductNotFoundException.java
new file mode 100644
--- /dev/null	(date 1730910225981)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/exceptions/ProductNotFoundException.java	(date 1730910225981)
@@ -0,0 +1,7 @@
+package com.swpproject.koi_care_system.exceptions;
+
+public class ProductNotFoundException extends RuntimeException {
+    public ProductNotFoundException(String message) {
+        super(message);
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ChatRoomRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ChatRoomRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ChatRoomRepository.java
new file mode 100644
--- /dev/null	(date 1730910225993)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ChatRoomRepository.java	(date 1730910225993)
@@ -0,0 +1,12 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.ChatRoom;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.mongodb.repository.MongoRepository;
+
+import java.util.Optional;
+
+public interface ChatRoomRepository extends MongoRepository<ChatRoom,String> {
+    Optional<ChatRoom> findBySenderIdAndRecipientId(String senderId, String recipientId);
+    Optional<ChatRoom> findBySenderId(String senderID);
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ChatMessageRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ChatMessageRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ChatMessageRepository.java
new file mode 100644
--- /dev/null	(date 1730910225993)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/ChatMessageRepository.java	(date 1730910225993)
@@ -0,0 +1,12 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.ChatMessage;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.mongodb.repository.MongoRepository;
+
+import java.util.List;
+
+public interface ChatMessageRepository extends MongoRepository<ChatMessage,String> {
+    List<ChatMessage> findByChatId(String chatId);
+    List<ChatMessage> findChatMessageBySenderId(String senderId);
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/CategoryRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/CategoryRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/CategoryRepository.java
new file mode 100644
--- /dev/null	(date 1730910225993)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/CategoryRepository.java	(date 1730910225993)
@@ -0,0 +1,10 @@
+package com.swpproject.koi_care_system.repository;
+
+import com.swpproject.koi_care_system.models.Category;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface CategoryRepository extends JpaRepository<Category, Long> {
+  Category findByName(String name);
+
+  boolean existsByName(String name);
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/CartRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/CartRepository.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/CartRepository.java
new file mode 100644
--- /dev/null	(date 1730910225993)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/repository/CartRepository.java	(date 1730910225993)
@@ -0,0 +1,7 @@
+package com.swpproject.koi_care_system.repository;
+import com.swpproject.koi_care_system.models.Cart;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface CartRepository extends JpaRepository<Cart, Long> {
+    Cart findByUserId(Long userId);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/exceptions/CustomBlobStorageException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/exceptions/CustomBlobStorageException.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/exceptions/CustomBlobStorageException.java
new file mode 100644
--- /dev/null	(date 1730910225980)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/exceptions/CustomBlobStorageException.java	(date 1730910225980)
@@ -0,0 +1,10 @@
+package com.swpproject.koi_care_system.exceptions;
+
+
+public class CustomBlobStorageException extends RuntimeException {
+
+    public CustomBlobStorageException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/exceptions/AlreadyExistsException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/exceptions/AlreadyExistsException.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/exceptions/AlreadyExistsException.java
new file mode 100644
--- /dev/null	(date 1730910225980)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/exceptions/AlreadyExistsException.java	(date 1730910225980)
@@ -0,0 +1,7 @@
+package com.swpproject.koi_care_system.exceptions;
+
+public class AlreadyExistsException extends RuntimeException {
+    public AlreadyExistsException(String message) {
+        super(message);
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/WaterParameters.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/WaterParameters.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/WaterParameters.java
new file mode 100644
--- /dev/null	(date 1730910225988)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/WaterParameters.java	(date 1730910225988)
@@ -0,0 +1,45 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.*;
+import lombok.*;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDateTime;
+import java.util.List;
+
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class WaterParameters {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    Long id;
+
+    LocalDateTime createDateTime;
+    double nitrite;// NO2
+    double nitrate;  // NO3
+    double phosphate; // PO4
+    double ammonium;  // NH4
+    double hardness;  // GH
+    double oxygen;    // O2
+    double temperature;// temp in Pond
+    double phValue;
+    double carbonHardness;  // KH
+    double carbonDioxide;  // CO2
+    double salt;
+    double totalChlorine;
+    double temp; //temp outdoor
+    double amountFed;
+    String note;
+    @ManyToOne
+    @JoinColumn(name = "koiPond_id")
+    KoiPond koiPond;
+
+    @OneToMany(mappedBy = "waterParameters", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
+    List<Issue> issueList;
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/UserProfile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/UserProfile.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/UserProfile.java
new file mode 100644
--- /dev/null	(date 1730910225988)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/UserProfile.java	(date 1730910225988)
@@ -0,0 +1,39 @@
+package com.swpproject.koi_care_system.models;
+
+import com.swpproject.koi_care_system.enums.ProfileStatus;
+import jakarta.persistence.*;
+import lombok.*;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDate;
+
+@Entity
+@Getter
+@Setter
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class UserProfile {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    long id;
+    String name;
+    String email;
+    String phone;
+    String address;
+    String gender;
+    String avatar;
+    String bio;
+    LocalDate dateOfBirth;
+    LocalDate createdDate;
+
+    @OneToOne(mappedBy = "userProfile", cascade = CascadeType.ALL, orphanRemoval = true)
+    SubscribePlan subscribePlan;
+
+    String role;
+
+    @OneToOne
+    @JoinColumn(name = "user_id")
+    User user;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/User.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/User.java
new file mode 100644
--- /dev/null	(date 1730910225988)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/User.java	(date 1730910225988)
@@ -0,0 +1,64 @@
+package com.swpproject.koi_care_system.models;
+
+import com.swpproject.koi_care_system.enums.Role;
+import jakarta.persistence.*;
+import lombok.*;
+import lombok.experimental.FieldDefaults;
+
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+@Data
+@Entity
+@AllArgsConstructor
+@NoArgsConstructor
+@Builder
+@FieldDefaults(level = AccessLevel.PRIVATE)
+@Table(name = "users")
+public class User {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    Long id;
+
+    @Column(nullable = false)
+    String username;
+
+    @Column(nullable = false)
+    String password;
+
+    @Column(nullable = false)
+    String email;
+
+    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
+    List<KoiPond> koiPondList = new ArrayList<>();
+
+    @Column(nullable = false)
+    @Enumerated(EnumType.STRING)
+    Role role;
+
+    @Column(nullable = false)
+    String provider;
+
+    boolean status;
+
+    @OneToOne(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
+    private Cart cart;
+
+    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
+    Set<Blog> blogs = new HashSet<>();
+
+    @OneToOne(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
+    UserProfile userProfile;
+
+    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
+    private List<Order> orders = new ArrayList<>();
+
+    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
+    List<Reminder> reminders = new ArrayList<>();
+
+    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
+    List<Notification> notifications = new ArrayList<>();
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Tag.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Tag.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Tag.java
new file mode 100644
--- /dev/null	(date 1730910225987)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Tag.java	(date 1730910225987)
@@ -0,0 +1,30 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.*;
+import lombok.*;
+import lombok.experimental.FieldDefaults;
+
+import java.util.HashSet;
+import java.util.Set;
+
+@Entity
+@Getter
+@Setter
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class Tag {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    int tagId;
+
+    @Column(name = "tag_name", nullable = false)
+    String tagName;
+
+    @Column(name = "tag_description", nullable = false)
+    String tagDescription;
+
+    @ManyToMany(mappedBy = "tags", fetch = FetchType.LAZY)
+    Set<Blog> blogs = new HashSet<>();
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ReminderMongo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ReminderMongo.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ReminderMongo.java
new file mode 100644
--- /dev/null	(date 1730910225987)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ReminderMongo.java	(date 1730910225987)
@@ -0,0 +1,26 @@
+package com.swpproject.koi_care_system.models;
+
+import com.swpproject.koi_care_system.enums.ReminderRepeat;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.data.annotation.Id;
+import org.springframework.data.mongodb.core.mapping.Document;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+@Document(collection = "reminders")
+public class ReminderMongo {
+
+    @Id
+    Long id;//String will auto-gene
+    String title;
+    String dateTime;
+    String description;
+    ReminderRepeat repeatInterval;
+    String username;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Reminder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Reminder.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Reminder.java
new file mode 100644
--- /dev/null	(date 1730910225987)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Reminder.java	(date 1730910225987)
@@ -0,0 +1,30 @@
+package com.swpproject.koi_care_system.models;
+
+import com.swpproject.koi_care_system.enums.ReminderRepeat;
+import jakarta.persistence.*;
+import lombok.*;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDateTime;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+@Entity
+public class Reminder {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    long id;
+    String title;
+    LocalDateTime dateTime;
+    String description;
+    @Enumerated(EnumType.STRING)
+    ReminderRepeat repeatInterval;
+    @ManyToOne
+    @JoinColumn(name = "user_id")
+    User user;
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Remark.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Remark.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Remark.java
new file mode 100644
--- /dev/null	(date 1730910225987)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Remark.java	(date 1730910225987)
@@ -0,0 +1,27 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.time.LocalDateTime;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity
+public class Remark {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    private LocalDateTime createDate;
+    private String title;
+    private String note;
+
+    @ManyToOne
+    @JoinColumn(name="koifish_id")
+    private KoiFish koiFish;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Promotion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Promotion.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Promotion.java
new file mode 100644
--- /dev/null	(date 1730910225986)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Promotion.java	(date 1730910225986)
@@ -0,0 +1,34 @@
+package com.swpproject.koi_care_system.models;
+
+import com.swpproject.koi_care_system.enums.PromotionStatus;
+import jakarta.persistence.*;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.util.HashSet;
+import java.util.Set;
+
+@Getter
+@Setter
+@NoArgsConstructor
+
+@Entity
+public class Promotion {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    private String name;
+    private Double discountRate;
+    private String description;
+    private LocalDateTime startDate;
+    private LocalDateTime endDate;
+    @Enumerated(EnumType.STRING)
+    private PromotionStatus status;
+
+    @ManyToMany(mappedBy = "promotions",cascade = CascadeType.ALL)
+    private Set<Product> products = new HashSet<Product>();
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Supplier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Supplier.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Supplier.java
new file mode 100644
--- /dev/null	(date 1730910225987)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Supplier.java	(date 1730910225987)
@@ -0,0 +1,36 @@
+package com.swpproject.koi_care_system.models;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import jakarta.persistence.*;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.util.List;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@Entity
+public class Supplier {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    private String name;
+
+    private String phone;
+
+    private String address;
+
+    @JsonIgnore
+    @OneToMany(mappedBy = "supplier", cascade = CascadeType.ALL, orphanRemoval = true)
+    private List<Product> productList;
+
+    public Supplier(Long id, String name, String phone, String address) {
+        this.id = id;
+        this.name = name;
+        this.phone = phone;
+        this.address = address;
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/SubscribePlan.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/SubscribePlan.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/SubscribePlan.java
new file mode 100644
--- /dev/null	(date 1730910225987)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/SubscribePlan.java	(date 1730910225987)
@@ -0,0 +1,30 @@
+package com.swpproject.koi_care_system.models;
+
+import com.swpproject.koi_care_system.enums.ProfileStatus;
+import jakarta.persistence.*;
+import lombok.*;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDate;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity
+@FieldDefaults(level = AccessLevel.PRIVATE)
+
+public class SubscribePlan {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    Long id;
+    LocalDate startDate;
+    LocalDate expiredDate;
+
+    @Enumerated(EnumType.STRING)
+    ProfileStatus subscribe;
+
+    @OneToOne
+    @JoinColumn(name="userProfile_id")
+    UserProfile userProfile;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Specification.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Specification.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Specification.java
new file mode 100644
--- /dev/null	(date 1730910225987)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Specification.java	(date 1730910225987)
@@ -0,0 +1,31 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity
+public class Specification {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    private String name;
+    private String abbreviation;
+    private String description;
+    private Double minValue;
+    private Double maxValue;
+
+    @ManyToOne
+    @JoinColumn(name="waterParameters_id")
+    private WaterParameters waterParameters;
+
+    @OneToOne
+    @JoinColumn(name="issue_id")
+    private Issue issue;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Role.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Role.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Role.java
new file mode 100644
--- /dev/null	(date 1730910225987)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Role.java	(date 1730910225987)
@@ -0,0 +1,20 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
+import jakarta.persistence.Id;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@Entity
+public class Role {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    private String name;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/OrderItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/OrderItem.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/OrderItem.java
new file mode 100644
--- /dev/null	(date 1730910225986)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/OrderItem.java	(date 1730910225986)
@@ -0,0 +1,39 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.*;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.math.BigDecimal;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@Entity
+public class OrderItem {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    private int quantity;
+    private BigDecimal price;
+    private String imageUrl;
+    private String category;
+    @ManyToOne
+    @JoinColumn(name = "order_id")
+    private Order order;
+
+    @ManyToOne
+    @JoinColumn(name = "product_id")
+    private Product product;
+
+    public OrderItem(Order order, Product product, int quantity, BigDecimal price, String imageUrl, String category) {
+        this.order = order;
+        this.product = product;
+        this.quantity = quantity;
+        this.price = price;
+        this.imageUrl = imageUrl;
+        this.category = category;
+
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Order.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Order.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Order.java
new file mode 100644
--- /dev/null	(date 1730910225986)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Order.java	(date 1730910225986)
@@ -0,0 +1,38 @@
+package com.swpproject.koi_care_system.models;
+
+import com.swpproject.koi_care_system.enums.OrderStatus;
+import jakarta.persistence.*;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.math.BigDecimal;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.util.HashSet;
+import java.util.Set;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@Entity
+@Table(name = "orders")
+public class Order {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long orderId;
+    private LocalDateTime orderDate;
+    private BigDecimal totalAmount;
+    private String address;
+    private String phone;
+    private String recipientName;
+    private String note;
+    @Enumerated(EnumType.STRING)
+    private OrderStatus orderStatus;
+    @OneToMany(mappedBy = "order", cascade = CascadeType.ALL, orphanRemoval = true)
+    private Set<OrderItem> orderItems = new HashSet<>();
+
+    @ManyToOne
+    @JoinColumn(name = "user_id")
+    private User user;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Notification.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Notification.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Notification.java
new file mode 100644
--- /dev/null	(date 1730910225986)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Notification.java	(date 1730910225986)
@@ -0,0 +1,27 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.*;
+import lombok.*;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDateTime;
+
+@Entity
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+@Getter
+@Setter
+public class Notification {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    Long id;
+    String title;
+    String message;
+    boolean delivered;
+    LocalDateTime dateTime;
+    @ManyToOne
+    @JoinColumn(name = "user_id")
+    User user;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Log.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Log.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Log.java
new file mode 100644
--- /dev/null	(date 1730910225986)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Log.java	(date 1730910225986)
@@ -0,0 +1,35 @@
+package com.swpproject.koi_care_system.models;
+
+import com.swpproject.koi_care_system.enums.LogCategory;
+import jakarta.persistence.*;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDateTime;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@Entity
+@Table(name = "logs")
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class Log {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    int logId;
+    @Column(name = "log_title", nullable = false)
+    String logTitle;
+    @Column(name = "date_time", nullable = false)
+    LocalDateTime logDate;
+    @Enumerated(EnumType.STRING)
+    LogCategory category;
+    String note;
+    @ManyToOne
+    @JoinColumn(name="koiPond_id")
+    KoiPond koiPond;
+
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Product.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Product.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Product.java
new file mode 100644
--- /dev/null	(date 1730910225986)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Product.java	(date 1730910225986)
@@ -0,0 +1,91 @@
+package com.swpproject.koi_care_system.models;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import jakarta.persistence.*;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.math.BigDecimal;
+
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@Entity
+public class Product {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    private String name;
+    private String brand;
+    private BigDecimal price;
+    private int inventory;
+    private Boolean status;
+    @Lob
+    @Column(name = "description", nullable = false, columnDefinition = "TEXT")
+    private String description;
+
+    @Lob
+    @Column(name = "description_detail", nullable = false, columnDefinition = "TEXT")
+    private String description_detail;
+
+    @ManyToOne
+    @JoinColumn(name = "category_id")
+    private Category category;
+
+    @OneToMany(mappedBy = "product", cascade = CascadeType.ALL, orphanRemoval = true)
+    private List<Image> images;
+
+    @Column(name = "rating")
+    private Double rating;
+
+    @OneToMany(mappedBy = "product", cascade = CascadeType.ALL, orphanRemoval = true)
+    private List<Feedback> feedbacks;
+
+    private Double calculateAverageRating() {
+        if (feedbacks == null || feedbacks.isEmpty()) {
+            return 0.0;
+        }
+        double sum = feedbacks.stream().mapToInt(Feedback::getStar).sum();
+        return sum / feedbacks.size();
+    }
+    @PrePersist
+    @PreUpdate
+    public void updateRating() {
+        this.rating = this.calculateAverageRating();
+    }
+    @JsonIgnore
+    @ManyToMany
+    @JoinTable(
+            name = "issue_type_product",
+            joinColumns = @JoinColumn(name = "product_id"),
+            inverseJoinColumns = @JoinColumn(name = "issue_type_id")
+    )
+    private Set<IssueType> issues = new HashSet<>();
+
+    @ManyToMany
+    @JoinTable(
+            name = "product_promotion",
+            joinColumns = @JoinColumn(name = "product_id"),
+            inverseJoinColumns = @JoinColumn(name = "promotion_id")
+    )
+    private Set<Promotion> promotions = new HashSet<>();
+
+    @ManyToOne
+    @JoinColumn(name="supplier_id")
+    private Supplier supplier;
+    public Product(String name, String brand, BigDecimal price, int inventory, String description,String description_detail, Category category, Supplier supplier) {
+        this.name = name;
+        this.brand = brand;
+        this.price = price;
+        this.inventory = inventory;
+        this.description = description;
+        this.description_detail=description_detail;
+        this.category = category;
+        this.supplier = supplier;
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Payment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Payment.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Payment.java
new file mode 100644
--- /dev/null	(date 1730910225986)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Payment.java	(date 1730910225986)
@@ -0,0 +1,29 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.*;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.sql.Date;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@Entity
+public class Payment {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    private LocalDateTime createDate;
+    private Double amount;
+    private String status;
+    private String invoiceCode;
+    private String transactionCode;
+    @OneToOne
+    @JoinColumn(name="order_id")
+    private Order order;
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Otp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Otp.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Otp.java
new file mode 100644
--- /dev/null	(date 1730910225986)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Otp.java	(date 1730910225986)
@@ -0,0 +1,28 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
+import jakarta.persistence.Id;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDateTime;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@Entity
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class Otp {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    Long id;
+    String email;
+    String otp;
+    LocalDateTime expiredAt;
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/OriginStateOfFish.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/OriginStateOfFish.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/OriginStateOfFish.java
new file mode 100644
--- /dev/null	(date 1730910225986)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/OriginStateOfFish.java	(date 1730910225986)
@@ -0,0 +1,29 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.*;
+import lombok.*;
+
+import java.time.LocalDate;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity
+@Builder
+public class OriginStateOfFish {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    private String name;
+    private String physique;
+    private LocalDate pondDate;
+    private int age;
+    private Double length;
+    private Double weight;
+    private String gender;
+    private String variety;
+    @OneToOne
+    @JoinColumn(name="koiFish_id")
+    private KoiFish koiFish;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Image.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Image.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Image.java
new file mode 100644
--- /dev/null	(date 1730910225984)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Image.java	(date 1730910225984)
@@ -0,0 +1,30 @@
+package com.swpproject.koi_care_system.models;
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.sql.Blob;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity
+public class Image {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    private String fileName;
+    private String fileType;
+
+    @Lob
+    private Blob image;
+    private String downloadUrl;
+
+    @ManyToOne
+    @JoinColumn(name = "product_id")
+    private Product product;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/GrowthHistory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/GrowthHistory.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/GrowthHistory.java
new file mode 100644
--- /dev/null	(date 1730910225984)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/GrowthHistory.java	(date 1730910225984)
@@ -0,0 +1,31 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity
+public class GrowthHistory {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    private LocalDateTime createDate;
+    private String physique;
+    private Double length;
+    private Double weight;
+    private String imageUrl;
+    @ManyToOne
+    @JoinColumn(name="koifish_id")
+    private KoiFish koiFish;
+
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Feedback.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Feedback.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Feedback.java
new file mode 100644
--- /dev/null	(date 1730910225984)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Feedback.java	(date 1730910225984)
@@ -0,0 +1,33 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.*;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@Entity
+public class Feedback {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @Column(nullable = false)
+    private int star;
+
+    @Lob
+    @Column(name = "comment", nullable = false, columnDefinition = "TEXT")
+    private String comment;
+
+    @ManyToOne
+    @JoinColumn(name = "user_id", nullable = false)
+    private User user;
+
+    @ManyToOne
+    @JoinColumn(name = "product_id", nullable = false)
+    private Product product;
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ChatUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ChatUser.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ChatUser.java
new file mode 100644
--- /dev/null	(date 1730910225984)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ChatUser.java	(date 1730910225984)
@@ -0,0 +1,20 @@
+package com.swpproject.koi_care_system.models;
+
+import com.swpproject.koi_care_system.enums.ChatUserStatus;
+import jakarta.persistence.*;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+import org.springframework.data.mongodb.core.mapping.Document;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@Document
+public class ChatUser {
+    @Id
+    private String id;
+    private String nickname;
+    @Enumerated(EnumType.STRING)
+    private ChatUserStatus status;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/KoiPond.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/KoiPond.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/KoiPond.java
new file mode 100644
--- /dev/null	(date 1730910225984)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/KoiPond.java	(date 1730910225984)
@@ -0,0 +1,50 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.time.LocalDate;
+import java.util.List;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity
+public class KoiPond {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    private String name;
+    private LocalDate createDate;
+    private int drainCount;
+    private Double depth;
+    private int skimmer;
+    private Double pumpCapacity;
+    private int volume;
+    private String imageUrl;
+    // Add this method
+    @ManyToOne
+    @JoinColumn(name = "user_id")
+    private User user;
+
+    @OneToMany(mappedBy = "koiPond",cascade = CascadeType.ALL, orphanRemoval = true)
+    List<WaterParameters> waterParametersList;
+
+    @OneToMany(mappedBy = "koiPond",cascade = CascadeType.ALL, orphanRemoval = true)
+    private List<Log> logList;
+    public KoiPond(Long id, String name, int drainCount, Double depth, int skimmer, Double pumpCapacity,int volume,User user, String imageUrl) {
+        this.id = id;
+        this.name = name;
+        this.drainCount = drainCount;
+        this.depth = depth;
+        this.skimmer = skimmer;
+        this.pumpCapacity = pumpCapacity;
+        this.volume = volume;
+        this.imageUrl = imageUrl;
+        this.user = user;
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/KoiFish.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/KoiFish.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/KoiFish.java
new file mode 100644
--- /dev/null	(date 1730910225984)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/KoiFish.java	(date 1730910225984)
@@ -0,0 +1,61 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.time.LocalDate;
+import java.util.List;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity
+public class KoiFish {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    private String name;
+    private String physique;
+    private int age;
+    private Double length;
+    private Double weight;
+    private String gender;
+    private String variety;
+    private LocalDate pondDate;
+    private String breeder;
+    private Double price;
+    private String status;
+    private String imageUrl;
+    @ManyToOne
+    @JoinColumn(name="koiPond_id")
+    private KoiPond koiPond;
+
+    @OneToMany(mappedBy = "koiFish",cascade = CascadeType.ALL,orphanRemoval = true)
+    List<GrowthHistory> growthHistoryList;
+
+    @OneToMany(mappedBy = "koiFish",cascade = CascadeType.ALL,orphanRemoval = true)
+    List<Remark> remarkList;
+
+    @OneToOne(mappedBy = "koiFish",cascade = CascadeType.ALL,orphanRemoval = true)
+    private OriginStateOfFish originStateOfFish;
+
+    public KoiFish(Long id,String name, String physique, int age, Double length, Double weight, String gender, String variety, LocalDate pondDate, String breeder, Double price, KoiPond koiPond, String imageUrl) {
+        this.id = id;
+        this.name = name;
+        this.physique = physique;
+        this.age = age;
+        this.length = length;
+        this.weight = weight;
+        this.gender = gender;
+        this.variety = variety;
+        this.pondDate = pondDate;
+        this.breeder = breeder;
+        this.price = price;
+        this.koiPond = koiPond;
+        this.imageUrl = imageUrl;
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/IssueType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/IssueType.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/IssueType.java
new file mode 100644
--- /dev/null	(date 1730910225984)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/IssueType.java	(date 1730910225984)
@@ -0,0 +1,30 @@
+package com.swpproject.koi_care_system.models;
+
+import com.swpproject.koi_care_system.enums.RangeParameter;
+import jakarta.persistence.*;
+import lombok.*;
+import lombok.experimental.FieldDefaults;
+
+import java.util.HashSet;
+import java.util.Set;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+@Entity
+public class IssueType {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    long id;
+    @Enumerated(EnumType.STRING)
+    RangeParameter parameterType;
+    String conditionType;
+    @OneToMany(mappedBy = "issueType", cascade = CascadeType.ALL, orphanRemoval = true)
+    Set<Issue> issues = new HashSet<>();
+
+    @ManyToMany(mappedBy = "issues", fetch = FetchType.LAZY)
+    Set<Product> products = new HashSet<>();
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Issue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Issue.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Issue.java
new file mode 100644
--- /dev/null	(date 1730910225984)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Issue.java	(date 1730910225984)
@@ -0,0 +1,27 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity
+public class Issue {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    private String name;
+    private String description;
+    @ManyToOne
+    @JoinColumn(name = "water_parameters_id")
+    private WaterParameters waterParameters;
+
+    @ManyToOne
+    @JoinColumn(name = "issue_type_id")
+    private IssueType issueType;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/CartItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/CartItem.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/CartItem.java
new file mode 100644
--- /dev/null	(date 1730910225984)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/CartItem.java	(date 1730910225984)
@@ -0,0 +1,40 @@
+package com.swpproject.koi_care_system.models;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.math.BigDecimal;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity
+public class CartItem {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    private int quantity;
+    private BigDecimal unitPrice;
+    private BigDecimal totalPrice;
+
+    @ManyToOne
+    @JoinColumn(name = "product_id")
+    private Product product;
+
+    @JsonIgnore
+    @ManyToOne(cascade = CascadeType.ALL)
+    @JoinColumn(name = "cart_id")
+    private Cart cart;
+
+    public void setTotalPrice() {
+        this.totalPrice = this.unitPrice.multiply(new BigDecimal(quantity));
+
+    }
+
+    
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Cart.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Cart.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Cart.java
new file mode 100644
--- /dev/null	(date 1730910225984)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Cart.java	(date 1730910225984)
@@ -0,0 +1,52 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.math.BigDecimal;
+import java.util.HashSet;
+import java.util.Set;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity
+public class Cart {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    private BigDecimal totalAmount = BigDecimal.ZERO;
+
+    @OneToMany(mappedBy = "cart", cascade = CascadeType.ALL, orphanRemoval = true)
+    private Set<CartItem> items = new HashSet<>();
+
+    @OneToOne
+    @JoinColumn(name = "user_id")
+    private User user;
+
+    public void addItem(CartItem item) {
+        this.items.add(item);
+        item.setCart(this);
+        updateTotalAmount();
+    }
+
+    public void removeItem(CartItem item) {
+        this.items.remove(item);
+        item.setCart(null);
+        updateTotalAmount();
+    }
+
+    private void updateTotalAmount() {
+        this.totalAmount = items.stream().map(item -> {
+            BigDecimal unitPrice = item.getUnitPrice();
+            if (unitPrice == null) {
+                return  BigDecimal.ZERO;
+            }
+            return unitPrice.multiply(BigDecimal.valueOf(item.getQuantity()));
+        }).reduce(BigDecimal.ZERO, BigDecimal::add);
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Blog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Blog.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Blog.java
new file mode 100644
--- /dev/null	(date 1730910225984)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Blog.java	(date 1730910225984)
@@ -0,0 +1,46 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.*;
+import lombok.AccessLevel;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDate;
+import java.util.HashSet;
+import java.util.Set;
+
+@Data
+@Entity
+@NoArgsConstructor
+@Table(name = "blogs")
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class Blog {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    int blogId;
+
+    @Column(name = "blog_title", nullable = false)
+    String blogTitle;
+    @Lob//Large Object
+    @Column(name = "blog_content", nullable = false, columnDefinition = "TEXT")
+    String blogContent;
+    @Column(name = "blog_image", nullable = false)
+    String blogImage;
+    @Column(name = "blog_date", nullable = false)
+    LocalDate blogDate;
+
+    @ManyToMany
+    @JoinTable(
+            name = "blog_tags",
+            joinColumns = @JoinColumn(name = "blog_id"),
+            inverseJoinColumns = @JoinColumn(name = "tag_id")
+    )
+    Set<Tag> tags = new HashSet<>();
+
+    @ManyToOne
+    User user;
+
+
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/WaterParameterMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/WaterParameterMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/WaterParameterMapper.java
new file mode 100644
--- /dev/null	(date 1730910225983)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/WaterParameterMapper.java	(date 1730910225983)
@@ -0,0 +1,23 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.WaterParameterDto;
+import com.swpproject.koi_care_system.models.WaterParameters;
+import com.swpproject.koi_care_system.payload.request.ParametersCreateRequest;
+import com.swpproject.koi_care_system.payload.request.ParametersUpdateRequest;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+import org.mapstruct.MappingTarget;
+
+@Mapper(componentModel = "spring")
+public interface WaterParameterMapper {
+    @Mapping(target = "koiPond", ignore = true)
+    @Mapping(target = "id", ignore = true)
+    WaterParameters mapToWaterParameters(ParametersCreateRequest request);
+
+    @Mapping(target = "koiPondName", source = "koiPond.name")
+    WaterParameterDto mapToWaterParameterDto(WaterParameters waterParameters);
+
+    @Mapping(target = "koiPond", ignore = true)
+    @Mapping(target = "id", ignore = true)
+    void updateWaterParameters(@MappingTarget WaterParameters waterParameters, ParametersUpdateRequest request);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ChatRoom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ChatRoom.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ChatRoom.java
new file mode 100644
--- /dev/null	(date 1730910225984)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ChatRoom.java	(date 1730910225984)
@@ -0,0 +1,22 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
+import jakarta.persistence.Id;
+import lombok.*;
+import org.springframework.data.mongodb.core.mapping.Document;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+@Builder
+@Document
+public class ChatRoom {
+    @Id
+    private String id;
+    private String chatId;
+    private String senderId;
+    private String recipientId;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ChatNotification.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ChatNotification.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ChatNotification.java
new file mode 100644
--- /dev/null	(date 1730910225984)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ChatNotification.java	(date 1730910225984)
@@ -0,0 +1,16 @@
+package com.swpproject.koi_care_system.models;
+
+
+import lombok.*;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+@Builder
+public class ChatNotification {
+    private String id;
+    private String senderId;
+    private String recipientId;
+    private String content;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ChatMessage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ChatMessage.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ChatMessage.java
new file mode 100644
--- /dev/null	(date 1730910225984)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/ChatMessage.java	(date 1730910225984)
@@ -0,0 +1,26 @@
+package com.swpproject.koi_care_system.models;
+
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
+import jakarta.persistence.Id;
+import lombok.*;
+import org.springframework.data.mongodb.core.mapping.Document;
+
+import java.util.Date;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+@Builder
+@Document
+public class ChatMessage {
+    @Id
+    private String id;
+    private String chatId;
+    private String senderId;
+    private String recipientId;
+    private String content;
+    private String timestamp;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Category.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Category.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Category.java
new file mode 100644
--- /dev/null	(date 1730910225984)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/models/Category.java	(date 1730910225984)
@@ -0,0 +1,28 @@
+package com.swpproject.koi_care_system.models;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import jakarta.persistence.*;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.util.List;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@Entity
+public class Category {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    private String name;
+
+    @JsonIgnore
+    @OneToMany(mappedBy = "category",cascade = CascadeType.ALL, orphanRemoval = false)
+    private List<Product> products;
+
+    public Category(String name) {
+        this.name = name;
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/SubscribeMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/SubscribeMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/SubscribeMapper.java
new file mode 100644
--- /dev/null	(date 1730910225982)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/SubscribeMapper.java	(date 1730910225982)
@@ -0,0 +1,12 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.SubscribePlanDto;
+import com.swpproject.koi_care_system.models.SubscribePlan;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+
+@Mapper(componentModel = "spring")
+public interface SubscribeMapper {
+    @Mapping(target = "userProfileDto", ignore = true)
+    SubscribePlanDto maptoDto(SubscribePlan subscribePlan);
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/ReminderMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/ReminderMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/ReminderMapper.java
new file mode 100644
--- /dev/null	(date 1730910225982)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/ReminderMapper.java	(date 1730910225982)
@@ -0,0 +1,37 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.ReminderDto;
+import com.swpproject.koi_care_system.models.Reminder;
+import com.swpproject.koi_care_system.models.ReminderMongo;
+import com.swpproject.koi_care_system.payload.request.NotificationRequest;
+import com.swpproject.koi_care_system.payload.request.ReminderRequest;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+import org.mapstruct.MappingTarget;
+
+@Mapper(componentModel = "spring")
+public interface ReminderMapper {
+
+    @Mapping(target = "user", ignore = true)
+    @Mapping(target = "id", ignore = true)
+    Reminder mapToReminders(ReminderRequest request);
+
+    ReminderDto mapToReminderDto(Reminder reminder);
+
+    @Mapping(target = "username", source = "user.username")
+    ReminderMongo mapToReminderMongo(Reminder reminder);
+
+    @Mapping(target = "user", ignore = true)
+    @Mapping(target = "id", ignore = true)
+    void updateReminderFromRequest(@MappingTarget Reminder reminder, ReminderRequest request);
+
+    @Mapping(target = "username", ignore = true)
+    void updateReminderMongo(@MappingTarget ReminderMongo reminderMongo, Reminder reminder);
+
+    @Mapping(target = "message", source = "reminder.title")
+    @Mapping(target = "delivered", source = "isDelivered")
+    NotificationRequest mapToNotificationRequest(ReminderMongo reminder, boolean isDelivered);
+
+    @Mapping(target = "user", ignore = true)
+    Reminder mapToReminderFromMongo(ReminderMongo reminder);
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/RemarkMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/RemarkMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/RemarkMapper.java
new file mode 100644
--- /dev/null	(date 1730910225982)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/RemarkMapper.java	(date 1730910225982)
@@ -0,0 +1,24 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.RemarkDto;
+import com.swpproject.koi_care_system.models.Remark;
+import com.swpproject.koi_care_system.payload.request.RemarkCreateRequest;
+import com.swpproject.koi_care_system.payload.request.RemarkUpdateRequest;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+import org.mapstruct.MappingTarget;
+
+@Mapper(componentModel = "spring")
+public interface RemarkMapper {
+    @Mapping(target = "koiFish", ignore = true)
+    @Mapping(target = "id", ignore = true)
+    Remark mapToRemark(RemarkCreateRequest remarkCreateRequest);
+
+    @Mapping(target = "koiFishId", source = "koiFish.id")
+    RemarkDto mapToRemarkDto(Remark remark);
+
+    @Mapping(target = "id", ignore = true)
+    @Mapping(target = "koiFish", ignore = true)
+    void updateRemark(@MappingTarget Remark remark, RemarkUpdateRequest remarkUpdateRequest);
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/PromotionMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/PromotionMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/PromotionMapper.java
new file mode 100644
--- /dev/null	(date 1730910225982)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/PromotionMapper.java	(date 1730910225982)
@@ -0,0 +1,34 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.PromotionDto;
+import com.swpproject.koi_care_system.models.Promotion;
+import com.swpproject.koi_care_system.payload.request.AddPromotionRequest;
+import com.swpproject.koi_care_system.payload.request.AdminConfirmPromotionRequest;
+import com.swpproject.koi_care_system.payload.request.PromotionUpdateRequest;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+import org.mapstruct.MappingTarget;
+
+@Mapper(componentModel = "spring")
+public interface PromotionMapper {
+    @Mapping(target = "id", ignore = true)
+    @Mapping(target = "status", constant = "PENDING")
+    @Mapping(target = "products", ignore = true)
+    Promotion mapToPromotion(AddPromotionRequest addPromotionRequest);
+
+    PromotionDto mapToDto(Promotion promotion);
+
+    @Mapping(target = "status", ignore = true)
+    @Mapping(target = "id", ignore = true)
+    @Mapping(target = "products", ignore = true)
+    void updatePromotion(@MappingTarget Promotion promotion, PromotionUpdateRequest promotionUpdateRequest);
+
+    @Mapping(target = "startDate", ignore = true)
+    @Mapping(target = "products", ignore = true)
+    @Mapping(target = "name", ignore = true)
+    @Mapping(target = "id", ignore = true)
+    @Mapping(target = "endDate", ignore = true)
+    @Mapping(target = "discountRate", ignore = true)
+    @Mapping(target = "description", ignore = true)
+    void confirmPromotion(@MappingTarget Promotion promotion, AdminConfirmPromotionRequest request);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/UserProfileMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/UserProfileMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/UserProfileMapper.java
new file mode 100644
--- /dev/null	(date 1730910225983)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/UserProfileMapper.java	(date 1730910225983)
@@ -0,0 +1,41 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.UserProfileDto;
+import com.swpproject.koi_care_system.models.User;
+import com.swpproject.koi_care_system.models.UserProfile;
+import com.swpproject.koi_care_system.payload.request.ProfileUpdateRequest;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+import org.mapstruct.MappingTarget;
+
+@Mapper(componentModel = "spring")
+public interface UserProfileMapper {
+
+    @Mapping(target = "subscribePlan", ignore = true)
+    @Mapping(target = "id", ignore = true)
+    @Mapping(target = "user", source = "user")
+    @Mapping(target = "phone", ignore = true)
+    @Mapping(target = "name", source = "user.username")
+    @Mapping(target = "gender", ignore = true)
+    @Mapping(target = "dateOfBirth", ignore = true)
+    @Mapping(target = "createdDate", ignore = true)
+    @Mapping(target = "bio", ignore = true)
+    @Mapping(target = "avatar", ignore = true)
+    @Mapping(target = "address", ignore = true)
+    UserProfile mapToUserProfile(User user);
+
+    @Mapping(target = "userId", source = "user.id")
+    @Mapping(target = "status", source = "subscribePlan.subscribe")
+    UserProfileDto mapToUserProfileDto(UserProfile userProfile);
+    
+    @Mapping(target = "subscribePlan", ignore = true)
+    @Mapping(target = "avatar", ignore = true)
+    @Mapping(target = "user", ignore = true)
+    @Mapping(target = "role", ignore = true)
+    @Mapping(target = "name", ignore = true)
+    @Mapping(target = "id", ignore = true)
+    @Mapping(target = "email", ignore = true)
+    @Mapping(target = "createdDate", ignore = true)
+    void updateUserProfile(@MappingTarget UserProfile userProfile, ProfileUpdateRequest profileUpdateRequest);
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/TagMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/TagMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/TagMapper.java
new file mode 100644
--- /dev/null	(date 1730910225983)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/TagMapper.java	(date 1730910225983)
@@ -0,0 +1,23 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.TagDto;
+import com.swpproject.koi_care_system.models.Tag;
+import com.swpproject.koi_care_system.payload.request.TagCreateRequest;
+import com.swpproject.koi_care_system.payload.request.TagUpdateRequest;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+import org.mapstruct.MappingTarget;
+
+@Mapper(componentModel = "spring")
+public interface TagMapper {
+
+    @Mapping(target = "blogs", ignore = true)
+    @Mapping(target = "tagId", ignore = true)
+    Tag maptoTag(TagCreateRequest tagCreateRequest);
+
+    TagDto maptoTagDto(Tag tag);
+
+    @Mapping(target = "blogs", ignore = true)
+    @Mapping(target = "tagId", ignore = true)
+    void updateTag(@MappingTarget Tag tag, TagUpdateRequest tagUpdateRequest);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/SupplierMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/SupplierMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/SupplierMapper.java
new file mode 100644
--- /dev/null	(date 1730910225983)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/SupplierMapper.java	(date 1730910225983)
@@ -0,0 +1,12 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.models.Supplier;
+import com.swpproject.koi_care_system.payload.request.AddSupplierRequest;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+
+@Mapper(componentModel = "spring")
+public interface SupplierMapper {
+    @Mapping(target = "productList", ignore = true)
+    Supplier mapToSupplier(AddSupplierRequest addSupplierRequest);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/NotificationMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/NotificationMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/NotificationMapper.java
new file mode 100644
--- /dev/null	(date 1730910225982)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/NotificationMapper.java	(date 1730910225982)
@@ -0,0 +1,17 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.NotificationDto;
+import com.swpproject.koi_care_system.models.Notification;
+import com.swpproject.koi_care_system.payload.request.NotificationRequest;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+
+@Mapper(componentModel = "spring")
+public interface NotificationMapper {
+
+    @Mapping(target = "user", ignore = true)
+    @Mapping(target = "id", ignore = true)
+    Notification mapToNotification(NotificationRequest request);
+
+    NotificationDto mapToNotificationDto(Notification notification);
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/LogMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/LogMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/LogMapper.java
new file mode 100644
--- /dev/null	(date 1730910225982)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/LogMapper.java	(date 1730910225982)
@@ -0,0 +1,24 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.LogDto;
+import com.swpproject.koi_care_system.models.Log;
+import com.swpproject.koi_care_system.payload.request.LogCreateRequest;
+import com.swpproject.koi_care_system.payload.request.LogUpdateRequest;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+import org.mapstruct.MappingTarget;
+
+@Mapper(componentModel = "spring")
+public interface LogMapper {
+
+    @Mapping(target = "koiPond", ignore = true)
+    @Mapping(target = "logId", ignore = true)
+    Log mapToLog(LogCreateRequest request);
+
+    @Mapping(target = "koiPondName", source = "koiPond.name")
+    LogDto mapToLogDto(Log log);
+
+    @Mapping(target = "koiPond", ignore = true)
+    @Mapping(target = "logId", ignore = true)
+    void updateLog(@MappingTarget Log log, LogUpdateRequest request);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/KoiPondMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/KoiPondMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/KoiPondMapper.java
new file mode 100644
--- /dev/null	(date 1730910225982)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/KoiPondMapper.java	(date 1730910225982)
@@ -0,0 +1,32 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.KoiPondDto;
+import com.swpproject.koi_care_system.models.KoiPond;
+import com.swpproject.koi_care_system.payload.request.AddKoiPondRequest;
+import com.swpproject.koi_care_system.payload.request.KoiFishUpdateRequest;
+import com.swpproject.koi_care_system.payload.request.KoiPondUpdateRequest;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+import org.mapstruct.MappingTarget;
+
+import java.util.List;
+
+@Mapper(componentModel = "spring")
+
+public interface KoiPondMapper {
+    KoiPondDto toDto(KoiPond koiPond);
+
+    @Mapping(target = "imageUrl", ignore = true)
+    @Mapping(target = "id", ignore = true)
+    @Mapping(target = "waterParametersList", ignore = true)
+    @Mapping(target = "logList", ignore = true)
+    KoiPond mapToKoiPond(AddKoiPondRequest addKoiPondRequest);
+    List<KoiPondDto> mapToKoiPondDto(List<KoiPond> list);
+    @Mapping(target = "createDate", ignore = true)
+    @Mapping(target = "imageUrl", ignore = true)
+    @Mapping(target = "waterParametersList", ignore = true)
+    @Mapping(target = "user", ignore = true)
+    @Mapping(target = "logList", ignore = true)
+    void updateToKoiPond(@MappingTarget KoiPond koiPond, KoiPondUpdateRequest koiPondUpdateRequest);
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/KoiFishMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/KoiFishMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/KoiFishMapper.java
new file mode 100644
--- /dev/null	(date 1730910225981)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/KoiFishMapper.java	(date 1730910225981)
@@ -0,0 +1,31 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.KoiFishDto;
+import com.swpproject.koi_care_system.models.KoiFish;
+import com.swpproject.koi_care_system.payload.request.AddKoiFishRequest;
+import com.swpproject.koi_care_system.payload.request.KoiFishUpdateRequest;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+import org.mapstruct.MappingTarget;
+
+@Mapper(componentModel = "spring")
+public interface KoiFishMapper {
+    KoiFishDto toDto(KoiFish koiFish);
+
+    @Mapping(target = "imageUrl", ignore = true)
+    @Mapping(target = "koiPond", ignore = true)
+    @Mapping(target = "id", ignore = true)
+    @Mapping(target = "status", ignore = true)
+    @Mapping(target = "remarkList", ignore = true)
+    @Mapping(target = "growthHistoryList", ignore = true)
+    KoiFish mapToKoiFish(AddKoiFishRequest addKoiFishRequest);
+
+    @Mapping(target = "imageUrl", ignore = true)
+    @Mapping(target = "weight", ignore = true)
+    @Mapping(target = "remarkList", ignore = true)
+    @Mapping(target = "physique", ignore = true)
+    @Mapping(target = "length", ignore = true)
+    @Mapping(target = "growthHistoryList", ignore = true)
+    void updateToKoiFish(@MappingTarget KoiFish koiFish, KoiFishUpdateRequest koiFishUpdateRequest);
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/ProductMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/ProductMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/ProductMapper.java
new file mode 100644
--- /dev/null	(date 1730910225982)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/ProductMapper.java	(date 1730910225982)
@@ -0,0 +1,14 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.ProductDto;
+import com.swpproject.koi_care_system.dto.PromotionDto;
+import com.swpproject.koi_care_system.models.Product;
+import com.swpproject.koi_care_system.models.Promotion;
+import org.mapstruct.Mapper;
+
+@Mapper(componentModel = "spring")
+public interface ProductMapper {
+
+    ProductDto mapToProductDto(Product product);
+    PromotionDto mapToPromotionDto(Promotion promotion);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/PaymentMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/PaymentMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/PaymentMapper.java
new file mode 100644
--- /dev/null	(date 1730910225982)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/PaymentMapper.java	(date 1730910225982)
@@ -0,0 +1,17 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.PaymentDto;
+import com.swpproject.koi_care_system.models.Payment;
+import com.swpproject.koi_care_system.payload.request.PaymentStoreRequest;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+
+@Mapper(componentModel = "spring")
+public interface PaymentMapper {
+    @Mapping(target = "orderId", source = "order.orderId")
+    PaymentDto mapToDto(Payment payment);
+
+    @Mapping(target = "order", ignore = true)
+    @Mapping(target = "id", ignore = true)
+    Payment mapToPayment(PaymentStoreRequest request);
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/OrderMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/OrderMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/OrderMapper.java
new file mode 100644
--- /dev/null	(date 1730910225982)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/OrderMapper.java	(date 1730910225982)
@@ -0,0 +1,16 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.OrderDto;
+import com.swpproject.koi_care_system.models.Order;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+
+@Mapper(componentModel = "spring", uses = {OrderItemMapper.class})
+public interface OrderMapper {
+
+    @Mapping(target = "id", source = "orderId")
+    @Mapping(target = "userId", source = "user.id")
+    @Mapping(target = "status", source = "orderStatus")
+    @Mapping(target = "items", source = "orderItems")
+    OrderDto toDto(Order order);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/OrderItemMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/OrderItemMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/OrderItemMapper.java
new file mode 100644
--- /dev/null	(date 1730910225982)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/OrderItemMapper.java	(date 1730910225982)
@@ -0,0 +1,19 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.OrderItemDto;
+import com.swpproject.koi_care_system.models.OrderItem;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+
+@Mapper(componentModel = "spring")
+public interface OrderItemMapper {
+
+    @Mapping(target = "productName", source = "product.name")
+    @Mapping(target = "productId", source = "product.id")
+    OrderItemDto toDto(OrderItem orderItem);
+
+    @Mapping(target = "order", ignore = true)
+    @Mapping(target = "id", ignore = true)
+    @Mapping(target = "product.id", source = "productId")
+    OrderItem toEntity(OrderItemDto orderItemDto);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/BlogMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/BlogMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/BlogMapper.java
new file mode 100644
--- /dev/null	(date 1730910225981)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/BlogMapper.java	(date 1730910225981)
@@ -0,0 +1,27 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.BlogDto;
+import com.swpproject.koi_care_system.models.Blog;
+import com.swpproject.koi_care_system.payload.request.BlogCreateRequest;
+import com.swpproject.koi_care_system.payload.request.BlogUpdateRequest;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+import org.mapstruct.MappingTarget;
+
+@Mapper(componentModel = "spring")
+public interface BlogMapper {
+    @Mapping(target = "blogImage", ignore = true)
+    @Mapping(target = "blogId", ignore = true)
+    @Mapping(target = "tags", ignore = true)
+    @Mapping(target = "blogDate", ignore = true)
+    @Mapping(target = "user", ignore = true)
+    Blog mapToBlog(BlogCreateRequest request);
+
+    BlogDto mapToBlogDto(Blog blog);
+
+    @Mapping(target = "blogId", ignore = true)
+    @Mapping(target = "tags", ignore = true)
+    @Mapping(target = "user", ignore = true)
+    void updateBlog(@MappingTarget Blog blog, BlogUpdateRequest request);
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/WebSocketConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/WebSocketConfig.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/WebSocketConfig.java
new file mode 100644
--- /dev/null	(date 1730910225972)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/WebSocketConfig.java	(date 1730910225972)
@@ -0,0 +1,64 @@
+package com.swpproject.koi_care_system.config;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import lombok.RequiredArgsConstructor;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.Ordered;
+import org.springframework.core.annotation.Order;
+import org.springframework.messaging.converter.DefaultContentTypeResolver;
+import org.springframework.messaging.converter.MappingJackson2MessageConverter;
+import org.springframework.messaging.converter.MessageConverter;
+import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;
+import org.springframework.messaging.simp.config.ChannelRegistration;
+import org.springframework.messaging.simp.config.MessageBrokerRegistry;
+import org.springframework.security.messaging.context.AuthenticationPrincipalArgumentResolver;
+import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
+import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
+import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;
+
+import java.util.List;
+
+import static org.springframework.http.MediaType.APPLICATION_JSON;
+
+@Configuration
+@EnableWebSocketMessageBroker
+@Order(Ordered.HIGHEST_PRECEDENCE + 99)
+@RequiredArgsConstructor
+public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {
+    private final WebSocketAuthentication webSocketAuthentication;
+
+    @Override
+    public void configureMessageBroker(MessageBrokerRegistry config) {
+        config.enableSimpleBroker("/topic","/user","/queue");
+        config.setApplicationDestinationPrefixes("/app");
+        config.setUserDestinationPrefix("/user");
+    }
+
+    @Override
+    public void registerStompEndpoints(StompEndpointRegistry registry) {
+        registry.addEndpoint("/ws").setAllowedOrigins("https://koi-care-system.vercel.app", "https://koicaresystemv2.azurewebsites.net","http://localhost:5173","http://localhost:8080").
+                withSockJS();
+    }
+
+    @Override
+    public void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {
+        argumentResolvers.add(new AuthenticationPrincipalArgumentResolver());
+    }
+
+    @Override
+    public boolean configureMessageConverters(List<MessageConverter> messageConverters) {
+        DefaultContentTypeResolver resolver = new DefaultContentTypeResolver();
+        resolver.setDefaultMimeType(APPLICATION_JSON);
+        MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();
+        converter.setObjectMapper(new ObjectMapper());
+        converter.setContentTypeResolver(resolver);
+        messageConverters.add(converter);
+        return false;
+    }
+
+    @Override
+    public void configureClientInboundChannel(ChannelRegistration registration) {
+        registration.interceptors(webSocketAuthentication);
+    }
+}
+
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/WebSocketAuthentication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/WebSocketAuthentication.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/WebSocketAuthentication.java
new file mode 100644
--- /dev/null	(date 1730910225972)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/WebSocketAuthentication.java	(date 1730910225972)
@@ -0,0 +1,46 @@
+package com.swpproject.koi_care_system.config;
+
+import com.swpproject.koi_care_system.utils.JwtUtils;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.messaging.Message;
+import org.springframework.messaging.MessageChannel;
+import org.springframework.messaging.simp.stomp.StompCommand;
+import org.springframework.messaging.simp.stomp.StompHeaderAccessor;
+import org.springframework.messaging.support.ChannelInterceptor;
+import org.springframework.messaging.support.MessageHeaderAccessor;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.stereotype.Component;
+
+import java.util.List;
+
+@Component
+public class WebSocketAuthentication implements ChannelInterceptor {
+
+    @Autowired
+    private JwtUtils jwtUtils;
+
+    @Override
+    public Message<?> preSend(Message<?> message, MessageChannel channel) {
+        StompHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class);
+
+        if (accessor != null && StompCommand.CONNECT.equals(accessor.getCommand())) {
+            String token = accessor.getFirstNativeHeader("Authorization");
+
+            if (token != null && token.startsWith("Bearer ")) {
+                token = token.substring(7); // Remove "Bearer " prefix
+                try {
+                    String username = jwtUtils.getUsernameFromToken(token);
+
+                    if (username != null && jwtUtils.verificationToken(token)) {
+                        // Create an authentication token with the username and set it in the accessor
+                        accessor.setUser(new UsernamePasswordAuthenticationToken(username, null, List.of()));
+                    }
+                } catch (Exception e) {
+                    // Log the exception or handle as needed
+                    System.out.println("Token validation failed: " + e.getMessage());
+                }
+            }
+        }
+        return message;
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/WebConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/WebConfig.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/WebConfig.java
new file mode 100644
--- /dev/null	(date 1730910225972)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/WebConfig.java	(date 1730910225972)
@@ -0,0 +1,18 @@
+package com.swpproject.koi_care_system.config;
+
+import org.springframework.context.annotation.Configuration;
+import org.springframework.http.CacheControl;
+import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
+
+import java.util.concurrent.TimeUnit;
+
+@Configuration
+public class WebConfig implements WebMvcConfigurer {
+    @Override
+    public void addResourceHandlers(ResourceHandlerRegistry registry) {
+        registry.addResourceHandler("/images/**")
+                .addResourceLocations("classpath:/static/images/")
+                .setCacheControl(CacheControl.maxAge(30, TimeUnit.DAYS));
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/IssueTypeMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/IssueTypeMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/IssueTypeMapper.java
new file mode 100644
--- /dev/null	(date 1730910225981)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/IssueTypeMapper.java	(date 1730910225981)
@@ -0,0 +1,11 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.IssueTypeDto;
+import com.swpproject.koi_care_system.models.IssueType;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+
+@Mapper(componentModel = "spring")
+public interface IssueTypeMapper {
+    IssueTypeDto maptodto(IssueType issueType);
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/IssueMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/IssueMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/IssueMapper.java
new file mode 100644
--- /dev/null	(date 1730910225981)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/IssueMapper.java	(date 1730910225981)
@@ -0,0 +1,14 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.IssueDto;
+import com.swpproject.koi_care_system.models.Issue;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+
+@Mapper(componentModel = "spring")
+public interface IssueMapper {
+
+    @Mapping(target = "issueTypeId", source = "issueType.id")
+    IssueDto mapToIssueDto(Issue issue);
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/ImageMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/ImageMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/ImageMapper.java
new file mode 100644
--- /dev/null	(date 1730910225981)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/ImageMapper.java	(date 1730910225981)
@@ -0,0 +1,10 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.ImageDto;
+import com.swpproject.koi_care_system.models.Image;
+import org.mapstruct.Mapper;
+
+@Mapper(componentModel = "spring")
+public interface ImageMapper {
+    ImageDto mapToImageDto(Image image);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/GrowthHistoryMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/GrowthHistoryMapper.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/GrowthHistoryMapper.java
new file mode 100644
--- /dev/null	(date 1730910225981)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/mapper/GrowthHistoryMapper.java	(date 1730910225981)
@@ -0,0 +1,25 @@
+package com.swpproject.koi_care_system.mapper;
+
+import com.swpproject.koi_care_system.dto.GrowthHistoryDto;
+import com.swpproject.koi_care_system.models.GrowthHistory;
+import com.swpproject.koi_care_system.payload.request.GrowthCreateRequest;
+import com.swpproject.koi_care_system.payload.request.GrowthUpdateRequest;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+import org.mapstruct.MappingTarget;
+
+@Mapper(componentModel = "spring")
+public interface GrowthHistoryMapper {
+    @Mapping(target = "imageUrl", ignore = true)
+    @Mapping(target = "koiFish", ignore = true)
+    @Mapping(target = "id", ignore = true)
+    GrowthHistory mapToGrowthHistory(GrowthCreateRequest growthCreateRequest);
+
+    @Mapping(target = "koiFishName", source = "koiFish.name")
+    GrowthHistoryDto mapToGrowthHistoryDto(GrowthHistory growthHistory);
+
+    @Mapping(target = "imageUrl", ignore = true)
+    @Mapping(target = "koiFish", ignore = true)
+    @Mapping(target = "id", ignore = true)
+    void updateGrowthHistory(@MappingTarget GrowthHistory growthHistory, GrowthUpdateRequest growthUpdateRequest);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/ApplicationInitConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/ApplicationInitConfig.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/ApplicationInitConfig.java
new file mode 100644
--- /dev/null	(date 1730910225971)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/ApplicationInitConfig.java	(date 1730910225971)
@@ -0,0 +1,41 @@
+package com.swpproject.koi_care_system.config;
+
+import com.swpproject.koi_care_system.models.User;
+import com.swpproject.koi_care_system.repository.UserRepository;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.boot.CommandLineRunner;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.crypto.password.PasswordEncoder;
+
+import static com.swpproject.koi_care_system.enums.Role.ADMIN;
+
+@Configuration
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class ApplicationInitConfig {
+
+    UserRepository userRepository;
+    PasswordEncoder passwordEncoder;
+
+    @Bean
+    public CommandLineRunner initRoles() {
+        return args -> {
+            if (!userRepository.existsByUsername("admin")) {
+                User admin = User.builder()
+                        .username("admin")
+                        .password(passwordEncoder.encode("admin"))
+                        .email("admin@gmail.com")
+                        .status(true)
+                        .role(ADMIN)
+                        .provider("LOCAL")
+                        .build();
+
+                userRepository.save(admin);
+
+            }
+        };
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/utils/VNPayUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/utils/VNPayUtil.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/utils/VNPayUtil.java
new file mode 100644
--- /dev/null	(date 1730910226006)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/utils/VNPayUtil.java	(date 1730910226006)
@@ -0,0 +1,71 @@
+package com.swpproject.koi_care_system.utils;
+
+import jakarta.servlet.http.HttpServletRequest;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.util.Map;
+import java.util.Random;
+import java.util.stream.Collectors;
+
+public class VNPayUtil {
+    public static String hmacSHA512(final String key, final String data) {
+        try {
+            if (key == null || data == null) {
+                throw new NullPointerException();
+            }
+            final Mac hmac512 = Mac.getInstance("HmacSHA512");
+            byte[] hmacKeyBytes = key.getBytes();
+            final SecretKeySpec secretKey = new SecretKeySpec(hmacKeyBytes, "HmacSHA512");
+            hmac512.init(secretKey);
+            byte[] dataBytes = data.getBytes(StandardCharsets.UTF_8);
+            byte[] result = hmac512.doFinal(dataBytes);
+            StringBuilder sb = new StringBuilder(2 * result.length);
+            for (byte b : result) {
+                sb.append(String.format("%02x", b & 0xff));
+            }
+            return sb.toString();
+
+        } catch (Exception ex) {
+            return "";
+        }
+    }
+
+    public static String getIpAddress(HttpServletRequest request) {
+        String ipAdress;
+        try {
+            ipAdress = request.getHeader("X-FORWARDED-FOR");
+            if (ipAdress == null) {
+                ipAdress = request.getRemoteAddr();
+            }
+        } catch (Exception e) {
+            ipAdress = "Invalid IP:" + e.getMessage();
+        }
+        return ipAdress;
+    }
+
+    public static String getRandomNumber(int len) {
+        Random rnd = new Random();
+        String chars = "0123456789";
+        StringBuilder sb = new StringBuilder(len);
+        for (int i = 0; i < len; i++) {
+            sb.append(chars.charAt(rnd.nextInt(chars.length())));
+        }
+        return sb.toString();
+    }
+
+    public static String getPaymentURL(Map<String, String> paramsMap, boolean encodeKey) {
+        return paramsMap.entrySet().stream()
+                .filter(entry -> entry.getValue() != null && !entry.getValue().isEmpty())
+                .sorted(Map.Entry.comparingByKey())
+                .map(entry ->
+                        (encodeKey ? URLEncoder.encode(entry.getKey(),
+                                StandardCharsets.US_ASCII)
+                                : entry.getKey()) + "=" +
+                                URLEncoder.encode(entry.getValue()
+                                        , StandardCharsets.US_ASCII))
+                .collect(Collectors.joining("&"));
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/utils/JwtUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/utils/JwtUtils.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/utils/JwtUtils.java
new file mode 100644
--- /dev/null	(date 1730910226006)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/utils/JwtUtils.java	(date 1730910226006)
@@ -0,0 +1,111 @@
+package com.swpproject.koi_care_system.utils;
+
+import com.nimbusds.jose.*;
+import com.nimbusds.jose.crypto.MACSigner;
+import com.nimbusds.jose.crypto.MACVerifier;
+import com.nimbusds.jwt.JWTClaimsSet;
+import com.nimbusds.jwt.SignedJWT;
+import com.swpproject.koi_care_system.enums.ErrorCode;
+import com.swpproject.koi_care_system.enums.Role;
+import com.swpproject.koi_care_system.exceptions.AppException;
+import com.swpproject.koi_care_system.models.User;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.stereotype.Component;
+
+import java.security.SecureRandom;
+import java.text.ParseException;
+import java.time.Instant;
+import java.time.temporal.ChronoUnit;
+import java.util.Date;
+
+@Component
+public class JwtUtils {
+
+
+    @Value("${jwt.signerKey}")
+    private String SIGNER_KEY;
+
+
+    public String generateToken(User user) {
+        // Create HMAC signer
+        JWSHeader header = new JWSHeader(JWSAlgorithm.HS512);
+
+        // Create JWT claims set
+        JWTClaimsSet jwtClaimsSet = new JWTClaimsSet.Builder()
+                .subject(user.getUsername())
+                .issuer("phuoc.com")
+                .issueTime(new Date())
+                .expirationTime(new Date(
+                        Instant.now().plus(1, ChronoUnit.DAYS).toEpochMilli()
+                ))
+                .claim("scope", buildScope(user))
+                .build();
+
+        // Create the payload
+        Payload payload = new Payload(jwtClaimsSet.toJSONObject());
+
+        // Create the JWS object and sign it
+        //JWT  three parts: header, payload, signature
+        JWSObject jwsObject = new JWSObject(header, payload);
+
+        try {
+            jwsObject.sign(new MACSigner(SIGNER_KEY.getBytes()));
+            return jwsObject.serialize();
+        } catch (JOSEException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public boolean verificationToken(String token) throws JOSEException, ParseException {
+
+        // Create HMAC verifier with Signer Key
+        JWSVerifier verifier = new MACVerifier(SIGNER_KEY.getBytes());
+        SignedJWT signedJWT = SignedJWT.parse(token);
+
+        Date expirationTime = signedJWT.getJWTClaimsSet().getExpirationTime();
+
+        // Verify the token with signer key
+        boolean verified = signedJWT.verify(verifier);
+        //check if the token is expired
+        boolean expired = expirationTime.before(new Date());//true if expired
+
+        if (verified && !expired) {
+            return true;
+        }
+        if (!verified) {
+            throw new AppException(ErrorCode.INVALID_TOKEN);
+        }
+
+        return false;
+    }
+
+    public String getUsernameFromToken(String token) {
+        try {
+            SignedJWT signedJWT = SignedJWT.parse(token);
+            return signedJWT.getJWTClaimsSet().getSubject();
+        } catch (ParseException e) {
+            throw new AppException(ErrorCode.INVALID_TOKEN);
+        }
+    }
+
+    private Role buildScope(User user) {
+        if (user.getRole() == null) {
+            throw new AppException(ErrorCode.NO_ROLES);
+        }
+        return user.getRole();
+    }
+
+    public static String generateRandomPassword() {
+        String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
+        String lower = upper.toLowerCase();
+        String digits = "0123456789";
+        String alphanum = upper + lower + digits;
+        SecureRandom random = new SecureRandom();
+        StringBuilder sb = new StringBuilder(8);
+        for (int i = 0; i < 8; i++) {
+            int index = random.nextInt(alphanum.length());
+            sb.append(alphanum.charAt(index));
+        }
+        return sb.toString();
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/utils/EmailUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/utils/EmailUtils.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/utils/EmailUtils.java
new file mode 100644
--- /dev/null	(date 1730910226006)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/utils/EmailUtils.java	(date 1730910226006)
@@ -0,0 +1,7 @@
+package com.swpproject.koi_care_system.utils;
+
+public class EmailUtils {
+    public static String getVerificationUrl(String email, String token) {
+        return "https://koicaresystemv2.azurewebsites.net/api/auth/verifyEmail?email=" + email + "&token=" + token + "&redirect=https://koi-care-system.vercel.app/verify";
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/VnPayConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/VnPayConfig.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/VnPayConfig.java
new file mode 100644
--- /dev/null	(date 1730910225972)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/VnPayConfig.java	(date 1730910225972)
@@ -0,0 +1,47 @@
+package com.swpproject.koi_care_system.config;
+
+import com.swpproject.koi_care_system.utils.VNPayUtil;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Configuration;
+
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.TimeZone;
+
+@Configuration
+public class VnPayConfig {
+
+    @Value("${payment.vnPay.returnUrl}")
+    private String vnp_ReturnUrl;
+    @Value("${payment.vnPay.tmnCode}")
+    private String vnp_TmnCode;
+
+    @Value("${payment.vnPay.version}")
+    private String vnp_Version;
+    @Value("${payment.vnPay.command}")
+    private String vnp_Command;
+    @Value("${payment.vnPay.orderType}")
+    private String orderType;
+
+    public Map<String, String> getVNPayConfig() {
+        Map<String, String> vnpParamsMap = new HashMap<>();
+        vnpParamsMap.put("vnp_Version", this.vnp_Version);
+        vnpParamsMap.put("vnp_Command", this.vnp_Command);
+        vnpParamsMap.put("vnp_TmnCode", this.vnp_TmnCode);
+        vnpParamsMap.put("vnp_CurrCode", "VND");
+        vnpParamsMap.put("vnp_TxnRef", VNPayUtil.getRandomNumber(8));
+        vnpParamsMap.put("vnp_OrderType", this.orderType);
+        vnpParamsMap.put("vnp_Locale", "vn");
+        vnpParamsMap.put("vnp_ReturnUrl", this.vnp_ReturnUrl);
+        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("Etc/GMT+7"));
+        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
+        String vnpCreateDate = formatter.format(calendar.getTime());
+        vnpParamsMap.put("vnp_CreateDate", vnpCreateDate);
+        calendar.add(Calendar.MINUTE, 15);
+        String vnp_ExpireDate = formatter.format(calendar.getTime());
+        vnpParamsMap.put("vnp_ExpireDate", vnp_ExpireDate);
+        return vnpParamsMap;
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/SecurityConfig.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/SecurityConfig.java
new file mode 100644
--- /dev/null	(date 1730910225972)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/SecurityConfig.java	(date 1730910225972)
@@ -0,0 +1,132 @@
+package com.swpproject.koi_care_system.config;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.http.HttpMethod;
+import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.security.oauth2.jose.jws.MacAlgorithm;
+import org.springframework.security.oauth2.jwt.JwtDecoder;
+import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;
+import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;
+import org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;
+import org.springframework.security.web.SecurityFilterChain;
+import org.springframework.web.cors.CorsConfiguration;
+import org.springframework.web.cors.CorsConfigurationSource;
+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
+
+import javax.crypto.spec.SecretKeySpec;
+import java.util.List;
+
+@Configuration
+@EnableWebSecurity
+@EnableMethodSecurity(prePostEnabled = true)
+public class SecurityConfig {
+    @Autowired
+    private OAuth2LoginHandler oAuth2LoginHandler;
+
+    private final String[] PUBLIC_ENDPOINTS = {
+            "/users/register",
+            "/auth/loginKoiCare",
+            "/auth/forgotPassword/**",
+            "/auth/verifyOtp/**",
+            "/auth/resetPassword",
+    };
+
+    @Value("${jwt.signerKey}")
+    protected String signerKey;
+
+    @Bean
+    public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception {
+
+        // Disable CSRF since we are not using session-based authentication
+        httpSecurity.csrf(AbstractHttpConfigurer::disable);
+        httpSecurity.cors(cors -> cors.configurationSource(corsConfigurationSource()));
+
+        // Permit access to public endpoints and protect all others
+        httpSecurity
+                .authorizeHttpRequests(request -> request
+                        // Allow access to Google login page without authentication
+                        .requestMatchers(HttpMethod.POST, PUBLIC_ENDPOINTS).permitAll()
+                        .requestMatchers(HttpMethod.GET, "/auth/verifyEmail",
+                                "/payment/vn-pay-return",
+                                "/v3/api-docs",
+                                "/v3/api-docs/**",
+                                "/oauth2/**",
+                                "/ws/**",
+                                "/swagger-ui.html",
+                                "/swagger-ui/**").permitAll()
+                        .anyRequest().authenticated()
+                );
+        httpSecurity
+                .formLogin(form -> form
+                        .loginPage("/login")
+                        .permitAll())
+                .oauth2Login(oauth -> oauth
+                        .loginPage("https://koi-care-system.vercel.app/login")
+                        .successHandler(oAuth2LoginHandler)
+                        .failureUrl("https://koi-care-system.vercel.app/login?error=true")
+                );
+
+
+
+        // Configure JWT-based security
+        httpSecurity.oauth2ResourceServer(
+                oauth2 -> oauth2.jwt(jwtConfigurer ->
+                        jwtConfigurer.decoder(jwtDecoder())
+                                .jwtAuthenticationConverter(jwtAuthenticationConverter()))
+        );
+
+        // Enable CORS for all domains
+
+        return httpSecurity.build();
+    }
+    @Bean
+    CorsConfigurationSource corsConfigurationSource() {
+        CorsConfiguration configuration = new CorsConfiguration();
+        configuration.setAllowedOrigins(List.of(
+                "https://koi-care-system.vercel.app",
+                "http://localhost:5173"
+        ));
+        configuration.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"));
+        configuration.setAllowedHeaders(List.of("Authorization", "Cache-Control", "Content-Type"));
+        configuration.setAllowCredentials(true);
+        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
+        source.registerCorsConfiguration("/**", configuration);
+        return source;
+    }
+
+
+    @Bean
+    JwtAuthenticationConverter jwtAuthenticationConverter() {
+        // Create JWT granted authorities converter
+        JwtGrantedAuthoritiesConverter jwtGrantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();
+        jwtGrantedAuthoritiesConverter.setAuthorityPrefix("ROLE_");
+
+        // Create JWT authentication converter
+        JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();
+        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(jwtGrantedAuthoritiesConverter);
+        return jwtAuthenticationConverter;
+    }
+
+    @Bean
+    JwtDecoder jwtDecoder() {
+        // Create secret key
+        SecretKeySpec secretKeySpec = new SecretKeySpec(signerKey.getBytes(), "HS512");
+        return NimbusJwtDecoder
+                .withSecretKey(secretKeySpec)
+                .macAlgorithm(MacAlgorithm.HS512)
+                .build();
+    }
+
+    @Bean
+    PasswordEncoder passwordEncoder() {
+        return new BCryptPasswordEncoder(10);
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/OpenApiConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/OpenApiConfig.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/OpenApiConfig.java
new file mode 100644
--- /dev/null	(date 1730910225972)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/OpenApiConfig.java	(date 1730910225972)
@@ -0,0 +1,51 @@
+package com.swpproject.koi_care_system.config;
+
+import io.swagger.v3.oas.annotations.OpenAPIDefinition;
+import io.swagger.v3.oas.annotations.enums.SecuritySchemeIn;
+import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;
+import io.swagger.v3.oas.annotations.info.Contact;
+import io.swagger.v3.oas.annotations.info.Info;
+import io.swagger.v3.oas.annotations.info.License;
+import io.swagger.v3.oas.annotations.security.SecurityScheme;
+import io.swagger.v3.oas.annotations.servers.Server;
+
+@OpenAPIDefinition(
+        info = @Info(
+                contact = @Contact(
+                        name = "Koi Care System",
+                        email = "phuocstore@gmail.com"
+                ),
+                description = "Koi Care documentation for API",
+                title = "Koi Care System API",
+                version = "1.0.0",
+                license = @License(
+                        name = "Koi License",
+                        url = "https://www.koi.com/license"
+                ),
+                termsOfService = "https://www.koi.com/terms"
+        ),
+        servers = {
+                @Server(
+                        description = "Local Server",
+                        url = "http://localhost:8080/api"
+                ),
+                @Server(
+                        description = "Deloy Server",
+                        url = "https://koicaresystemv2.azurewebsites.net/api"
+                ),
+                @Server(
+                        description = "Deloy Digital Server",
+                        url = "http://146.190.84.154:8080"
+                )
+        }
+)
+@SecurityScheme(
+        name = "bearerAuth",
+        description = "JWT Token",
+        scheme = "bearer",
+        type = SecuritySchemeType.HTTP,
+        bearerFormat = "JWT",
+        in = SecuritySchemeIn.HEADER
+)
+public class OpenApiConfig {
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/OAuth2LoginHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/OAuth2LoginHandler.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/OAuth2LoginHandler.java
new file mode 100644
--- /dev/null	(date 1730910225971)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/config/OAuth2LoginHandler.java	(date 1730910225971)
@@ -0,0 +1,70 @@
+package com.swpproject.koi_care_system.config;
+
+import com.swpproject.koi_care_system.mapper.UserMapper;
+import com.swpproject.koi_care_system.models.User;
+import com.swpproject.koi_care_system.repository.UserRepository;
+import com.swpproject.koi_care_system.service.profile.IProfileService;
+import com.swpproject.koi_care_system.utils.JwtUtils;
+import jakarta.servlet.ServletException;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
+import org.springframework.security.oauth2.core.user.DefaultOAuth2User;
+import org.springframework.security.web.DefaultRedirectStrategy;
+import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;
+import org.springframework.stereotype.Component;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Map;
+
+@Slf4j
+@Component
+@RequiredArgsConstructor
+public class OAuth2LoginHandler extends SavedRequestAwareAuthenticationSuccessHandler {
+
+    private final UserRepository userRepository;
+    private final IProfileService profileService;
+    private final JwtUtils jwtUtils;
+    private final UserMapper userMapper;
+
+    @Override
+    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws ServletException, IOException {
+        OAuth2AuthenticationToken token = (OAuth2AuthenticationToken) authentication;
+        if ("google".equals(token.getAuthorizedClientRegistrationId())) {
+            DefaultOAuth2User principal = (DefaultOAuth2User) authentication.getPrincipal();
+            Map<String, Object> attributes = principal.getAttributes();
+            String email = attributes.getOrDefault("email", "").toString();
+            String name = attributes.getOrDefault("name", "").toString();
+            String imageUrl = attributes.getOrDefault("picture", "").toString();
+            User user = userRepository.findByEmail(email).orElseGet(() -> {
+                User newUser = userMapper.maptoUserGoogle(email, name);
+                newUser.setPassword(JwtUtils.generateRandomPassword());
+                userRepository.save(newUser);
+                newUser.setBlogs(new HashSet<>());
+                newUser.setReminders(new ArrayList<>());
+                newUser.setNotifications(new ArrayList<>());
+                newUser.setOrders(new ArrayList<>());
+                newUser.setKoiPondList(new ArrayList<>());
+                newUser.setUserProfile(profileService.createProfileOauth(newUser, imageUrl));
+                return userRepository.save(newUser);
+            });
+
+            String jwtToken = jwtUtils.generateToken(user);
+            String role = user.getRole().toString();
+            String username = user.getUsername();
+            long id = user.getId();
+
+            this.setDefaultTargetUrl("https://koi-care-system.vercel.app/login?token=" + jwtToken + "&role=" + role + "&username=" + username + "&id=" + id);
+            this.setAlwaysUseDefaultTargetUrl(true);
+        }
+
+        new DefaultRedirectStrategy().sendRedirect(request, response, this.getDefaultTargetUrl());
+        this.setAlwaysUseDefaultTargetUrl(true);
+        super.onAuthenticationSuccess(request, response, authentication);
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/ProfileStatus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/ProfileStatus.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/ProfileStatus.java
new file mode 100644
--- /dev/null	(date 1730910225980)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/ProfileStatus.java	(date 1730910225980)
@@ -0,0 +1,6 @@
+package com.swpproject.koi_care_system.enums;
+
+public enum ProfileStatus {
+    NORMAL,
+    PREMIUM,
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/OrderStatus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/OrderStatus.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/OrderStatus.java
new file mode 100644
--- /dev/null	(date 1730910225980)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/OrderStatus.java	(date 1730910225980)
@@ -0,0 +1,8 @@
+package com.swpproject.koi_care_system.enums;
+
+public enum OrderStatus {
+    PENDING,
+    PROCESSING,
+    DELIVERED,
+    CANCELLED
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/LogCategory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/LogCategory.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/LogCategory.java
new file mode 100644
--- /dev/null	(date 1730910225980)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/LogCategory.java	(date 1730910225980)
@@ -0,0 +1,11 @@
+package com.swpproject.koi_care_system.enums;
+
+public enum LogCategory {
+    OTHER,
+    WATER_CHANGE,
+    KOI_TREATMENT,
+    WATER_TREATMENT,
+    POND_MODIFICATION,
+    POPULATION_CHANGE,
+    EXPERIENCE,
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/ErrorCode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/ErrorCode.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/ErrorCode.java
new file mode 100644
--- /dev/null	(date 1730910225979)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/ErrorCode.java	(date 1730910225979)
@@ -0,0 +1,41 @@
+package com.swpproject.koi_care_system.enums;
+
+import lombok.Getter;
+import lombok.experimental.FieldDefaults;
+import org.springframework.http.HttpStatus;
+
+@Getter
+@FieldDefaults(makeFinal = true)
+public enum ErrorCode {
+    USER_EXISTED(1001, "User Existed", HttpStatus.BAD_REQUEST),
+    USERNAME_INVALID(1002, "Username must be at least 3 character", HttpStatus.BAD_REQUEST),
+    USER_PASSWORD(1003, "User password must at least 8 character", HttpStatus.BAD_REQUEST),
+    USER_NOT_EXISTED(1004, "User not available", HttpStatus.NOT_FOUND),
+    UNAUTHENTICATED(1005, "User unauthenticated", HttpStatus.UNAUTHORIZED),
+    UNAUTHORIZED(1012, "Do Not Have Permission", HttpStatus.FORBIDDEN),
+    NO_ROLES(1006, "User has no roles", HttpStatus.FORBIDDEN),
+    EMAIL_EXISTED(1007, "Email Existed", HttpStatus.BAD_REQUEST),
+    SENDMAIL_FAILED(1008, "Send mail failed", HttpStatus.INTERNAL_SERVER_ERROR),
+    INVALID_TOKEN(1009, "Invalid Token", HttpStatus.BAD_REQUEST),
+    TAG_EXISTED(1009, "Tag Existed", HttpStatus.BAD_REQUEST),
+    TAG_DESCRIPTION_EXISTED(1010, "Tag Duplicated Description", HttpStatus.BAD_REQUEST),
+    INVALID_OTP(1011, "Invalid OTP for email", HttpStatus.BAD_REQUEST),
+    INVALID_CREDENTIALS(1012, "Incorrect password", HttpStatus.BAD_REQUEST),
+    REMARK_NOT_FOUND(1013, "Remark Not Found", HttpStatus.NOT_FOUND),
+    KOI_FISH_NOT_FOUND(1014, "Koi Fish Not Found", HttpStatus.NOT_FOUND),
+    GROWTH_HISTORY_NOT_FOUND(1015, "Growth History Not Found", HttpStatus.NOT_FOUND),
+    PROFILE_NOT_FOUND(1016, "Profile Not Found", HttpStatus.NOT_FOUND),
+    WRONG_PASSWORD(1017, "Wrong Password", HttpStatus.BAD_REQUEST),
+    PASSWORD_NOT_MATCH(1018, "Password are not the same", HttpStatus.BAD_REQUEST),
+    WATER_NOT_FOUND(1019, "Water Parameter Not Found", HttpStatus.NOT_FOUND),
+    KOI_POND_NOT_FOUND(1020, "Koi Pond Not Found", HttpStatus.NOT_FOUND);
+    private int code;
+    private String message;
+    private HttpStatus status;
+
+    ErrorCode(int code, String message, HttpStatus status) {
+        this.code = code;
+        this.message = message;
+        this.status = status;
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/Role.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/Role.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/Role.java
new file mode 100644
--- /dev/null	(date 1730910225980)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/Role.java	(date 1730910225980)
@@ -0,0 +1,9 @@
+package com.swpproject.koi_care_system.enums;
+
+public enum Role {
+    ADMIN,
+    MEMBER,
+    GUEST,
+    SHOP
+}
+
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/ReminderRepeat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/ReminderRepeat.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/ReminderRepeat.java
new file mode 100644
--- /dev/null	(date 1730910225980)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/ReminderRepeat.java	(date 1730910225980)
@@ -0,0 +1,12 @@
+package com.swpproject.koi_care_system.enums;
+
+import lombok.Getter;
+import lombok.experimental.FieldDefaults;
+
+@Getter
+@FieldDefaults(makeFinal = true)
+public enum ReminderRepeat {
+    ONE_TIME,
+    DAILY,
+    WEEKLY,
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/RangeParameter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/RangeParameter.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/RangeParameter.java
new file mode 100644
--- /dev/null	(date 1730910225980)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/RangeParameter.java	(date 1730910225980)
@@ -0,0 +1,37 @@
+package com.swpproject.koi_care_system.enums;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.experimental.FieldDefaults;
+
+@Getter
+@AllArgsConstructor
+@FieldDefaults(makeFinal = true)
+public enum RangeParameter {
+    NO2("NO2", 0, 0.1),
+    NO3("NO3", 0, 20),
+    PO4("PO4", 0, 0.035),
+    NH4("NH4", 0, 0.1),
+    GH("GH", 0, 21),
+    O2("O2", 6.501, 50),
+    TEMPERATURE("TEMPERATURE", 4.01, 26),
+    PH("PH", 6.9, 8),
+    KH("KH", 4, 49),
+    CO2("CO2", 4.001, 35),
+    SALT("SALT", 0, 0.1),
+    CHLORINE("CHLORINE", 0, 0.001),
+    OUTDOORTEMP("OUTDOORTEMP", -40, 40),
+    ;
+
+    private String name;
+    private double lowValue;
+    private double highValue;
+
+    public boolean isLow(double value) {
+        return value < lowValue;
+    }
+
+    public boolean isHigh(double value) {
+        return value > highValue;
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/PromotionStatus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/PromotionStatus.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/PromotionStatus.java
new file mode 100644
--- /dev/null	(date 1730910225980)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/PromotionStatus.java	(date 1730910225980)
@@ -0,0 +1,9 @@
+package com.swpproject.koi_care_system.enums;
+
+public enum PromotionStatus {
+    PENDING,
+    ACCEPTED,
+    PROCESSING,
+    ENDED,
+    REJECTED
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/UserDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/UserDTO.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/UserDTO.java
new file mode 100644
--- /dev/null	(date 1730910225979)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/UserDTO.java	(date 1730910225979)
@@ -0,0 +1,20 @@
+package com.swpproject.koi_care_system.dto;
+
+import com.swpproject.koi_care_system.enums.Role;
+import jakarta.validation.constraints.Email;
+import lombok.*;
+import lombok.experimental.FieldDefaults;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+@Builder
+public class UserDTO {
+    Long id;
+    String username;
+    @Email
+    String email;
+    Role role;
+    boolean status;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/TagDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/TagDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/TagDto.java
new file mode 100644
--- /dev/null	(date 1730910225979)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/TagDto.java	(date 1730910225979)
@@ -0,0 +1,17 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.AccessLevel;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+import lombok.experimental.FieldDefaults;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class TagDto {
+    int tagId;
+    String tagName;
+    String tagDescription;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/SubscribePlanDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/SubscribePlanDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/SubscribePlanDto.java
new file mode 100644
--- /dev/null	(date 1730910225979)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/SubscribePlanDto.java	(date 1730910225979)
@@ -0,0 +1,25 @@
+package com.swpproject.koi_care_system.dto;
+
+import com.swpproject.koi_care_system.enums.ProfileStatus;
+import jakarta.persistence.EnumType;
+import jakarta.persistence.Enumerated;
+import lombok.AccessLevel;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDate;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class SubscribePlanDto {
+    Long id;
+    LocalDate startDate;
+    LocalDate expiredDate;
+    ProfileStatus subscribe;
+    UserProfileDto userProfileDto;
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ReportByDateDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ReportByDateDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ReportByDateDto.java
new file mode 100644
--- /dev/null	(date 1730910225979)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ReportByDateDto.java	(date 1730910225979)
@@ -0,0 +1,15 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.Builder;
+import lombok.Data;
+
+import java.util.List;
+
+@Data
+@Builder
+public class ReportByDateDto {
+    List<KoiFishDto> koiFishs;
+    List<KoiPondDto> koiPonds;
+    List<WaterParameterDto> waterParameters;
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/ChatUserStatus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/ChatUserStatus.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/ChatUserStatus.java
new file mode 100644
--- /dev/null	(date 1730910225979)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/enums/ChatUserStatus.java	(date 1730910225979)
@@ -0,0 +1,5 @@
+package com.swpproject.koi_care_system.enums;
+
+public enum ChatUserStatus {
+    ONLINE,OFFLINE,
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/WaterParameterDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/WaterParameterDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/WaterParameterDto.java
new file mode 100644
--- /dev/null	(date 1730910225979)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/WaterParameterDto.java	(date 1730910225979)
@@ -0,0 +1,32 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class WaterParameterDto {
+    Long id;
+    String createDateTime;
+    double nitrite;
+    double nitrate;  // NO3
+    double phosphate; // PO4
+    double ammonium;  // NH4
+    double hardness;  // GH
+    double oxygen;    // O2
+    double temperature;
+    double phValue;
+    double carbonHardness;  // KH
+    double carbonDioxide;  // CO2
+    double salt;
+    double totalChlorine;
+    double temp;
+    double amountFed;
+    String note;
+    String koiPondName;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/VnPayDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/VnPayDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/VnPayDto.java
new file mode 100644
--- /dev/null	(date 1730910225979)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/VnPayDto.java	(date 1730910225979)
@@ -0,0 +1,15 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.*;
+import lombok.experimental.FieldDefaults;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+@Builder
+public class VnPayDto {
+    public String message;
+    public String paymentUrl;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/UserProfileDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/UserProfileDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/UserProfileDto.java
new file mode 100644
--- /dev/null	(date 1730910225979)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/UserProfileDto.java	(date 1730910225979)
@@ -0,0 +1,30 @@
+package com.swpproject.koi_care_system.dto;
+
+import com.swpproject.koi_care_system.enums.ProfileStatus;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDate;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class UserProfileDto {
+    long id;
+    String name;
+    String email;
+    String phone;
+    String address;
+    String gender;
+    String avatar;
+    String bio;
+    LocalDate dateOfBirth;
+    LocalDate createdDate;
+    ProfileStatus status;
+    String role;
+    Long userId;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ProductDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ProductDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ProductDto.java
new file mode 100644
--- /dev/null	(date 1730910225978)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ProductDto.java	(date 1730910225978)
@@ -0,0 +1,25 @@
+package com.swpproject.koi_care_system.dto;
+
+import com.swpproject.koi_care_system.models.Category;
+import com.swpproject.koi_care_system.models.Supplier;
+import lombok.Data;
+
+import java.math.BigDecimal;
+import java.util.List;
+
+@Data
+public class ProductDto {
+    private Long id;
+    private String name;
+    private String brand;
+    private BigDecimal price;
+    private int inventory;
+    private String description;
+    private String description_detail;
+    private Category category;
+    private Supplier supplier;
+    private List<ImageDto> images;
+    private List<PromotionDto> promotions;
+    private Double rating;
+    private Boolean status;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ProductCategoryReportDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ProductCategoryReportDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ProductCategoryReportDto.java
new file mode 100644
--- /dev/null	(date 1730910225978)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ProductCategoryReportDto.java	(date 1730910225978)
@@ -0,0 +1,18 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.*;
+import lombok.experimental.FieldDefaults;
+
+import java.math.BigDecimal;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class ProductCategoryReportDto {
+    String categoryName;
+    long quantity;
+    Double percent;
+    BigDecimal totalPrice;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/PaymentDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/PaymentDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/PaymentDto.java
new file mode 100644
--- /dev/null	(date 1730910225978)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/PaymentDto.java	(date 1730910225978)
@@ -0,0 +1,16 @@
+package com.swpproject.koi_care_system.dto;
+
+import com.swpproject.koi_care_system.enums.OrderStatus;
+import lombok.Data;
+
+import java.time.LocalDateTime;
+
+@Data
+public class PaymentDto {
+    private LocalDateTime createDate;
+    private Long amount;
+    private String status;
+    private String invoiceCode;
+    private String transactionCode;
+    private Long orderId;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/OriginStateOfFishDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/OriginStateOfFishDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/OriginStateOfFishDto.java
new file mode 100644
--- /dev/null	(date 1730910225978)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/OriginStateOfFishDto.java	(date 1730910225978)
@@ -0,0 +1,20 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.Data;
+
+import java.time.LocalDate;
+
+@Data
+public class OriginStateOfFishDto {
+    private Long id;
+    private String name;
+    private String physique;
+    private LocalDate pondDate;
+    private int age;
+    private Double length;
+    private Double weight;
+    private String gender;
+    private String variety;
+    private Long koiFishId;
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ReminderDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ReminderDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ReminderDto.java
new file mode 100644
--- /dev/null	(date 1730910225979)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ReminderDto.java	(date 1730910225979)
@@ -0,0 +1,20 @@
+package com.swpproject.koi_care_system.dto;
+
+import com.swpproject.koi_care_system.enums.ReminderRepeat;
+import lombok.AccessLevel;
+import lombok.Data;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDateTime;
+
+@Data
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class ReminderDto {
+    long id;
+    String title;
+    String description;
+    LocalDateTime dateTime;
+    ReminderRepeat repeatInterval;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/RemarkDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/RemarkDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/RemarkDto.java
new file mode 100644
--- /dev/null	(date 1730910225978)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/RemarkDto.java	(date 1730910225978)
@@ -0,0 +1,21 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDateTime;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class RemarkDto {
+    Long id;
+    LocalDateTime createDate;
+    String title;
+    String note;
+    Long koiFishId;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/PromotionDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/PromotionDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/PromotionDto.java
new file mode 100644
--- /dev/null	(date 1730910225978)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/PromotionDto.java	(date 1730910225978)
@@ -0,0 +1,17 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.Data;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+
+@Data
+public class PromotionDto {
+    private Long id;
+    private String name;
+    private Double discountRate;
+    private String description;
+    private LocalDateTime startDate;
+    private LocalDateTime endDate;
+    private String status;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ProductReportDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ProductReportDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ProductReportDto.java
new file mode 100644
--- /dev/null	(date 1730910225978)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ProductReportDto.java	(date 1730910225978)
@@ -0,0 +1,21 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.*;
+import lombok.experimental.FieldDefaults;
+
+import java.math.BigDecimal;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class ProductReportDto {
+    Long id;
+    String imageUrl;
+    String productName;
+    String categoryName;
+    long quantity;
+    Double percent;
+    BigDecimal totalPrice;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/KoiPondDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/KoiPondDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/KoiPondDto.java
new file mode 100644
--- /dev/null	(date 1730910225977)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/KoiPondDto.java	(date 1730910225977)
@@ -0,0 +1,21 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.*;
+
+import java.time.LocalDate;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@Builder
+public class KoiPondDto {
+    private Long id;
+    private String name;
+    private LocalDate createDate;
+    private int drainCount;
+    private int volume;
+    private Double depth;
+    private int skimmer;
+    private Double pumpCapacity;
+    private String imageUrl;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/KoiFishDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/KoiFishDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/KoiFishDto.java
new file mode 100644
--- /dev/null	(date 1730910225977)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/KoiFishDto.java	(date 1730910225977)
@@ -0,0 +1,30 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.time.LocalDate;
+
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@Builder
+public class KoiFishDto {
+    private Long id;
+    private String name;
+    private String physique;
+    private int age;
+    private Double length;
+    private Double weight;
+    private String gender;
+    private String variety;
+    private LocalDate pondDate;
+    private String breeder;
+    private Double price;
+    private String imageUrl;
+    private KoiPondDto koiPond;
+    private String status;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/IssueTypeDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/IssueTypeDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/IssueTypeDto.java
new file mode 100644
--- /dev/null	(date 1730910225977)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/IssueTypeDto.java	(date 1730910225977)
@@ -0,0 +1,11 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.Data;
+
+@Data
+public class IssueTypeDto {
+    private String id;
+    private String conditionType;
+    private String parameterType;
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/IssueDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/IssueDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/IssueDto.java
new file mode 100644
--- /dev/null	(date 1730910225977)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/IssueDto.java	(date 1730910225977)
@@ -0,0 +1,14 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.AccessLevel;
+import lombok.Data;
+import lombok.experimental.FieldDefaults;
+
+@Data
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class IssueDto {
+    Long id;
+    String name;
+    String description;
+    Long issueTypeId;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/OrderItemDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/OrderItemDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/OrderItemDto.java
new file mode 100644
--- /dev/null	(date 1730910225978)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/OrderItemDto.java	(date 1730910225978)
@@ -0,0 +1,15 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.Data;
+
+import java.math.BigDecimal;
+
+@Data
+public class OrderItemDto {
+    private Long productId;
+    private String productName;
+    private Long quantity;
+    private BigDecimal price;
+    private String imageUrl;
+    private String category;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/OrderDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/OrderDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/OrderDto.java
new file mode 100644
--- /dev/null	(date 1730910225978)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/OrderDto.java	(date 1730910225978)
@@ -0,0 +1,20 @@
+package com.swpproject.koi_care_system.dto;
+import lombok.Data;
+
+import java.math.BigDecimal;
+import java.time.LocalDateTime;
+import java.util.List;
+
+@Data
+public class OrderDto {
+    private Long id;
+    private Long userId;
+    private LocalDateTime orderDate;
+    private BigDecimal totalAmount;
+    private String address;
+    private String phone;
+    private String recipientName;
+    private String note;
+    private String status;
+    private List<OrderItemDto> items;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/NotificationDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/NotificationDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/NotificationDto.java
new file mode 100644
--- /dev/null	(date 1730910225978)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/NotificationDto.java	(date 1730910225978)
@@ -0,0 +1,19 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.AccessLevel;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDateTime;
+
+@Data
+@NoArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class NotificationDto {
+    Long id;
+    String title;
+    String message;
+    boolean delivered;
+    LocalDateTime dateTime;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/LogDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/LogDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/LogDto.java
new file mode 100644
--- /dev/null	(date 1730910225977)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/LogDto.java	(date 1730910225977)
@@ -0,0 +1,23 @@
+package com.swpproject.koi_care_system.dto;
+
+import com.swpproject.koi_care_system.enums.LogCategory;
+import lombok.AccessLevel;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDateTime;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class LogDto {
+    int logId;
+    String logTitle;
+    LocalDateTime logDate;
+    LogCategory category;
+    String note;
+    String koiPondName;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/CartItemDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/CartItemDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/CartItemDto.java
new file mode 100644
--- /dev/null	(date 1730910225976)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/CartItemDto.java	(date 1730910225976)
@@ -0,0 +1,13 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.Data;
+
+import java.math.BigDecimal;
+
+@Data
+public class CartItemDto {
+    private Long itemId;
+    private Integer quantity;
+    private BigDecimal unitPrice;
+    private ProductDto product;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/CartDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/CartDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/CartDto.java
new file mode 100644
--- /dev/null	(date 1730910225976)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/CartDto.java	(date 1730910225976)
@@ -0,0 +1,12 @@
+package com.swpproject.koi_care_system.dto;
+import lombok.Data;
+
+import java.math.BigDecimal;
+import java.util.Set;
+
+@Data
+public class CartDto {
+    private Long cartId;
+    private Set<CartItemDto> items;
+    private BigDecimal totalAmount;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/BlogDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/BlogDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/BlogDto.java
new file mode 100644
--- /dev/null	(date 1730910225976)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/BlogDto.java	(date 1730910225976)
@@ -0,0 +1,25 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.AccessLevel;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDate;
+import java.util.Set;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class BlogDto {
+    String blogId;
+    String blogTitle;
+    String blogContent;
+    String blogImage;
+    LocalDate blogDate;
+    UserDTO user;
+    Set<TagDto> tags;
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ImageDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ImageDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ImageDto.java
new file mode 100644
--- /dev/null	(date 1730910225977)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/ImageDto.java	(date 1730910225977)
@@ -0,0 +1,9 @@
+package com.swpproject.koi_care_system.dto;
+import lombok.Data;
+
+@Data
+public class ImageDto {
+    private Long id;
+    private String fileName;
+    private String downloadUrl;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/GrowthHistoryDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/GrowthHistoryDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/GrowthHistoryDto.java
new file mode 100644
--- /dev/null	(date 1730910225977)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/GrowthHistoryDto.java	(date 1730910225977)
@@ -0,0 +1,24 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class GrowthHistoryDto {
+    Long id;
+    LocalDateTime createDate;
+    String physique;
+    Double length;
+    Double weight;
+    String imageUrl;
+    String koiFishName;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/FishGrowthReportDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/FishGrowthReportDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/FishGrowthReportDto.java
new file mode 100644
--- /dev/null	(date 1730910225977)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/FishGrowthReportDto.java	(date 1730910225977)
@@ -0,0 +1,19 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.*;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDateTime;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@Builder
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class FishGrowthReportDto {
+    Long id;
+    LocalDateTime createDate;
+    String physique;
+    Double length;
+    Double weight;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/FeedbackDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/FeedbackDto.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/FeedbackDto.java
new file mode 100644
--- /dev/null	(date 1730910225977)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/dto/FeedbackDto.java	(date 1730910225977)
@@ -0,0 +1,18 @@
+package com.swpproject.koi_care_system.dto;
+
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+@Getter
+@Setter
+@NoArgsConstructor
+public class FeedbackDto {
+    private Long id;
+    private int star;
+    private String comment;
+    private String username;
+    private String imageUrl;
+    private Long userId;
+    private Long product_id;
+}
Index: Backend/koi_care_system/src/main/resources/templates/reminderstemplate.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/resources/templates/reminderstemplate.html b/Backend/koi_care_system/src/main/resources/templates/reminderstemplate.html
new file mode 100644
--- /dev/null	(date 1730910226007)
+++ b/Backend/koi_care_system/src/main/resources/templates/reminderstemplate.html	(date 1730910226007)
@@ -0,0 +1,46 @@
+<!DOCTYPE html>
+<html xmlns:th="http://www.thymeleaf.org">
+<head>
+    <meta charset="UTF-8">
+    <title>Missed Reminder Notification</title>
+</head>
+<body style="margin: 0; padding: 20px; background-color: #1e1e1e; color: #f4f4f4; font-family: Arial, sans-serif;">
+<table role="presentation" width="100%" cellpadding="0" cellspacing="0"
+       style="max-width: 600px; margin: 0 auto; background-color: #282828; border: 2px solid #c70000; border-radius: 8px; padding: 20px;">
+    <tr>
+        <td align="center" style="padding: 10px;">
+            <h1 style="font-size: 24px; color: #c70000; margin: 0;">
+                Missed Reminder Notification
+            </h1>
+        </td>
+    </tr>
+    <tr>
+        <td style="padding: 20px; background-color: #333333; border-radius: 5px;">
+            <p style="font-size: 16px; color: #f4f4f4; margin: 0; padding: 5px 0;">
+                <strong style="color: #c70000;">Title:</strong> <span th:text="${title}">[Title]</span>
+            </p>
+            <p style="font-size: 16px; color: #f4f4f4; margin: 0; padding: 5px 0;">
+                <strong style="color: #c70000;">Date & Time:</strong> <span th:text="${dateTime}">[Date & Time]</span>
+            </p>
+            <p style="font-size: 16px; color: #f4f4f4; margin: 0; padding: 5px 0;">
+                <strong style="color: #c70000;">Repeat Interval:</strong> <span th:text="${repeatInterval}">[Repeat Interval]</span>
+            </p>
+            <p style="font-size: 16px; color: #f4f4f4; margin: 0; padding: 5px 0;">
+                <strong style="color: #c70000;">Repeat Interval:</strong> <span th:text="${description}">[Repeat Interval]</span>
+            </p>
+        </td>
+    </tr>
+    <tr>
+        <td style="padding: 20px;">
+            <p style="color: #c4c4c4; font-size: 14px;">
+                It seems like you missed this reminder. Please review your schedule to stay on track!
+            </p>
+            <a href="#" th:href="${url}"
+               style="display: inline-block; padding: 12px 25px; font-size: 16px; color: #fff; background-color: #c70000; text-align: center; text-decoration: none; border-radius: 5px; margin-top: 20px;">
+                View All Reminders
+            </a>
+        </td>
+    </tr>
+</table>
+</body>
+</html>
Index: Backend/koi_care_system/src/main/resources/templates/reminders.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/resources/templates/reminders.html b/Backend/koi_care_system/src/main/resources/templates/reminders.html
new file mode 100644
--- /dev/null	(date 1730910226007)
+++ b/Backend/koi_care_system/src/main/resources/templates/reminders.html	(date 1730910226007)
@@ -0,0 +1,56 @@
+<!DOCTYPE html>
+<html>
+<head>
+    <title>Reminder App</title>
+    <script src="https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.5.0/sockjs.min.js"></script>
+    <script src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"></script>
+</head>
+<body>
+<h1>Nhắc Nhở</h1>
+
+<form id="reminderForm">
+    <input type="text" id="title" placeholder="Tiêu đề" required/>
+    <input type="datetime-local" id="dateTime" required/>
+    <button type="submit">Tạo Nhắc Nhở</button>
+</form>
+
+<div id="notifications"></div>
+
+<script>
+    const stompClient = Stomp.over(new SockJS('/api/ws'));
+
+    stompClient.connect({}, function(frame) {
+        console.log('Connected: ' + frame);
+        stompClient.subscribe('/topic/notifications', function(notification) {
+            showNotification(notification.body);
+        });
+    });
+
+    function showNotification(message) {
+        const notificationsDiv = document.getElementById('notifications');
+        const newNotification = document.createElement('div');
+        newNotification.innerText = message;
+        notificationsDiv.appendChild(newNotification);
+    }
+
+    document.getElementById('reminderForm').onsubmit = function(event) {
+        event.preventDefault();
+        const title = document.getElementById('title').value;
+        const dateTime = document.getElementById('dateTime').value;
+
+        fetch('/reminders', {
+            method: 'POST',
+            headers: {
+                'Content-Type': 'application/json'
+            },
+            body: JSON.stringify({ title, dateTime })
+        }).then(response => {
+            if (response.ok) {
+                alert('Nhắc nhở đã được tạo!');
+                document.getElementById('reminderForm').reset();
+            }
+        });
+    };
+</script>
+</body>
+</html>
Index: Backend/koi_care_system/src/main/resources/templates/otptemplate.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/resources/templates/otptemplate.html b/Backend/koi_care_system/src/main/resources/templates/otptemplate.html
new file mode 100644
--- /dev/null	(date 1730910226007)
+++ b/Backend/koi_care_system/src/main/resources/templates/otptemplate.html	(date 1730910226007)
@@ -0,0 +1,72 @@
+<table class="body-wrap"
+       style="font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; box-sizing: border-box; font-size: 14px; width: 100%; background-color: #f6f6f6; margin: 0;"
+       bgcolor="#f6f6f6" xmlns:th="http://www.thymeleaf.org">
+    <tbody>
+    <tr>
+        <td valign="top"></td>
+        <td class="container" width="600" valign="top">
+            <div class="content" style="max-width: 600px; padding: 20px;">
+                <table class="main" width="100%" cellpadding="0" cellspacing="0" bgcolor="#fff">
+                    <tbody>
+                    <tr>
+                        <td class=""
+                            style="font-size: 16px; color: #fff; text-align: center; background-color: #f1556c; padding: 20px;">
+                            <h2 style="font-size:32px;color:#fff;">Koi Care Company</h2> <br>
+                            <span style="margin-top: 10px;display: block;">Your One-Time Password (OTP)</span>
+                        </td>
+                    </tr>
+                    <tr>
+                        <td class="content-wrap" style="padding: 20px;" valign="top">
+                            <table width="100%">
+                                <tbody>
+                                <tr>
+                                    <td class="content-block" valign="top">
+                                        Hello <strong th:text="${name}">Name</strong>,
+                                    </td>
+                                </tr>
+                                <tr>
+                                    <td class="content-block" valign="top">
+                                        <p>Please use the OTP below to complete your verification:</p>
+                                    </td>
+                                </tr>
+                                <tr>
+                                    <td class="content-block" valign="top" style="text-align: center;">
+                                        <p style="font-size: 22px; font-weight: bold; color: #333; margin:30px;">
+                                            <strong th:text="${otp}"></strong>
+                                        </p>
+                                        <p>Note: This OTP is valid for only 5 minutes.</p>
+                                        <p>If you did not request this OTP, please ignore this email.</p>
+                                    </td>
+                                </tr>
+                                <tr>
+                                    <td class="content-block" valign="top" style="text-align: center;">
+                                        <img src="https://koicaresystemv3.blob.core.windows.net/koicarestorage/Email.jpg"
+                                             alt="OTP Verification Image"
+                                             style="width: 300px; display: block; margin: 0 auto 35px;">
+                                        <p style="margin-top: 20px; color: #333;">Thanks for choosing <b>Koi Care
+                                            Company</b>.</p>
+                                    </td>
+                                </tr>
+                                </tbody>
+                            </table>
+                            <div class="footer" style="color: #999; padding: 20px;">
+                                <table width="100%">
+                                    <tbody>
+                                    <tr>
+                                        <td class="aligncenter content-block" align="center" style="padding-top: 10px;">
+                                            &copy; Koi Care Company. All rights reserved.
+                                        </td>
+                                    </tr>
+                                    </tbody>
+                                </table>
+                            </div>
+                        </td>
+                    </tr>
+                    </tbody>
+                </table>
+            </div>
+        </td>
+        <td valign="top"></td>
+    </tr>
+    </tbody>
+</table>
\ No newline at end of file
Index: Backend/koi_care_system/src/main/resources/templates/login.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/resources/templates/login.html b/Backend/koi_care_system/src/main/resources/templates/login.html
new file mode 100644
--- /dev/null	(date 1730910226007)
+++ b/Backend/koi_care_system/src/main/resources/templates/login.html	(date 1730910226007)
@@ -0,0 +1,32 @@
+<!DOCTYPE html>
+<html xmlns:th="http://www.thymeleaf.org">
+<head>
+    <title>Login</title>
+</head>
+<body>
+<h1>Login</h1>
+
+<!-- Form for normal username/password login -->
+<form th:action="@{/login}" method="post">
+    <div>
+        <label for="username">Username:</label>
+        <input type="text" id="username" name="username" required>
+    </div>
+    <div>
+        <label for="password">Password:</label>
+        <input type="password" id="password" name="password" required>
+    </div>
+    <div>
+        <button type="submit">Login</button>
+    </div>
+</form>
+
+<!-- OAuth2 options (Google, GitHub) -->
+<div>
+    <h3>Or login with:</h3>
+    <a th:href="@{/oauth2/authorization/google}">Login with Google</a>
+    <a th:href="@{/oauth2/authorization/github}">Login with GitHub</a>
+</div>
+
+</body>
+</html>
Index: Backend/koi_care_system/src/main/resources/templates/emailtemplate.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/resources/templates/emailtemplate.html b/Backend/koi_care_system/src/main/resources/templates/emailtemplate.html
new file mode 100644
--- /dev/null	(date 1730910226006)
+++ b/Backend/koi_care_system/src/main/resources/templates/emailtemplate.html	(date 1730910226006)
@@ -0,0 +1,67 @@
+<table class="body-wrap"
+       style="font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; box-sizing: border-box; font-size: 14px; width: 100%; background-color: #f6f6f6; margin: 0;"
+       bgcolor="#f6f6f6" xmlns:th="http://www.thymeleaf.org">
+    <tbody>
+    <tr>
+        <td valign="top"></td>
+        <td class="container" width="600" valign="top">
+            <div class="content" style="max-width: 600px; padding: 20px;">
+                <table class="main" width="100%" cellpadding="0" cellspacing="0" bgcolor="#fff">
+                    <tbody>
+                    <tr>
+                        <td class=""
+                            style="font-size: 16px; color: #fff; text-align: center; background-color: #f1556c; padding: 20px;">
+                            <h2 style="font-size:32px;color:#fff;">Koi Care Company</h2> <br>
+                            <span style="margin-top: 10px;display: block;">Please Verify Your Email</span>
+                        </td>
+                    </tr>
+                    <tr>
+                        <td class="content-wrap" style="padding: 20px;" valign="top">
+                            <table width="100%">
+                                <tbody>
+                                <tr>
+                                    <td class="content-block" valign="top">
+                                        Hello <strong th:text="${name}">Name</strong>,
+                                    </td>
+                                </tr>
+                                <tr>
+                                    <td class="content-block" valign="top">
+                                        <p>There's just one more tiny step you need to take to achieve all these amazing
+                                            things. Please click below to verify your new account:</p>
+                                    </td>
+                                </tr>
+                                <tr>
+                                    <td class="content-block" valign="top" style="text-align: center;">
+                                        <img src="https://koicaresystemv3.blob.core.windows.net/koicarestorage/Email.jpg"
+                                             alt="Welcome Image"
+                                             style="width: 300px; display: block; margin: 0 auto 35px;">
+                                        <a class="btn-primary" th:href="${url}"
+                                           style="color: #FFF; text-decoration: none; font-weight: bold; background-color: #f1556c; padding: 8px 16px; border-radius: 5px;">Verify
+                                            My Account</a>
+                                        <p style="margin-top: 20px; color: #333;">Thanks for choosing <b>Our</b>
+                                            Company.</p>
+                                    </td>
+                                </tr>
+                                </tbody>
+                            </table>
+                            <div class="footer" style="color: #999; padding: 20px;">
+                                <table width="100%">
+                                    <tbody>
+                                    <tr>
+                                        <td class="aligncenter content-block" align="center" style="padding-top: 10px;">
+                                            &copy; Koi Care Company. All rights reserved.
+                                        </td>
+                                    </tr>
+                                    </tbody>
+                                </table>
+                            </div>
+                        </td>
+                    </tr>
+                    </tbody>
+                </table>
+            </div>
+        </td>
+        <td valign="top"></td>
+    </tr>
+    </tbody>
+</table>
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/imageBlobStorage/ImageStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/imageBlobStorage/ImageStorage.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/imageBlobStorage/ImageStorage.java
new file mode 100644
--- /dev/null	(date 1730910225999)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/imageBlobStorage/ImageStorage.java	(date 1730910225999)
@@ -0,0 +1,13 @@
+package com.swpproject.koi_care_system.service.imageBlobStorage;
+
+import org.springframework.web.multipart.MultipartFile;
+
+import java.io.IOException;
+import java.util.List;
+
+public interface ImageStorage {
+    String uploadImage(MultipartFile file) throws IOException;
+    List<String> uploadListImage(List<MultipartFile> file)throws IOException;
+
+    void deleteImage(String imageUrl) throws IOException;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/imageBlobStorage/AzureImageStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/imageBlobStorage/AzureImageStorage.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/imageBlobStorage/AzureImageStorage.java
new file mode 100644
--- /dev/null	(date 1730910225999)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/imageBlobStorage/AzureImageStorage.java	(date 1730910225999)
@@ -0,0 +1,63 @@
+package com.swpproject.koi_care_system.service.imageBlobStorage;
+
+import com.azure.storage.blob.BlobClient;
+import com.azure.storage.blob.BlobContainerClient;
+import com.azure.storage.blob.BlobServiceClient;
+import com.azure.storage.blob.models.BlobStorageException;
+import com.swpproject.koi_care_system.exceptions.CustomBlobStorageException;
+import org.springframework.stereotype.Service;
+import org.springframework.web.multipart.MultipartFile;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+import java.util.UUID;
+@Service
+public class AzureImageStorage implements ImageStorage {
+    private final BlobServiceClient blobServiceClient;
+    public AzureImageStorage(BlobServiceClient blobServiceClient){
+        this.blobServiceClient = blobServiceClient;
+    }
+    @Override
+    public String uploadImage(MultipartFile file)  {
+        try(InputStream inputStream = file.getInputStream()){
+            String containerName="koicarestorage";
+            BlobContainerClient blobContainerClient= blobServiceClient.getBlobContainerClient(containerName);
+            String newImageName = UUID.randomUUID()+ Objects.requireNonNull(file.getOriginalFilename()).substring(file.getOriginalFilename().lastIndexOf("."));
+            BlobClient blobClient = blobContainerClient.getBlobClient(newImageName);
+            blobClient.upload(inputStream,file.getSize(),true);
+            return blobClient.getBlobUrl();
+        }catch (BlobStorageException | IOException e) {
+            throw new CustomBlobStorageException("Failed to upload image to Azure Blob Storage", e);
+        }
+    }
+    @Override
+    public List<String> uploadListImage(List<MultipartFile> listFile){
+        List<String> resource = new ArrayList<>();
+        for(MultipartFile file:listFile ){
+            resource.add(this.uploadImage(file));
+        }
+        return resource;
+    }
+
+    @Override
+    public void deleteImage(String imageUrl) {
+        try {
+            String containerName = "koicarestorage";
+            BlobContainerClient blobContainerClient = blobServiceClient.getBlobContainerClient(containerName);
+            String blobName = extractBlobNameFromUrl(imageUrl);
+            BlobClient blobClient = blobContainerClient.getBlobClient(blobName);
+            blobClient.delete();
+        } catch (BlobStorageException e) {
+            throw new CustomBlobStorageException("Failed to delete image from Azure Blob Storage", e);
+        }
+    }
+
+    private String extractBlobNameFromUrl(String imageUrl) {
+        // Extract the blob name from the URL
+        // This might need to be adjusted based on your exact URL format
+        return imageUrl.substring(imageUrl.lastIndexOf("/") + 1);
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/waterparameter/WaterParameterService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/waterparameter/WaterParameterService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/waterparameter/WaterParameterService.java
new file mode 100644
--- /dev/null	(date 1730910226006)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/waterparameter/WaterParameterService.java	(date 1730910226006)
@@ -0,0 +1,114 @@
+package com.swpproject.koi_care_system.service.waterparameter;
+
+import com.swpproject.koi_care_system.dto.WaterParameterDto;
+import com.swpproject.koi_care_system.enums.ErrorCode;
+import com.swpproject.koi_care_system.exceptions.AppException;
+import com.swpproject.koi_care_system.mapper.WaterParameterMapper;
+import com.swpproject.koi_care_system.models.KoiPond;
+import com.swpproject.koi_care_system.models.WaterParameters;
+import com.swpproject.koi_care_system.payload.request.ParametersCreateRequest;
+import com.swpproject.koi_care_system.payload.request.ParametersUpdateRequest;
+import com.swpproject.koi_care_system.repository.KoiPondRepository;
+import com.swpproject.koi_care_system.repository.WaterParametersRepository;
+import com.swpproject.koi_care_system.service.issue.IssueService;
+import com.swpproject.koi_care_system.service.issue.IssueTypeService;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.PageRequest;
+import org.springframework.data.domain.Pageable;
+import org.springframework.data.domain.Sort;
+import org.springframework.stereotype.Service;
+
+import java.time.LocalDate;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Collectors;
+
+@Service
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class WaterParameterService implements IWaterParameters {
+    WaterParametersRepository waterParametersRepository;
+    WaterParameterMapper waterParameterMapper;
+    KoiPondRepository koiPondRepository;
+    IssueService issueService;
+    IssueTypeService issueTypeService;
+
+    @Override
+    public WaterParameterDto createWaterParameters(ParametersCreateRequest parametersCreateRequest) {
+        KoiPond koiPond = koiPondRepository.findById(parametersCreateRequest.getKoiPondId()).orElseThrow(() -> new AppException(ErrorCode.KOI_POND_NOT_FOUND));
+        WaterParameters waterParameters = waterParameterMapper.mapToWaterParameters(parametersCreateRequest);
+        waterParameters.setKoiPond(koiPond);
+        waterParametersRepository.save(waterParameters);
+        return waterParameterMapper.mapToWaterParameterDto(waterParameters);
+    }
+
+    @Override
+    public WaterParameterDto updateWaterParameters(long id, ParametersUpdateRequest request) {
+        WaterParameters waterParameters = waterParametersRepository.findById(id).orElseThrow(() -> new AppException(ErrorCode.WATER_NOT_FOUND));
+        KoiPond koiPond = koiPondRepository.findById(request.getKoiPondId()).orElseThrow(() -> new AppException(ErrorCode.KOI_POND_NOT_FOUND));
+        waterParameterMapper.updateWaterParameters(waterParameters, request);
+        waterParameters.setKoiPond(koiPond);
+        waterParametersRepository.save(waterParameters);
+        return waterParameterMapper.mapToWaterParameterDto(waterParameters);
+    }
+
+    @Override
+    public void deleteWaterParameters(long id) {
+        WaterParameters waterParameters = waterParametersRepository.findById(id).orElseThrow(() -> new AppException(ErrorCode.WATER_NOT_FOUND));
+        waterParametersRepository.delete(waterParameters);
+    }
+
+    @Override
+    public List<WaterParameterDto> getAllWaterParameters(int pageNumber, int pageSize, String sortBy, String sortDir) {
+        Sort sort = ("Asc".equalsIgnoreCase(sortDir)) ? Sort.by(sortBy).ascending() : Sort.by(sortBy).descending();
+
+        Pageable pageable = PageRequest.of(pageNumber, pageSize, sort);
+        Page<WaterParameters> waterParameters = waterParametersRepository.findAll(pageable);
+        return waterParameters.map(waterParameterMapper::mapToWaterParameterDto).getContent();
+    }
+
+    @Override
+    public WaterParameterDto getWaterParametersById(long id) {
+        return waterParametersRepository.findById(id)
+                .map(waterParameterMapper::mapToWaterParameterDto)
+                .orElseThrow(() -> new AppException(ErrorCode.WATER_NOT_FOUND));
+    }
+
+    @Override
+    public List<WaterParameterDto> getAllWaterParametersByKoiPondId(Long koiPondId) {
+        List<WaterParameters> waterParameters = waterParametersRepository.findByKoiPondId(koiPondId);
+        return waterParameters.stream()
+                .map(waterParameterMapper::mapToWaterParameterDto)
+                .collect(Collectors.toList());
+    }
+    @Override
+    public List<WaterParameterDto> getAllWaterParametersByUserId(Long userId){
+        List<WaterParameters> waterParameters = new ArrayList<>();
+        koiPondRepository.findKoiPondsByUserId(userId).forEach(koiPond -> {
+            waterParameters.addAll(waterParametersRepository.findByKoiPondId(koiPond.getId()));
+        });
+        return waterParameters.stream().map(waterParameterMapper::mapToWaterParameterDto).toList();
+    }
+
+    @Override
+    public List<WaterParameterDto> getAllWaterParametersByUserIdAndCurrentDate(Long userId, LocalDate date) {
+        return this.getAllWaterParametersByUserId(userId).stream()
+                .filter(waterParameterDto -> waterParameterDto.getCreateDateTime().contains(date.toString()))
+                .toList();
+    }
+
+    @Override
+    public WaterParameterDto getLatestWaterParametersByKoiPondId(Long koiPondId) {
+        WaterParameters lastestWaterParameters = waterParametersRepository.findTopByKoiPondId(koiPondId);
+        if (lastestWaterParameters == null) {
+            throw new AppException(ErrorCode.WATER_NOT_FOUND);
+        }
+        if (lastestWaterParameters.getIssueList().isEmpty()) {
+            issueService.detectIssues(lastestWaterParameters);
+        }
+        return waterParameterMapper.mapToWaterParameterDto(lastestWaterParameters);
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/waterparameter/IWaterParameters.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/waterparameter/IWaterParameters.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/waterparameter/IWaterParameters.java
new file mode 100644
--- /dev/null	(date 1730910226006)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/waterparameter/IWaterParameters.java	(date 1730910226006)
@@ -0,0 +1,25 @@
+package com.swpproject.koi_care_system.service.waterparameter;
+
+import com.swpproject.koi_care_system.dto.WaterParameterDto;
+import com.swpproject.koi_care_system.payload.request.ParametersCreateRequest;
+import com.swpproject.koi_care_system.payload.request.ParametersUpdateRequest;
+
+import java.time.LocalDate;
+import java.util.List;
+
+public interface IWaterParameters {
+    WaterParameterDto createWaterParameters(ParametersCreateRequest parametersCreateRequest);
+
+    WaterParameterDto updateWaterParameters(long id, ParametersUpdateRequest request);
+
+    void deleteWaterParameters(long id);
+
+    List<WaterParameterDto> getAllWaterParameters(int pageNumber, int pageSize, String sortBy, String sortDir);
+
+    WaterParameterDto getWaterParametersById(long id);
+    List<WaterParameterDto> getAllWaterParametersByKoiPondId(Long koiPondId);
+
+    List<WaterParameterDto> getAllWaterParametersByUserId(Long userId);
+    List<WaterParameterDto> getAllWaterParametersByUserIdAndCurrentDate(Long userId, LocalDate date);
+    WaterParameterDto getLatestWaterParametersByKoiPondId(Long koiPondId);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/notification/NotificationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/notification/NotificationService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/notification/NotificationService.java
new file mode 100644
--- /dev/null	(date 1730910226001)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/notification/NotificationService.java	(date 1730910226001)
@@ -0,0 +1,78 @@
+package com.swpproject.koi_care_system.service.notification;
+
+import com.swpproject.koi_care_system.dto.NotificationDto;
+import com.swpproject.koi_care_system.enums.ErrorCode;
+import com.swpproject.koi_care_system.exceptions.AppException;
+import com.swpproject.koi_care_system.mapper.NotificationMapper;
+import com.swpproject.koi_care_system.models.Notification;
+import com.swpproject.koi_care_system.models.User;
+import com.swpproject.koi_care_system.payload.request.NotificationRequest;
+import com.swpproject.koi_care_system.repository.NotificaitonRepository;
+import com.swpproject.koi_care_system.repository.UserRepository;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class NotificationService implements INotificationService {
+
+    NotificationMapper notificationMapper;
+    NotificaitonRepository notificaitonRepository;
+    UserRepository userRepository;
+
+    @Override
+    public NotificationDto createNotification(NotificationRequest request) {
+        Notification notification = notificationMapper.mapToNotification(request);
+        User user = userRepository.findByUsername(request.getUsername()).orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));
+        notification.setUser(user);
+        return notificationMapper.mapToNotificationDto(notificaitonRepository.save(notification));
+    }
+
+    @Override
+    public NotificationDto getNotification(Long id) {
+        return notificationMapper.mapToNotificationDto(notificaitonRepository.findById(id).orElseThrow());
+    }
+
+    @Override
+    public List<NotificationDto> getNotifications(Long userId) {
+        List<Notification> notifications = notificaitonRepository.findAllByUserId(userId);
+        return notifications.stream().map(notificationMapper::mapToNotificationDto).toList();
+    }
+
+    @Override
+    public List<NotificationDto> getUnreadNotifications(Long userId) {
+        List<Notification> notifications = notificaitonRepository.findByUserIdAndDeliveredFalse(userId);
+        return notifications.stream().map(notificationMapper::mapToNotificationDto).toList();
+    }
+
+    @Override
+    public void markAsRead(Long id) {
+        Notification notification = notificaitonRepository.findById(id).orElseThrow();
+        notification.setDelivered(true);
+        notificaitonRepository.save(notification);
+    }
+
+    @Override
+    public void markAsReadAll(Long userId) {
+        List<Notification> notifications = notificaitonRepository.findByUserIdAndDeliveredFalse(userId);
+        notifications.forEach(notification -> notification.setDelivered(true));
+        notificaitonRepository.saveAll(notifications);
+    }
+
+    @Override
+    public void deleteNotification(Long id) {
+        Notification notification = notificaitonRepository.findById(id).orElseThrow();
+        notificaitonRepository.delete(notification);
+    }
+
+    @Override
+    public void deleteAllNotifications(Long userId) {
+        List<Notification> notifications = notificaitonRepository.findAllByUserId(userId);
+        notificaitonRepository.deleteAll(notifications);
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/notification/INotificationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/notification/INotificationService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/notification/INotificationService.java
new file mode 100644
--- /dev/null	(date 1730910226001)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/notification/INotificationService.java	(date 1730910226001)
@@ -0,0 +1,24 @@
+package com.swpproject.koi_care_system.service.notification;
+
+import com.swpproject.koi_care_system.dto.NotificationDto;
+import com.swpproject.koi_care_system.payload.request.NotificationRequest;
+
+import java.util.List;
+
+public interface INotificationService {
+    NotificationDto createNotification(NotificationRequest request);
+
+    NotificationDto getNotification(Long id);
+
+    List<NotificationDto> getNotifications(Long userId);
+
+    List<NotificationDto> getUnreadNotifications(Long userId);
+
+    void markAsRead(Long id);
+
+    void markAsReadAll(Long userId);
+
+    void deleteNotification(Long id);
+
+    void deleteAllNotifications(Long userId);
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/chatservice/ChatUserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/chatservice/ChatUserService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/chatservice/ChatUserService.java
new file mode 100644
--- /dev/null	(date 1730910225998)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/chatservice/ChatUserService.java	(date 1730910225998)
@@ -0,0 +1,36 @@
+package com.swpproject.koi_care_system.service.chatservice;
+
+import com.swpproject.koi_care_system.models.ChatUser;
+import com.swpproject.koi_care_system.enums.ChatUserStatus;
+import com.swpproject.koi_care_system.repository.ChatUserRepository;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+public class ChatUserService {
+    private final ChatUserRepository repository;
+    public void saveUser(ChatUser user){
+        if(repository.findByNickname(user.getNickname())==null){
+            user.setStatus(ChatUserStatus.ONLINE);
+            repository.save(user);
+        }else{
+            ChatUser userTmp = repository.findByNickname(user.getNickname());
+            userTmp.setStatus(ChatUserStatus.ONLINE);
+            repository.save(userTmp);
+        }
+
+    }
+    public void disconnect(ChatUser user){
+        ChatUser storedUser = repository.findByNickname(user.getNickname());
+        if(storedUser!=null){
+            storedUser.setStatus(ChatUserStatus.OFFLINE);
+            repository.save(storedUser);
+        }
+    }
+    public List<ChatUser> findConnectedUsers(){
+        return repository.findAllByStatus(ChatUserStatus.ONLINE);
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/chatservice/ChatRoomService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/chatservice/ChatRoomService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/chatservice/ChatRoomService.java
new file mode 100644
--- /dev/null	(date 1730910225998)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/chatservice/ChatRoomService.java	(date 1730910225998)
@@ -0,0 +1,94 @@
+package com.swpproject.koi_care_system.service.chatservice;
+
+import com.swpproject.koi_care_system.models.ChatRoom;
+import com.swpproject.koi_care_system.repository.ChatRoomRepository;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+
+import java.util.Optional;
+
+@Service
+@RequiredArgsConstructor
+public class ChatRoomService {
+    private final ChatRoomRepository repository;
+    public Optional<String> getChatRoomId(
+            String senderId,
+            String recipientId,
+            boolean createNewRoomIfNotExists
+    ){
+        return repository.findBySenderIdAndRecipientId(senderId,recipientId)
+                .map(ChatRoom::getChatId)
+                .or(()->{
+                    if(createNewRoomIfNotExists){
+                           String chatroomId = createChatRoomId(senderId,recipientId);
+                           return Optional.of(chatroomId);
+                    }
+                    return Optional.empty();
+                });
+    }
+    public void updateChatRoom(String userId,String staffId,String defaultShop){
+        repository.findBySenderIdAndRecipientId(userId, defaultShop)
+                .ifPresent(chatRoom -> {
+                    chatRoom.setRecipientId(staffId);
+                    chatRoom.setChatId(String.format("%s_%s",userId,staffId));
+                    repository.save(chatRoom);
+                });
+        repository.findBySenderIdAndRecipientId(defaultShop,userId)
+                .ifPresent(chatRoom -> {
+                    chatRoom.setSenderId(staffId);
+                    chatRoom.setChatId(String.format("%s_%s",userId,staffId));
+                    repository.save(chatRoom);
+                });
+    }
+
+    public void backDefaultChatRoom(String userId,String defaultShop){
+        repository.findBySenderId(userId)
+                .ifPresent(chatRoom -> {
+                    repository.findBySenderIdAndRecipientId(chatRoom.getRecipientId(),userId)
+                            .ifPresent(chatRooms -> {
+                                chatRooms.setSenderId(defaultShop);
+                                chatRooms.setChatId(String.format("%s_%s",userId,defaultShop));
+                                repository.save(chatRooms);
+                            });
+                    chatRoom.setRecipientId(defaultShop);
+                    chatRoom.setChatId(String.format("%s_%s",userId,defaultShop));
+                    repository.save(chatRoom);
+                });
+    }
+
+
+
+
+    public Optional<String> getChatRoomIdBySenderId(
+            String senderId,
+            boolean createNewRoomIfNotExists
+    ){
+        return repository.findBySenderId(senderId)
+                .map(ChatRoom::getChatId)
+                .or(()->{
+                    if(createNewRoomIfNotExists){
+                        String chatroomId = createChatRoomId(senderId,"SupportService");
+                        return Optional.of(chatroomId);
+                    }
+                    return Optional.empty();
+                });
+    }
+
+    private String createChatRoomId(String senderId, String recipientId) {
+        String chatRoomId = String.format("%s_%s",senderId,recipientId);
+        ChatRoom  senderRecipient = ChatRoom.builder()
+                .chatId(chatRoomId)
+                .senderId(senderId)
+                .recipientId(recipientId)
+                .build();
+        ChatRoom  recipientSender = ChatRoom.builder()
+                .chatId(chatRoomId)
+                .senderId(recipientId)
+                .recipientId(senderId)
+                .build();
+        repository.save(senderRecipient);
+        repository.save(recipientSender);
+
+        return chatRoomId;
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/authentication/IAuthenticationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/authentication/IAuthenticationService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/authentication/IAuthenticationService.java
new file mode 100644
--- /dev/null	(date 1730910225996)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/authentication/IAuthenticationService.java	(date 1730910225996)
@@ -0,0 +1,14 @@
+package com.swpproject.koi_care_system.service.authentication;
+
+import com.swpproject.koi_care_system.payload.request.AuthenticationRequest;
+import com.swpproject.koi_care_system.payload.response.LoginResponse;
+
+public interface IAuthenticationService {
+    LoginResponse authenticate(AuthenticationRequest request);
+
+    boolean forgotPassword(String email);
+
+    boolean verifyUserOtp(String email, String otp);
+
+    boolean resetPassword(String email, String password, String otp);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/authentication/AuthenticationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/authentication/AuthenticationService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/authentication/AuthenticationService.java
new file mode 100644
--- /dev/null	(date 1730910225996)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/authentication/AuthenticationService.java	(date 1730910225996)
@@ -0,0 +1,93 @@
+package com.swpproject.koi_care_system.service.authentication;
+
+
+import com.swpproject.koi_care_system.enums.ErrorCode;
+import com.swpproject.koi_care_system.enums.Role;
+import com.swpproject.koi_care_system.exceptions.AppException;
+import com.swpproject.koi_care_system.mapper.UserMapper;
+import com.swpproject.koi_care_system.payload.request.AuthenticationRequest;
+import com.swpproject.koi_care_system.payload.response.LoginResponse;
+import com.swpproject.koi_care_system.repository.UserRepository;
+import com.swpproject.koi_care_system.service.email.IEmailService;
+import com.swpproject.koi_care_system.service.otp.IOtpService;
+import com.swpproject.koi_care_system.utils.JwtUtils;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.jetbrains.annotations.NotNull;
+import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.stereotype.Service;
+
+import java.security.SecureRandom;
+
+
+@Service
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class AuthenticationService implements IAuthenticationService {
+    UserRepository userRepository;
+    PasswordEncoder passwordEncoder;
+    IEmailService emailService;
+    IOtpService otpService;
+    UserMapper userMapper;
+    JwtUtils jwtUtils;
+
+    //Authenticate user
+    @Override
+    public LoginResponse authenticate(AuthenticationRequest request) {
+        var user = userRepository.findByUsername(request.getUsername()).orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));
+
+        boolean authenticated = passwordEncoder.matches(request.getPassword(), user.getPassword());
+
+        if (!authenticated) {
+            throw new AppException(ErrorCode.INVALID_CREDENTIALS);
+        }
+        var token = jwtUtils.generateToken(user);
+        if (!user.isStatus()) {
+            if (user.getRole().equals(Role.GUEST)) {
+                emailService.send(user.getUsername(), user.getEmail(), "Resend Verify Email", token);
+            }
+            throw new AppException(ErrorCode.UNAUTHENTICATED);
+        }
+
+        return userMapper.maptoLoginResponse(user, token);
+    }
+
+    //Enter email to get OTP
+    @Override
+    public boolean forgotPassword(String email) {
+        var user = userRepository.findByEmail(email).orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));
+        if (user != null) {
+            String otp = generateOtp();
+            otpService.saveOtp(email, otp);
+            emailService.sendOtp(user.getUsername(), user.getEmail(), "Forgot Password", otp);
+
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public boolean verifyUserOtp(String email, String otp) {
+        return otpService.verifyOtp(email, otp);
+    }
+
+    @Override
+    public boolean resetPassword(String email, String password, String otp) {
+        if (otpService.verifyOtp(email, otp)) {
+            var user = userRepository.findByEmail(email).orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));
+            user.setPassword(passwordEncoder.encode(password));
+            userRepository.save(user);
+            otpService.deleteOtp(email);
+            return true;
+        }
+        return false;
+    }
+
+    private @NotNull String generateOtp() {
+        SecureRandom secureRandom = new SecureRandom();
+        int otp = secureRandom.nextInt(900000) + 100000; // Generates a number between 100000 and 999999
+        return String.valueOf(otp);
+    }
+}
+
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/growthhistory/IGrowthHistoryService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/growthhistory/IGrowthHistoryService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/growthhistory/IGrowthHistoryService.java
new file mode 100644
--- /dev/null	(date 1730910225999)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/growthhistory/IGrowthHistoryService.java	(date 1730910225999)
@@ -0,0 +1,20 @@
+package com.swpproject.koi_care_system.service.growthhistory;
+
+import com.swpproject.koi_care_system.dto.GrowthHistoryDto;
+import com.swpproject.koi_care_system.payload.request.GrowthCreateRequest;
+import com.swpproject.koi_care_system.payload.request.GrowthUpdateRequest;
+
+import java.io.IOException;
+import java.util.List;
+
+public interface IGrowthHistoryService {
+    GrowthHistoryDto createGrowthHistory(GrowthCreateRequest growthCreateRequest) throws IOException;
+
+    GrowthHistoryDto updateGrowthHistory(Long id, GrowthUpdateRequest growthUpdateRequest);
+
+    void deleteGrowthHistory(Long id);
+
+    GrowthHistoryDto getGrowthHistory(Long id);
+
+    List<GrowthHistoryDto> getListGrowthHistory(long koiFishId);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/growthhistory/GrowthHistoryService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/growthhistory/GrowthHistoryService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/growthhistory/GrowthHistoryService.java
new file mode 100644
--- /dev/null	(date 1730910225999)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/growthhistory/GrowthHistoryService.java	(date 1730910225999)
@@ -0,0 +1,118 @@
+package com.swpproject.koi_care_system.service.growthhistory;
+
+import com.swpproject.koi_care_system.dto.GrowthHistoryDto;
+import com.swpproject.koi_care_system.enums.ErrorCode;
+import com.swpproject.koi_care_system.exceptions.AppException;
+import com.swpproject.koi_care_system.mapper.GrowthHistoryMapper;
+import com.swpproject.koi_care_system.models.GrowthHistory;
+import com.swpproject.koi_care_system.models.KoiFish;
+import com.swpproject.koi_care_system.payload.request.GrowthCreateRequest;
+import com.swpproject.koi_care_system.payload.request.GrowthUpdateRequest;
+import com.swpproject.koi_care_system.repository.GrowthHistoryRepository;
+import com.swpproject.koi_care_system.repository.KoiFishRepository;
+import com.swpproject.koi_care_system.service.imageBlobStorage.ImageStorage;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.stereotype.Service;
+
+import java.io.IOException;
+import java.util.Comparator;
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class GrowthHistoryService implements IGrowthHistoryService {
+    GrowthHistoryRepository growthHistoryRepository;
+    GrowthHistoryMapper growthHistoryMapper;
+    KoiFishRepository koiFishRepository;
+    ImageStorage imageStorage;
+
+    @Override
+    public GrowthHistoryDto createGrowthHistory(GrowthCreateRequest growthCreateRequest) throws IOException {
+        KoiFish koiFish = koiFishRepository.findById(growthCreateRequest.getKoiFishId()).orElseThrow(() -> new AppException(ErrorCode.KOI_FISH_NOT_FOUND));
+        GrowthHistory growthHistory = growthHistoryMapper.mapToGrowthHistory(growthCreateRequest);
+        if (growthCreateRequest.getFile() != null) {
+            growthHistory.setImageUrl(imageStorage.uploadImage(growthCreateRequest.getFile()));
+        }
+        else
+            growthHistory.setImageUrl("https://koicaresystemv3.blob.core.windows.net/koicarestorage/defaultGrowthHistory.png");
+        growthHistory.setKoiFish(koiFish);
+        GrowthHistory savedGrowthHistory = growthHistoryRepository.save(growthHistory);
+        long latestId = growthHistoryRepository.findLatestByKoiFishId(koiFish.getId());
+        if (savedGrowthHistory.getId() == latestId) {
+            String imageUrl = (savedGrowthHistory.getImageUrl().equals("https://koicaresystemv3.blob.core.windows.net/koicarestorage/defaultGrowthHistory.png") ?
+                    koiFish.getImageUrl() : savedGrowthHistory.getImageUrl());
+            //Update KoiFish
+            updateKoiFish(savedGrowthHistory,imageUrl);
+            koiFishRepository.save(koiFish);
+        }
+        return growthHistoryMapper.mapToGrowthHistoryDto(savedGrowthHistory);
+    }
+
+    @Override
+    public GrowthHistoryDto updateGrowthHistory(Long id, GrowthUpdateRequest growthUpdateRequest) {
+        GrowthHistory growthHistory = growthHistoryRepository.findById(id).orElseThrow(() -> new AppException(ErrorCode.GROWTH_HISTORY_NOT_FOUND));
+        growthHistoryMapper.updateGrowthHistory(growthHistory, growthUpdateRequest);
+        if (growthUpdateRequest.getFile() != null)
+            try {
+                if (!growthHistory.getImageUrl().equals("https://koicaresystemv3.blob.core.windows.net/koicarestorage/defaultGrowthHistory.png"))
+                    imageStorage.deleteImage(growthHistory.getImageUrl());
+                growthHistory.setImageUrl(imageStorage.uploadImage(growthUpdateRequest.getFile()));
+            } catch (Exception e) {
+                throw new RuntimeException(e);
+            }
+        GrowthHistory updatedGrowthHistory = growthHistoryRepository.save(growthHistory);
+        KoiFish koiFish = growthHistory.getKoiFish();
+        long latestId = growthHistoryRepository.findLatestByKoiFishId(koiFish.getId());
+        //Update latest KoiFish
+        GrowthHistory growthHistoryLatest = growthHistoryRepository.findById(latestId).orElseThrow(() -> new AppException(ErrorCode.GROWTH_HISTORY_NOT_FOUND));
+        updateKoiFish(growthHistoryLatest, (growthHistoryLatest.getImageUrl().equals("https://koicaresystemv3.blob.core.windows.net/koicarestorage/defaultGrowthHistory.png") ? koiFish.getImageUrl() : growthHistoryLatest.getImageUrl()));
+        koiFishRepository.save(koiFish);
+
+        return growthHistoryMapper.mapToGrowthHistoryDto(updatedGrowthHistory);
+    }
+
+    @Override
+    public void deleteGrowthHistory(Long id) {
+        GrowthHistory growthHistory = growthHistoryRepository.findById(id).orElseThrow(() -> new AppException(ErrorCode.GROWTH_HISTORY_NOT_FOUND));
+        KoiFish koiFish = growthHistory.getKoiFish();
+        List<GrowthHistory> growHistories = growthHistoryRepository.findAllByKoiFishId(koiFish.getId());
+        if (growHistories.size() == 1) {
+            throw new IllegalArgumentException("GrowHistory must be at least 1");
+        }
+        if (!growthHistory.getImageUrl().equals("https://koicaresystemv3.blob.core.windows.net/koicarestorage/defaultGrowthHistory.png"))
+            try{
+                if(!koiFish.getImageUrl().equals(growthHistory.getImageUrl()))
+                    imageStorage.deleteImage(growthHistory.getImageUrl());
+            }catch (Exception e){
+                throw new RuntimeException(e);
+            }
+        growthHistoryRepository.delete(growthHistory);
+
+        long latestId = growthHistoryRepository.findLatestByKoiFishId(koiFish.getId());
+        GrowthHistory growthHistoryLatest = growthHistoryRepository.findById(latestId).orElseThrow(() -> new AppException(ErrorCode.GROWTH_HISTORY_NOT_FOUND));
+        updateKoiFish(growthHistoryLatest, growthHistoryLatest.getImageUrl().equals("https://koicaresystemv3.blob.core.windows.net/koicarestorage/defaultGrowthHistory.png") ? koiFish.getImageUrl() : growthHistoryLatest.getImageUrl());
+        growthHistoryRepository.save(growthHistoryLatest);
+    }
+
+    @Override
+    public GrowthHistoryDto getGrowthHistory(Long id) {
+        return growthHistoryRepository.findById(id).map(growthHistoryMapper::mapToGrowthHistoryDto).orElseThrow(() -> new AppException(ErrorCode.GROWTH_HISTORY_NOT_FOUND));
+    }
+
+    @Override
+    public List<GrowthHistoryDto> getListGrowthHistory(long koiFishId) {
+        List<GrowthHistory> growHistories = growthHistoryRepository.findAllByKoiFishId(koiFishId);
+        return growHistories.stream().map(growthHistoryMapper::mapToGrowthHistoryDto).sorted(Comparator.comparing(GrowthHistoryDto::getCreateDate)).toList();
+    }
+
+    private void updateKoiFish(GrowthHistory growthHistory, String imageUrl) {
+        KoiFish koiFish = growthHistory.getKoiFish();
+        koiFish.setImageUrl(imageUrl);
+        koiFish.setPhysique(growthHistory.getPhysique());
+        koiFish.setLength(growthHistory.getLength());
+        koiFish.setWeight(growthHistory.getWeight());
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/promotion/IPromotionService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/promotion/IPromotionService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/promotion/IPromotionService.java
new file mode 100644
--- /dev/null	(date 1730910226003)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/promotion/IPromotionService.java	(date 1730910226003)
@@ -0,0 +1,28 @@
+package com.swpproject.koi_care_system.service.promotion;
+
+import com.swpproject.koi_care_system.dto.ProductDto;
+import com.swpproject.koi_care_system.dto.PromotionDto;
+import com.swpproject.koi_care_system.models.Promotion;
+import com.swpproject.koi_care_system.payload.request.AddPromotionRequest;
+import com.swpproject.koi_care_system.payload.request.AdminConfirmPromotionRequest;
+import com.swpproject.koi_care_system.payload.request.PromotionUpdateRequest;
+
+import java.util.List;
+
+public interface IPromotionService {
+
+    PromotionDto createPromotion(AddPromotionRequest addPromotionRequest);
+    PromotionDto updatePromotion(Long id, PromotionUpdateRequest promotionUpdateRequest);
+    void deletePromotion(Long id);
+    PromotionDto getPromotionById(Long id);
+
+    List<PromotionDto> getAllPromotions();
+    List<PromotionDto> getAllPromotionsRequest();
+
+    PromotionDto verifyByAdmin(AdminConfirmPromotionRequest request);
+
+    List<ProductDto> getAllProductByPromotionId(Long promotionId);
+    void upToDate();
+
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/supplier/SupplierService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/supplier/SupplierService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/supplier/SupplierService.java
new file mode 100644
--- /dev/null	(date 1730910226004)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/supplier/SupplierService.java	(date 1730910226004)
@@ -0,0 +1,74 @@
+package com.swpproject.koi_care_system.service.supplier;
+
+import com.swpproject.koi_care_system.exceptions.AlreadyExistsException;
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.models.Supplier;
+import com.swpproject.koi_care_system.payload.request.AddSupplierRequest;
+import com.swpproject.koi_care_system.payload.request.SupplierUpdateRequest;
+import com.swpproject.koi_care_system.repository.SupplierRepository;
+import lombok.RequiredArgsConstructor;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.Optional;
+
+@Service
+@RequiredArgsConstructor
+public class SupplierService implements ISupplierService {
+
+    private final SupplierRepository supplierRepository;
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public Supplier getSupplierById(Long id) {
+        return supplierRepository.findById(id)
+                .orElseThrow(()->new ResourceNotFoundException("Supplier not found!"));
+    }
+
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public Supplier getSupplierByName(String name) {
+        return supplierRepository.findByName(name);
+    }
+
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public List<Supplier> getAllSupplier() {
+        return supplierRepository.findAll();
+    }
+
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public Supplier addSupplier(AddSupplierRequest addSupplierRequest) {
+        if(supplierRepository.existsByName(addSupplierRequest.getName())){
+            throw new AlreadyExistsException("The supplier with this name already exists");
+        }
+        Supplier supplier = new Supplier(
+                null,
+                addSupplierRequest.getName(),
+                addSupplierRequest.getPhone(),
+                addSupplierRequest.getAddress()
+        );
+        return supplierRepository.save(supplier);
+    }
+
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public Supplier updateSupplier(SupplierUpdateRequest supplier, Long id) {
+        return Optional.ofNullable(getSupplierById(id)).map(oldSupplier ->{
+            oldSupplier.setName(supplier.getName());
+            oldSupplier.setPhone(supplier.getPhone());
+            oldSupplier.setAddress(supplier.getAddress());
+            return supplierRepository.save(oldSupplier);
+        }).orElseThrow(()-> new ResourceNotFoundException("Supplier not found!"));
+    }
+
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public void deleteSupplierById(Long id) {
+        supplierRepository.findById(id)
+                .ifPresentOrElse(supplierRepository::delete,()->{
+                    throw new ResourceNotFoundException("Supplier not found!");
+                });
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/supplier/ISupplierService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/supplier/ISupplierService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/supplier/ISupplierService.java
new file mode 100644
--- /dev/null	(date 1730910226004)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/supplier/ISupplierService.java	(date 1730910226004)
@@ -0,0 +1,17 @@
+package com.swpproject.koi_care_system.service.supplier;
+
+import com.swpproject.koi_care_system.models.Supplier;
+import com.swpproject.koi_care_system.payload.request.AddSupplierRequest;
+import com.swpproject.koi_care_system.payload.request.SupplierUpdateRequest;
+
+import java.util.List;
+
+public interface ISupplierService {
+    Supplier getSupplierById(Long id);
+    Supplier getSupplierByName(String name);
+    List<Supplier> getAllSupplier();
+    Supplier addSupplier(AddSupplierRequest supplier);
+    Supplier updateSupplier(SupplierUpdateRequest supplier, Long id);
+    void deleteSupplierById(Long id);
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/reminder/ReminderService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/reminder/ReminderService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/reminder/ReminderService.java
new file mode 100644
--- /dev/null	(date 1730910226003)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/reminder/ReminderService.java	(date 1730910226003)
@@ -0,0 +1,180 @@
+package com.swpproject.koi_care_system.service.reminder;
+
+import com.swpproject.koi_care_system.dto.ReminderDto;
+import com.swpproject.koi_care_system.enums.ErrorCode;
+import com.swpproject.koi_care_system.exceptions.AppException;
+import com.swpproject.koi_care_system.mapper.ReminderMapper;
+import com.swpproject.koi_care_system.models.Reminder;
+import com.swpproject.koi_care_system.models.ReminderMongo;
+import com.swpproject.koi_care_system.models.User;
+import com.swpproject.koi_care_system.payload.request.ReminderRequest;
+import com.swpproject.koi_care_system.repository.ReminderMongoRepo;
+import com.swpproject.koi_care_system.repository.ReminderRepository;
+import com.swpproject.koi_care_system.repository.UserRepository;
+import com.swpproject.koi_care_system.service.email.IEmailService;
+import com.swpproject.koi_care_system.service.notification.INotificationService;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.messaging.MessagingException;
+import org.springframework.messaging.simp.SimpMessagingTemplate;
+import org.springframework.messaging.simp.user.SimpUserRegistry;
+import org.springframework.scheduling.annotation.Async;
+import org.springframework.scheduling.annotation.Scheduled;
+import org.springframework.stereotype.Service;
+
+import java.security.Principal;
+import java.time.LocalDateTime;
+import java.time.ZoneId;
+import java.time.format.DateTimeFormatter;
+import java.util.List;
+
+@Slf4j
+@Service
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class ReminderService implements IReminderService {
+    UserRepository userRepository;
+    ReminderRepository reminderRepository;
+    ReminderMapper reminderMapper;
+    SimpMessagingTemplate messagingTemplate;
+    INotificationService notificationService;
+    SimpUserRegistry userRegistry;
+    ReminderMongoRepo reminderMongoRepo;
+    IEmailService emailService;
+
+    @Override
+    public ReminderDto createReminder(ReminderRequest request, Principal connectedUser) {
+        User user = userRepository.findByUsername(connectedUser.getName())
+                .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));
+        Reminder reminder = reminderMapper.mapToReminders(request);
+        reminder.setUser(user);
+        reminder = reminderRepository.save(reminder);
+
+        ReminderMongo reminderMongo = reminderMapper.mapToReminderMongo(reminder);
+        reminderMongoRepo.save(reminderMongo);
+        log.info("Reminder created: {}", reminder.getDateTime());
+        return reminderMapper.mapToReminderDto(reminder);
+    }
+
+    @Override
+    public ReminderDto updateReminder(Long id, ReminderRequest request) {
+        Reminder reminder = reminderRepository.findById(id).orElseThrow(() -> new IllegalArgumentException("Reminder not found"));
+        reminderMapper.updateReminderFromRequest(reminder, request);
+        reminder = reminderRepository.save(reminder);
+
+        ReminderMongo reminderMongo = reminderMongoRepo.findById(id).orElse(null);
+        if (reminderMongo != null) {
+            reminderMapper.updateReminderMongo(reminderMongo, reminder);
+            reminderMongoRepo.save(reminderMapper.mapToReminderMongo(reminder));
+        }
+        return reminderMapper.mapToReminderDto(reminder);
+    }
+
+    @Override
+    public void deleteReminder(Long id) {
+        Reminder reminder = reminderRepository.findById(id).orElseThrow(() -> new IllegalArgumentException("Reminder not found"));
+        reminderRepository.delete(reminder);
+        reminderMongoRepo.deleteById(id);
+    }
+
+    @Override
+    public List<ReminderDto> getListReminder() {
+        List<Reminder> reminders = reminderRepository.findAll();
+        return reminders.stream().map(reminderMapper::mapToReminderDto).toList();
+    }
+
+    @Override
+    public List<ReminderDto> getListReminderByUser(Principal connectedUser) {
+        User user = userRepository.findByUsername(connectedUser.getName())
+                .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));
+        List<Reminder> reminders = reminderRepository.findByUserId(user.getId());
+        return reminders.stream().map(reminderMapper::mapToReminderDto).toList();
+    }
+
+    @Async
+    @Scheduled(fixedRate = 60000)
+    @Override
+    public void checkReminders() {
+        LocalDateTime now = LocalDateTime.now(ZoneId.of("Asia/Ho_Chi_Minh"));
+        LocalDateTime startTime = now.withSecond(0).withNano(0);
+
+        String startDateTime = startTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm"));
+
+        List<ReminderMongo> reminders = reminderMongoRepo.findDueRemindersBetween(startDateTime);
+        log.info("Found {} reminders due at {}", reminders.size(), now);
+
+        reminders.forEach(reminder -> {
+            processReminder(reminder, now);
+        });
+    }
+
+    private LocalDateTime convertToLocalDateTime(String dateTimeString) {
+        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss");
+        return LocalDateTime.parse(dateTimeString, formatter).atZone(ZoneId.of("Asia/Ho_Chi_Minh")).toLocalDateTime();
+    }
+
+
+    private void processReminder(ReminderMongo reminder, LocalDateTime now) {
+        // Convert the stored string date to LocalDateTime
+        LocalDateTime reminderTime = convertToLocalDateTime(reminder.getDateTime());
+        log.info("PROCRSSREMINDER reminderTIME: {}", reminderTime);
+        switch (reminder.getRepeatInterval()) {
+            case ONE_TIME:
+                if (isReminderDue(reminderTime, now)) {
+                    sendReminderNotification(reminder);
+                }
+                break;
+            case DAILY:
+                if (isTimeMatching(reminderTime, now)) {
+                    sendReminderNotification(reminder);
+                }
+                break;
+            case WEEKLY:
+                if (reminderTime.getDayOfWeek() == now.getDayOfWeek() && isTimeMatching(reminderTime, now)) {
+                    sendReminderNotification(reminder);
+                }
+                break;
+        }
+    }
+
+
+    private boolean isReminderDue(LocalDateTime reminderTime, LocalDateTime now) {
+        return reminderTime.getHour() == now.getHour() &&
+                reminderTime.getMinute() == now.getMinute();
+    }
+
+    private boolean isTimeMatching(LocalDateTime reminderTime, LocalDateTime now) {
+        return reminderTime.getHour() == now.getHour() &&
+                reminderTime.getMinute() == now.getMinute();
+    }
+
+
+    private void sendReminderNotification(ReminderMongo reminder) {
+        String username = reminder.getUsername();
+        User user = userRepository.findByUsername(username).orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));
+        String message = "Reminder: " + reminder.getDescription() + " is due at " + reminder.getDateTime() + "!";
+        boolean isDelivered = false;
+        if (isConnection(username)) {
+            try {
+                messagingTemplate.convertAndSendToUser(username, "/notifications", message);
+                isDelivered = true;
+            } catch (MessagingException e) {
+                isDelivered = false;
+            }
+        } else {
+            emailService.sendReminder(username, user.getEmail(), "Reminder: " + reminder.getTitle() + " is due!", reminderMapper.mapToReminderFromMongo(reminder));
+
+        }
+        notificationService.createNotification(reminderMapper.mapToNotificationRequest(reminder, isDelivered));
+        log.info("user connected: {}", isConnection(username));
+        log.info("That user: {}", username);
+        log.info("Notification sent for reminder '{}'.", reminder.getTitle());
+    }
+
+    private boolean isConnection(String username) {
+        return userRegistry.getUser(username) != null;
+    }
+}
+
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/chatservice/ChatMessageService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/chatservice/ChatMessageService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/chatservice/ChatMessageService.java
new file mode 100644
--- /dev/null	(date 1730910225997)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/chatservice/ChatMessageService.java	(date 1730910225997)
@@ -0,0 +1,69 @@
+package com.swpproject.koi_care_system.service.chatservice;
+
+import com.swpproject.koi_care_system.models.ChatMessage;
+import com.swpproject.koi_care_system.repository.ChatMessageRepository;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+
+import java.time.LocalDateTime;
+import java.util.ArrayList;
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+public class ChatMessageService {
+    private final ChatMessageRepository repository;
+    private final ChatRoomService chatRoomService;
+    public ChatMessage save(ChatMessage chatMessage){
+        String chatId="";
+        if(chatMessage.getRecipientId().equals("SupportService") && !repository.findChatMessageBySenderId(chatMessage.getSenderId()).isEmpty()){
+            chatId =chatRoomService.getChatRoomIdBySenderId(chatMessage.getSenderId(),false).orElseThrow();
+            if(!chatId.isEmpty())
+                chatMessage.setRecipientId(chatId.substring(chatId.indexOf('_')+1));
+        }else {
+            chatId = chatRoomService.getChatRoomId(
+                    chatMessage.getSenderId(), chatMessage.getRecipientId(), true).orElseThrow();
+        }
+        chatMessage.setChatId(chatId);
+        chatMessage.setTimestamp(LocalDateTime.now().toString());
+        return repository.save(chatMessage);
+    }
+    public List<ChatMessage> findChatMessage(String senderId, String recipientId){
+        var chatId = chatRoomService.getChatRoomId(senderId,recipientId,false);
+        return chatId.map(repository::findByChatId).orElse(new ArrayList<>());
+    }
+    public List<ChatMessage> findChatMessage(String senderId){
+        var chatId = chatRoomService.getChatRoomIdBySenderId(senderId,false);
+        return chatId.map(repository::findByChatId).orElse(new ArrayList<>());
+    }
+    public void updateRecipientInchat(String userId, String shopId){
+        var chatId = chatRoomService.getChatRoomId(userId,"SupportService",false);
+        chatRoomService.updateChatRoom(userId,shopId,"SupportService");
+        chatId.map(repository::findByChatId).ifPresent((chatMessages -> {
+             chatMessages.forEach(chatMessage -> {
+                 if(chatMessage.getRecipientId().equals("SupportService"))
+                     chatMessage.setRecipientId(shopId);
+                 else if(chatMessage.getSenderId().equals("SupportService"))
+                     chatMessage.setSenderId(shopId);
+                 chatMessage.setChatId(String.format("%s_%s",userId,shopId));
+             });
+             repository.saveAll(chatMessages);
+         }));
+        return;
+    }
+
+    public void backRecipientInChat(String userId){
+        var chatId = chatRoomService.getChatRoomIdBySenderId(userId,false);
+        chatRoomService.backDefaultChatRoom(userId,"SupportService");
+        chatId.map(repository::findByChatId).ifPresent((chatMessages -> {
+            chatMessages.forEach(chatMessage -> {
+                if(!chatMessage.getRecipientId().equals(userId))
+                    chatMessage.setRecipientId("SupportService");
+                else
+                    chatMessage.setSenderId("SupportService");
+                chatMessage.setChatId(String.format("%s_%s",userId,"SupportService"));
+            });
+            repository.saveAll(chatMessages);
+        }));
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/subscribe/SubscribePlanService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/subscribe/SubscribePlanService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/subscribe/SubscribePlanService.java
new file mode 100644
--- /dev/null	(date 1730910226004)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/subscribe/SubscribePlanService.java	(date 1730910226004)
@@ -0,0 +1,100 @@
+package com.swpproject.koi_care_system.service.subscribe;
+
+import com.swpproject.koi_care_system.dto.SubscribePlanDto;
+import com.swpproject.koi_care_system.dto.UserProfileDto;
+import com.swpproject.koi_care_system.enums.ProfileStatus;
+import com.swpproject.koi_care_system.mapper.SubscribeMapper;
+import com.swpproject.koi_care_system.mapper.UserProfileMapper;
+import com.swpproject.koi_care_system.models.Order;
+import com.swpproject.koi_care_system.models.Product;
+import com.swpproject.koi_care_system.models.SubscribePlan;
+import com.swpproject.koi_care_system.models.UserProfile;
+import com.swpproject.koi_care_system.payload.request.UpgradePremiumRequest;
+import com.swpproject.koi_care_system.repository.ProductRepository;
+import com.swpproject.koi_care_system.repository.SubscribePlanRepository;
+import com.swpproject.koi_care_system.repository.UserProfileRepository;
+import lombok.RequiredArgsConstructor;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.stereotype.Service;
+import java.time.LocalDate;
+import java.util.Comparator;
+import java.util.List;
+import java.util.stream.Collectors;
+
+@Service
+@RequiredArgsConstructor
+public class SubscribePlanService implements ISubscribePlanService{
+    private final UserProfileRepository userProfileRepository;
+    private final SubscribePlanRepository subscribePlanRepository;
+    private final SubscribeMapper subscribeMapper;
+    private final UserProfileMapper userProfileMapper;
+    @Override
+    public SubscribePlan initDefault(Long userId) {
+        SubscribePlan subscribePlan = new SubscribePlan();
+        subscribePlan.setSubscribe(ProfileStatus.NORMAL);
+        subscribePlan.setStartDate(LocalDate.now());
+        subscribePlan.setExpiredDate(subscribePlan.getStartDate().plusYears(10));
+        subscribePlan.setUserProfile(userProfileRepository.findUserProfileByUserId(userId));
+        return subscribePlanRepository.save(subscribePlan);
+    }
+
+    @Override
+    public String upgradePremium(UpgradePremiumRequest request) {
+        SubscribePlan subscribePlan= subscribePlanRepository.findSubscribePlanByUserProfileId(request.getUserProfileId());
+        subscribePlan.setStartDate(LocalDate.now());
+        subscribePlan.setSubscribe(ProfileStatus.PREMIUM);
+        switch (request.getTime()) {
+            case "1MONTH" -> subscribePlan.setExpiredDate(subscribePlan.getStartDate().plusMonths(1));
+            case "6MONTHS" -> subscribePlan.setExpiredDate(subscribePlan.getStartDate().plusMonths(6));
+            case "12MONTHS" -> subscribePlan.setExpiredDate(subscribePlan.getStartDate().plusMonths(12));
+        }
+        subscribePlanRepository.save(subscribePlan);
+        return "Upgraded successful";
+    }
+
+    @PreAuthorize("hasRole('ADMIN')")
+    @Override
+    public List<SubscribePlanDto> getAllCustomer() {
+        List<SubscribePlan> subscribePlans = subscribePlanRepository.findAll();
+        return subscribePlans.stream()
+                .map(subscribePlan -> {
+                    UserProfileDto userProfileDto = userProfileMapper.mapToUserProfileDto(subscribePlan.getUserProfile());
+                    SubscribePlanDto mappedSubscribePlan = subscribeMapper.maptoDto(subscribePlan);
+                    mappedSubscribePlan.setUserProfileDto(userProfileDto);
+                    return mappedSubscribePlan;
+                })
+                .collect(Collectors.toList());
+    }
+
+    @Override
+    public void upgradePremiumAuto(Order order){
+        Long userProfileId = userProfileRepository.findUserProfileByUserId(order.getUser().getId()).getId();
+        order.getOrderItems().forEach(orderItem -> {
+            switch (orderItem.getProduct().getName()){
+                case "Premium 1 Months" -> upgradePremiumWithQuantity(userProfileId,"1MONTH", (long) orderItem.getQuantity());
+                case "Premium 6 Months" -> upgradePremiumWithQuantity(userProfileId,"6MONTHS", (long) orderItem.getQuantity());
+                case "Premium 1 Year" -> upgradePremiumWithQuantity(userProfileId,"12MONTHS", (long) orderItem.getQuantity());
+            }
+        });
+    }
+
+    private void upgradePremiumWithQuantity(Long userProfileId, String time, Long quantity){
+        SubscribePlan subscribePlan= subscribePlanRepository.findSubscribePlanByUserProfileId(userProfileId);
+        if(subscribePlan.getSubscribe().equals(ProfileStatus.NORMAL)){
+            subscribePlan.setStartDate(LocalDate.now());
+            subscribePlan.setSubscribe(ProfileStatus.PREMIUM);
+        }
+        switch (time) {
+            case "1MONTH" -> subscribePlan.setExpiredDate(subscribePlan.getStartDate().plusMonths(quantity));
+            case "6MONTHS" -> subscribePlan.setExpiredDate(subscribePlan.getStartDate().plusMonths(6*quantity));
+            case "12MONTHS" -> subscribePlan.setExpiredDate(subscribePlan.getStartDate().plusMonths(12*quantity));
+        }
+    }
+
+    public void resetDefault(Long userProfileId){
+        SubscribePlan subscribePlan= subscribePlanRepository.findSubscribePlanByUserProfileId(userProfileId);
+        subscribePlan.setSubscribe(ProfileStatus.NORMAL);
+        subscribePlan.setExpiredDate(LocalDate.MAX);
+        subscribePlanRepository.save(subscribePlan);
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/subscribe/ISubscribePlanService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/subscribe/ISubscribePlanService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/subscribe/ISubscribePlanService.java
new file mode 100644
--- /dev/null	(date 1730910226004)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/subscribe/ISubscribePlanService.java	(date 1730910226004)
@@ -0,0 +1,20 @@
+package com.swpproject.koi_care_system.service.subscribe;
+
+import com.swpproject.koi_care_system.dto.SubscribePlanDto;
+import com.swpproject.koi_care_system.models.Order;
+import com.swpproject.koi_care_system.models.SubscribePlan;
+import com.swpproject.koi_care_system.payload.request.UpgradePremiumRequest;
+
+import java.util.List;
+
+public interface ISubscribePlanService {
+    SubscribePlan initDefault(Long userId);
+
+    String upgradePremium(UpgradePremiumRequest request);
+
+    List<SubscribePlanDto> getAllCustomer();
+
+    void upgradePremiumAuto(Order order);
+
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/promotion/PromotionService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/promotion/PromotionService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/promotion/PromotionService.java
new file mode 100644
--- /dev/null	(date 1730910226003)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/promotion/PromotionService.java	(date 1730910226003)
@@ -0,0 +1,133 @@
+package com.swpproject.koi_care_system.service.promotion;
+
+import com.swpproject.koi_care_system.dto.ProductDto;
+import com.swpproject.koi_care_system.dto.PromotionDto;
+import com.swpproject.koi_care_system.enums.PromotionStatus;
+import com.swpproject.koi_care_system.exceptions.AlreadyExistsException;
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.mapper.ProductMapper;
+import com.swpproject.koi_care_system.mapper.PromotionMapper;
+import com.swpproject.koi_care_system.models.Product;
+import com.swpproject.koi_care_system.models.Promotion;
+import com.swpproject.koi_care_system.payload.request.AddPromotionRequest;
+import com.swpproject.koi_care_system.payload.request.AdminConfirmPromotionRequest;
+import com.swpproject.koi_care_system.payload.request.PromotionUpdateRequest;
+import com.swpproject.koi_care_system.repository.ProductRepository;
+import com.swpproject.koi_care_system.repository.PromotionRepository;
+
+import lombok.RequiredArgsConstructor;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.stereotype.Service;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.util.HashSet;
+import java.util.List;
+import java.util.stream.Collectors;
+
+@Service
+@RequiredArgsConstructor
+public class PromotionService implements IPromotionService {
+
+    private final PromotionRepository promotionRepository;
+    private final PromotionMapper promotionMapper;
+    private final ProductMapper productMapper;
+    private final ProductRepository productRepository;
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public PromotionDto createPromotion(AddPromotionRequest addPromotionRequest) {
+        if(promotionRepository.existsByName(addPromotionRequest.getName())){
+            throw new AlreadyExistsException("A Promotion with this name already exists");
+        }
+        Promotion promotion = promotionMapper.mapToPromotion(addPromotionRequest);
+        Promotion savedPromotion = promotionRepository.save(promotion);
+        this.addProductsToPromotion(savedPromotion.getId(),addPromotionRequest.getProductIds());
+        return promotionMapper.mapToDto(promotion);
+
+    }
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public PromotionDto updatePromotion(Long id, PromotionUpdateRequest promotionUpdateRequest) {
+        Promotion promotion = promotionRepository.findById(id)
+                .orElseThrow(()-> new ResourceNotFoundException("No promotion found with this id"));
+        if(!promotion.getStatus().equals(PromotionStatus.PENDING))
+            throw new RuntimeException("Promotion can't to edit when the status is processing");
+        promotion.getProducts().forEach(product -> product.getPromotions().remove(promotion));
+        promotion.getProducts().clear();
+        promotionMapper.updatePromotion(promotion,promotionUpdateRequest);
+        this.addProductsToPromotion(promotion.getId(),promotionUpdateRequest.getProductIds());
+        return promotionMapper.mapToDto(promotionRepository.save(promotion));
+    }
+    @Override
+    @PreAuthorize("hasRole('ADMIN')")
+    public PromotionDto verifyByAdmin(AdminConfirmPromotionRequest request) {
+        Promotion promotion = promotionRepository.findById(request.getPromotionId())
+                .orElseThrow(() -> new ResourceNotFoundException("Promotion not found with id: " + request.getPromotionId()));
+        promotionMapper.confirmPromotion(promotion,request);
+        return promotionMapper.mapToDto(promotionRepository.save(promotion));
+    }
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public void deletePromotion(Long id) {
+        promotionRepository.findById(id).ifPresentOrElse(promotion -> {
+            promotion.getProducts().forEach(product -> product.getPromotions().remove(promotion));
+            promotion.getProducts().clear();
+            promotionRepository.delete(promotion);
+        },()->{
+            throw new ResourceNotFoundException("No promotion found with this id");
+        });
+    }
+    @Override
+    public List<ProductDto> getAllProductByPromotionId(Long promotionId) {
+        return promotionRepository.findPromotionById(promotionId).getProducts()
+                .stream().map(productMapper::mapToProductDto).toList();
+    }
+
+    @Override
+    public PromotionDto getPromotionById(Long id) {
+        return promotionMapper.mapToDto(promotionRepository.findById(id).orElseThrow(()-> new ResourceNotFoundException("No promotion found with this id")));
+    }
+
+    @Override
+    public List<PromotionDto> getAllPromotions() {
+        return promotionRepository.findAll().stream().map(promotion ->{
+            switch (promotion.getStatus()){
+                case ACCEPTED -> {
+                    if(promotion.getStartDate().isBefore(LocalDateTime.now())){
+                        promotion.setStatus(PromotionStatus.PROCESSING);
+                    }
+                }
+                case PROCESSING -> {
+                    if(promotion.getEndDate().isBefore(LocalDateTime.now())){
+                        promotion.setStatus(PromotionStatus.ENDED);
+                    }
+                }
+            }
+            promotionRepository.save(promotion);
+            return promotionMapper.mapToDto(promotion);
+        }).toList();
+    }
+
+    @Override
+    public List<PromotionDto> getAllPromotionsRequest() {
+        return promotionRepository.findPromotionByStatus(PromotionStatus.PENDING).stream().map(promotionMapper::mapToDto).toList();
+    }
+
+    private void addProductsToPromotion(Long promotionId, List<Long> productIds) {
+        Promotion promotion = promotionRepository.findById(promotionId)
+                .orElseThrow(() -> new ResourceNotFoundException("Promotion not found with id: " + promotionId));
+        List<Product> products = productRepository.findAllById(productIds);
+        for (Product product : products) {
+            promotion.getProducts().add(product);
+            product.getPromotions().add(promotion);
+        }
+        productRepository.saveAll(products);
+        promotionRepository.save(promotion);
+    }
+    @Override
+    public void upToDate(){
+        this.getAllPromotions();
+    }
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/category/CategoryService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/category/CategoryService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/category/CategoryService.java
new file mode 100644
--- /dev/null	(date 1730910225997)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/category/CategoryService.java	(date 1730910225997)
@@ -0,0 +1,57 @@
+package com.swpproject.koi_care_system.service.category;
+import com.swpproject.koi_care_system.exceptions.AlreadyExistsException;
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.models.Category;
+import com.swpproject.koi_care_system.repository.CategoryRepository;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.Optional;
+
+@Service
+@RequiredArgsConstructor
+public class CategoryService implements ICategoryService {
+    private final CategoryRepository categoryRepository;
+
+    @Override
+    public Category getCategoryById(Long id) {
+        return categoryRepository.findById(id)
+                .orElseThrow(()-> new ResourceNotFoundException("Category not found!"));
+    }
+
+    @Override
+    public Category getCategoryByName(String name) {
+        return categoryRepository.findByName(name);
+    }
+
+    @Override
+    public List<Category> getAllCategories() {
+        return categoryRepository.findAll();
+    }
+
+    @Override
+    public Category addCategory(Category category) {
+        return  Optional.of(category).filter(c -> !categoryRepository.existsByName(c.getName()))
+                .map(categoryRepository :: save)
+                .orElseThrow(() -> new AlreadyExistsException(category.getName()+" already exists"));
+    }
+
+    @Override
+    public Category updateCategory(Category category, Long id) {
+        return Optional.ofNullable(getCategoryById(id)).map(oldCategory -> {
+            oldCategory.setName(category.getName());
+            return categoryRepository.save(oldCategory);
+        }) .orElseThrow(()-> new ResourceNotFoundException("Category not found!"));
+    }
+
+
+    @Override
+    public void deleteCategoryById(Long id) {
+        categoryRepository.findById(id)
+                .ifPresentOrElse(categoryRepository::delete, () -> {
+                    throw new ResourceNotFoundException("Category not found!");
+                });
+
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/profile/ProfileService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/profile/ProfileService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/profile/ProfileService.java
new file mode 100644
--- /dev/null	(date 1730910226002)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/profile/ProfileService.java	(date 1730910226002)
@@ -0,0 +1,90 @@
+package com.swpproject.koi_care_system.service.profile;
+
+import com.swpproject.koi_care_system.dto.UserProfileDto;
+import com.swpproject.koi_care_system.enums.ErrorCode;
+import com.swpproject.koi_care_system.exceptions.AppException;
+import com.swpproject.koi_care_system.mapper.UserProfileMapper;
+import com.swpproject.koi_care_system.models.User;
+import com.swpproject.koi_care_system.models.UserProfile;
+import com.swpproject.koi_care_system.payload.request.ProfileUpdateRequest;
+import com.swpproject.koi_care_system.repository.UserProfileRepository;
+import com.swpproject.koi_care_system.service.imageBlobStorage.ImageStorage;
+import com.swpproject.koi_care_system.service.subscribe.ISubscribePlanService;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.security.access.prepost.PostAuthorize;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.stereotype.Service;
+
+import java.io.IOException;
+import java.time.LocalDate;
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class ProfileService implements IProfileService {
+    UserProfileMapper userProfileMapper;
+    UserProfileRepository userProfileRepository;
+    ISubscribePlanService subscribePlanService;
+    ImageStorage imageStorage;
+
+    @Override
+    public UserProfile createProfile(User user) {
+        UserProfile userProfile = userProfileMapper.mapToUserProfile(user);
+        userProfile.setCreatedDate(LocalDate.now());
+        userProfileRepository.save(userProfile);
+        userProfile.setSubscribePlan(subscribePlanService.initDefault(user.getId()));
+        userProfile.setAvatar("https://koicaresystemv3.blob.core.windows.net/koicarestorage/defaultProfile.jpg");
+        return userProfileRepository.save(userProfile);
+    }
+
+    @Override
+    @PostAuthorize("returnObject.name == authentication.name")
+    public UserProfileDto updateProfile(Long userId, ProfileUpdateRequest profileUpdateRequest) throws IOException {
+        UserProfile userProfile = userProfileRepository.findByUserId(userId).orElseThrow(() -> new AppException(ErrorCode.PROFILE_NOT_FOUND));
+        if(profileUpdateRequest.getFile()!=null){
+            if(!profileUpdateRequest.getFile().isEmpty()){
+                try{
+                    if (!userProfile.getAvatar().equals("https://koicaresystemv3.blob.core.windows.net/koicarestorage/defaultProfile.jpg"))
+                        imageStorage.deleteImage(userProfile.getAvatar());
+                    userProfile.setAvatar(imageStorage.uploadImage(profileUpdateRequest.getFile()));
+                }catch (Exception e) {
+                    throw new RuntimeException(e);
+                }
+            }
+        }
+        userProfileMapper.updateUserProfile(userProfile, profileUpdateRequest);
+        return userProfileMapper.mapToUserProfileDto(userProfileRepository.save(userProfile));
+    }
+
+    @Override
+    public UserProfileDto getProfile(Long userId) {
+        UserProfile userProfile = userProfileRepository.findByUserId(userId).orElseThrow(() -> new AppException(ErrorCode.PROFILE_NOT_FOUND));
+        return userProfileMapper.mapToUserProfileDto(userProfile);
+    }
+
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public List<UserProfileDto> getAllProfile(){
+        return userProfileRepository.findAll().stream().map(userProfileMapper::mapToUserProfileDto).toList();
+    }
+
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public List<UserProfileDto> getAllMemberProfile() {
+        return userProfileRepository.findUserProfileByRole("MEMBER").stream().map(userProfileMapper::mapToUserProfileDto).toList();
+    }
+
+    @Override
+    public UserProfile createProfileOauth(User user, String imageUrl) {
+        UserProfile userProfile = userProfileMapper.mapToUserProfile(user);
+        userProfile.setCreatedDate(LocalDate.now());
+        userProfileRepository.save(userProfile);
+        userProfile.setAvatar(imageUrl);
+        userProfile.setSubscribePlan(subscribePlanService.initDefault(user.getId()));
+        return userProfileRepository.save(userProfile);
+    }
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/profile/IProfileService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/profile/IProfileService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/profile/IProfileService.java
new file mode 100644
--- /dev/null	(date 1730910226002)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/profile/IProfileService.java	(date 1730910226002)
@@ -0,0 +1,23 @@
+package com.swpproject.koi_care_system.service.profile;
+
+import com.swpproject.koi_care_system.dto.UserProfileDto;
+import com.swpproject.koi_care_system.models.User;
+import com.swpproject.koi_care_system.models.UserProfile;
+import com.swpproject.koi_care_system.payload.request.ProfileUpdateRequest;
+
+import java.io.IOException;
+import java.util.List;
+
+public interface IProfileService {
+    UserProfile createProfile(User user);
+
+    UserProfileDto updateProfile(Long idProfile, ProfileUpdateRequest profileUpdateRequest) throws IOException;
+
+    UserProfileDto getProfile(Long userId);
+
+    List<UserProfileDto> getAllProfile();
+
+    List<UserProfileDto> getAllMemberProfile();
+
+    UserProfile createProfileOauth(User user, String imageUrl);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/product/ProductService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/product/ProductService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/product/ProductService.java
new file mode 100644
--- /dev/null	(date 1730910226002)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/product/ProductService.java	(date 1730910226002)
@@ -0,0 +1,206 @@
+package com.swpproject.koi_care_system.service.product;
+import com.swpproject.koi_care_system.dto.*;
+import com.swpproject.koi_care_system.enums.PromotionStatus;
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.mapper.ImageMapper;
+import com.swpproject.koi_care_system.mapper.ProductMapper;
+import com.swpproject.koi_care_system.models.*;
+import com.swpproject.koi_care_system.payload.request.AddProductRequest;
+import com.swpproject.koi_care_system.payload.request.ProductUpdateRequest;
+import com.swpproject.koi_care_system.repository.*;
+import com.swpproject.koi_care_system.service.order.IOrderService;
+import com.swpproject.koi_care_system.service.promotion.IPromotionService;
+import com.swpproject.koi_care_system.service.promotion.PromotionService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Lazy;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.PageRequest;
+import org.springframework.data.domain.Pageable;
+import org.springframework.data.domain.Sort;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.stereotype.Service;
+
+import java.math.BigDecimal;
+import java.time.LocalDate;
+import java.util.*;
+import java.util.concurrent.atomic.AtomicLong;
+import java.util.concurrent.atomic.AtomicReference;
+import java.util.concurrent.atomic.AtomicInteger; // Add this import
+
+@Service
+@RequiredArgsConstructor
+public class ProductService implements IProductService {
+    private final ProductRepository productRepository;
+    private final CategoryRepository categoryRepository;
+    private final ProductMapper productMapper;
+    private final ImageRepository imageRepository;
+    private final ImageMapper imageMapper;
+    private final SupplierRepository supplierRepository;
+    private final IPromotionService promotionService;
+    private final PromotionRepository promotionRepository;
+    private final IssueTypeRepository issueTypeRepository;
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public Product addProduct(AddProductRequest request) {
+        Category category = Optional.ofNullable(categoryRepository.findByName(request.getCategory().getName()))
+                .orElseGet(() -> {
+                    Category newCategory = new Category(request.getCategory().getName());
+                    return categoryRepository.save(newCategory);
+                });
+        request.setCategory(category);
+        Supplier supplier = supplierRepository.findByName(request.getSupplierName());
+        Product product=createProduct(request, category,supplier);
+        if(request.getInventory()>0)
+            product.setStatus(true);
+        if (!request.getIssueTypeId().isEmpty()) {
+            Set<IssueType> issueTypes = new HashSet<>();
+            for (Long issueTypeId : request.getIssueTypeId()) {
+                IssueType issueType = new IssueType();
+                issueType.setId(issueTypeId);
+                issueTypes.add(issueType);
+            }
+            product.setIssues(issueTypes);
+        }
+        return productRepository.save(product);
+    }
+    private Product createProduct(AddProductRequest request, Category category, Supplier supplier) {
+        return new Product(
+                request.getName(),
+                request.getBrand(),
+                request.getPrice(),
+                request.getInventory(),
+                request.getDescription(),
+                request.getDescription_detail(),
+                category,
+                supplier
+        );
+    }
+    @Override
+    public Product getProductById(Long id) {
+        return productRepository.findById(id)
+                .orElseThrow(()-> new ResourceNotFoundException("Product not found!"));
+    }
+
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public void deleteProductById(Long id) {
+        Product product = productRepository.findById(id).orElseThrow(()->new ResourceNotFoundException("Not found "));
+        productRepository.delete(product);
+    }
+
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public Product updateProduct(ProductUpdateRequest request, Long productId) {
+        return productRepository.findById(productId)
+                .map(existingProduct -> updateExistingProduct(existingProduct,request))
+                .map(productRepository :: save)
+                .orElseThrow(()-> new ResourceNotFoundException("Product not found!"));
+    }
+
+    private Product updateExistingProduct(Product existingProduct, ProductUpdateRequest request) {
+        existingProduct.setName(request.getName());
+        existingProduct.setBrand(request.getBrand());
+        existingProduct.setPrice(request.getPrice());
+        existingProduct.setInventory(request.getInventory());
+        existingProduct.setDescription(request.getDescription());
+        existingProduct.setDescription_detail(request.getDescription_detail());
+        Supplier supplier = supplierRepository.findByName(request.getSupplierName());
+        Category category = categoryRepository.findByName(request.getCategory().getName());
+        existingProduct.setSupplier(supplier);
+        existingProduct.setCategory(category);
+        existingProduct.setStatus((request.getInventory() > 0));
+        Set<IssueType> issueTypes = new HashSet<>();
+        for (Long issueID : request.getIssueTypeId()){
+            IssueType issueType = issueTypeRepository.findById(issueID).orElseThrow(()->new RuntimeException("Issue Type not found"));
+            issueTypes.add(issueType);
+        }
+        existingProduct.setIssues(issueTypes);
+        return  existingProduct;
+
+    }
+    @Override
+    public List<Product> getAllProducts() {
+        promotionService.upToDate();
+        List<Product> productsTmp = productRepository.findAll();
+        productsTmp.forEach(product->{
+            updateProductRating(product);
+            product.getPromotions().forEach(promotion -> {
+                if(promotion.getStatus().equals(PromotionStatus.REJECTED)||promotion.getStatus().equals(PromotionStatus.ENDED)){
+                    product.getPromotions().remove(promotion);
+                    promotion.getProducts().remove(product);
+                }
+
+            });
+        });
+        List<Product> products = productRepository.findAll();
+        return products.stream().toList();
+    }
+    @Override
+    public List<Product> getProductsByCategory(String category) {
+        return productRepository.findByCategoryName(category);
+    }
+
+    @Override
+    public List<Product> getProductsByBrand(String brand) {
+        return productRepository.findByBrand(brand);
+    }
+
+    @Override
+    public List<Product> getProductsByCategoryAndBrand(String category, String brand) {
+        return productRepository.findByCategoryNameAndBrand(category, brand);
+    }
+
+    @Override
+    public List<Product> getProductsByName(String name) {
+        return productRepository.findByName(name);
+    }
+
+    @Override
+    public List<Product> getProductsByBrandAndName(String brand, String name) {
+        return productRepository.findByBrandAndName(brand, name);
+    }
+
+    @Override
+    public List<Product> getProductsBySupplier(String supplierName) {
+        return productRepository.findBySupplierName(supplierName);
+    }
+
+    @Override
+    public Long countProductsByBrandAndName(String brand, String name) {
+        return productRepository.countByBrandAndName(brand, name);
+    }
+
+    @Override
+    public List<ProductDto> getConvertedProducts(List<Product> products) {
+        return products.stream().map(this::convertToDto).toList();
+    }
+
+    @Override
+    public ProductDto convertToDto(Product product) {
+        ProductDto productDto = productMapper.mapToProductDto(product);
+
+        List<Image> images = imageRepository.findByProductId(product.getId());
+        List<ImageDto> imageDtos = images.stream()
+                .map(imageMapper::mapToImageDto)
+                .toList();
+        productDto.setImages(imageDtos);
+
+        List<PromotionDto> promotionDtos = product.getPromotions().stream()
+                .map(productMapper::mapToPromotionDto)
+                .toList();
+        productDto.setPromotions(promotionDtos);
+        return productDto;
+    }
+    @Override
+    public List<Product> getProductsByIssueType(Long issueTypeId) {
+        IssueType issueType = issueTypeRepository.findById(issueTypeId)
+                .orElseThrow(() -> new ResourceNotFoundException("IssueType not found!"));
+        return productRepository.findByIssues(issueType);
+    }
+    private void updateProductRating(Product product) {
+        product.updateRating();
+        productRepository.save(product);
+    }
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/reminder/IReminderService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/reminder/IReminderService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/reminder/IReminderService.java
new file mode 100644
--- /dev/null	(date 1730910226003)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/reminder/IReminderService.java	(date 1730910226003)
@@ -0,0 +1,21 @@
+package com.swpproject.koi_care_system.service.reminder;
+
+import com.swpproject.koi_care_system.dto.ReminderDto;
+import com.swpproject.koi_care_system.payload.request.ReminderRequest;
+
+import java.security.Principal;
+import java.util.List;
+
+public interface IReminderService {
+    ReminderDto createReminder(ReminderRequest request, Principal connectedUser);
+
+    ReminderDto updateReminder(Long id, ReminderRequest request);
+
+    void deleteReminder(Long id);
+
+    List<ReminderDto> getListReminder();
+
+    List<ReminderDto> getListReminderByUser(Principal connectedUser);
+
+    void checkReminders();
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/feedback/IFeedbackService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/feedback/IFeedbackService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/feedback/IFeedbackService.java
new file mode 100644
--- /dev/null	(date 1730910225998)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/feedback/IFeedbackService.java	(date 1730910225998)
@@ -0,0 +1,22 @@
+package com.swpproject.koi_care_system.service.feedback;
+
+import com.swpproject.koi_care_system.dto.FeedbackDto;
+import com.swpproject.koi_care_system.payload.request.EditFeedbackRequest;
+import com.swpproject.koi_care_system.payload.request.FeedbackCreateRequest;
+
+import java.util.List;
+
+public interface IFeedbackService {
+    FeedbackDto createFeedBack(FeedbackCreateRequest request);
+
+    FeedbackDto editFeedback(EditFeedbackRequest request);
+
+    List<FeedbackDto> findFeedbackByProductId(Long productID);
+
+    Boolean isPushedFeedback(Long productId, Long userId);
+
+    void deleteFeedback(Long feedbackId);
+
+    List<FeedbackDto> findFeedbackByUserId(Long userId);
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/feedback/FeedbackService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/feedback/FeedbackService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/feedback/FeedbackService.java
new file mode 100644
--- /dev/null	(date 1730910225998)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/feedback/FeedbackService.java	(date 1730910225998)
@@ -0,0 +1,97 @@
+package com.swpproject.koi_care_system.service.feedback;
+
+import com.swpproject.koi_care_system.dto.FeedbackDto;
+import com.swpproject.koi_care_system.models.Feedback;
+import com.swpproject.koi_care_system.models.Product;
+import com.swpproject.koi_care_system.models.User;
+import com.swpproject.koi_care_system.payload.request.EditFeedbackRequest;
+import com.swpproject.koi_care_system.payload.request.FeedbackCreateRequest;
+import com.swpproject.koi_care_system.repository.FeedbackRepository;
+import com.swpproject.koi_care_system.repository.ProductRepository;
+import com.swpproject.koi_care_system.repository.UserRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+@Service
+public class FeedbackService implements IFeedbackService {
+
+    @Autowired
+    private FeedbackRepository feedbackRepository;
+
+    @Autowired
+    private UserRepository userRepository;
+
+    @Autowired
+    private ProductRepository productRepository;
+
+    @Override
+    public FeedbackDto createFeedBack(FeedbackCreateRequest request) {
+        User user = userRepository.findById(request.getUserId())
+                .orElseThrow(() -> new RuntimeException("User not found"));
+        Product product = productRepository.findById(request.getProductId())
+                .orElseThrow(() -> new RuntimeException("Product not found"));
+
+        Feedback feedback = new Feedback();
+        feedback.setStar(request.getStar());
+        feedback.setComment(request.getComment());
+        feedback.setUser(user);
+        feedback.setProduct(product);
+        Feedback savedFeedback = feedbackRepository.save(feedback);
+        return convertToDto(savedFeedback);
+    }
+
+    @Override
+    public FeedbackDto editFeedback(EditFeedbackRequest request) {
+        Feedback feedback = feedbackRepository.findById(request.getId())
+                .orElseThrow(() -> new RuntimeException("Feedback not found"));
+
+        feedback.setStar(request.getStar());
+        feedback.setComment(request.getComment());
+
+        Feedback updatedFeedback = feedbackRepository.save(feedback);
+        return convertToDto(updatedFeedback);
+    }
+
+    @Override
+    public List<FeedbackDto> findFeedbackByProductId(Long productId) {
+        List<Feedback> feedbacks = feedbackRepository.findFeedbackByProductId(productId);
+        return feedbacks.stream()
+                .map(this::convertToDto)
+                .collect(Collectors.toList());
+    }
+
+    @Override
+    public Boolean isPushedFeedback(Long productId, Long userId) {
+        return !this.findFeedbackByProductId(productId).stream().filter(feedbackDto -> feedbackDto.getUserId().equals(userId)).toList().isEmpty();
+    }
+
+
+    @Override
+    public void deleteFeedback(Long feedbackId) {
+        feedbackRepository.findById(feedbackId).ifPresentOrElse(feedbackRepository::delete,()->{
+            throw new RuntimeException("Feedback not found");
+        });
+    }
+
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public List<FeedbackDto> findFeedbackByUserId(Long userId) {
+        return feedbackRepository.findFeedbackByUserId(userId).stream().map(this::convertToDto).collect(Collectors.toList());
+    }
+
+    private FeedbackDto convertToDto(Feedback feedback) {
+        FeedbackDto dto = new FeedbackDto();
+        dto.setId(feedback.getId());
+        dto.setStar(feedback.getStar());
+        dto.setComment(feedback.getComment());
+        dto.setUsername(feedback.getUser().getUsername());
+        dto.setImageUrl(feedback.getUser().getUserProfile().getAvatar());
+        dto.setProduct_id(feedback.getProduct().getId());
+        dto.setUserId(feedback.getUser().getId());
+        return dto;
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/category/ICategoryService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/category/ICategoryService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/category/ICategoryService.java
new file mode 100644
--- /dev/null	(date 1730910225997)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/category/ICategoryService.java	(date 1730910225997)
@@ -0,0 +1,15 @@
+package com.swpproject.koi_care_system.service.category;
+
+import com.swpproject.koi_care_system.models.Category;
+
+import java.util.List;
+
+public interface ICategoryService {
+    Category getCategoryById(Long id);
+    Category getCategoryByName(String name);
+    List<Category> getAllCategories();
+    Category addCategory(Category category);
+    Category updateCategory(Category category, Long id);
+    void deleteCategoryById(Long id);
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/koipond/IKoiPondService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/koipond/IKoiPondService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/koipond/IKoiPondService.java
new file mode 100644
--- /dev/null	(date 1730910226000)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/koipond/IKoiPondService.java	(date 1730910226000)
@@ -0,0 +1,21 @@
+package com.swpproject.koi_care_system.service.koipond;
+
+import com.swpproject.koi_care_system.dto.KoiPondDto;
+import com.swpproject.koi_care_system.payload.request.AddKoiPondRequest;
+import com.swpproject.koi_care_system.payload.request.KoiPondUpdateRequest;
+import com.swpproject.koi_care_system.models.KoiPond;
+
+import java.io.IOException;
+import java.time.LocalDate;
+import java.util.List;
+
+public interface IKoiPondService {
+
+    KoiPondDto addKoiPond(AddKoiPondRequest addKoiPondRequest) throws IOException;
+    KoiPondDto getKoiPondById(Long id);
+    List<KoiPondDto> getKoiPondByUserID(Long userID);
+    void deleteKoiPond(Long id);
+    KoiPondDto updateKoiPond(KoiPondUpdateRequest koiPondUpdateRequest, Long koiPondId );
+
+    List<KoiPondDto> getKoiPondByUserIdWithCurrentDate(Long userId, LocalDate date);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/koifish/KoiFishService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/koifish/KoiFishService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/koifish/KoiFishService.java
new file mode 100644
--- /dev/null	(date 1730910226000)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/koifish/KoiFishService.java	(date 1730910226000)
@@ -0,0 +1,129 @@
+package com.swpproject.koi_care_system.service.koifish;
+
+import com.swpproject.koi_care_system.dto.KoiFishDto;
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.mapper.KoiFishMapper;
+import com.swpproject.koi_care_system.models.KoiFish;
+import com.swpproject.koi_care_system.models.OriginStateOfFish;
+import com.swpproject.koi_care_system.payload.request.AddKoiFishRequest;
+import com.swpproject.koi_care_system.payload.request.KoiFishUpdateRequest;
+import com.swpproject.koi_care_system.repository.KoiFishRepository;
+import com.swpproject.koi_care_system.repository.KoiPondRepository;
+import com.swpproject.koi_care_system.repository.OriginStateOfFishRepository;
+import com.swpproject.koi_care_system.service.imageBlobStorage.ImageStorage;
+import com.swpproject.koi_care_system.service.koipond.IKoiPondService;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.stereotype.Service;
+
+import java.io.IOException;
+import java.time.LocalDate;
+import java.time.Period;
+import java.util.ArrayList;
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+
+public class KoiFishService implements IKoiFishService {
+    KoiFishRepository koiFishRepository;
+    IKoiPondService koiPondService;
+    KoiPondRepository koiPondRepository;
+    KoiFishMapper koiFishMapper;
+    ImageStorage imageStorage;
+    OriginStateOfFishRepository originStateOfFishRepository;
+    @Override
+    @PreAuthorize("hasRole('MEMBER')")
+    public KoiFishDto addKoiFish(AddKoiFishRequest addKoiFishRequest) throws IOException {
+        KoiFish koiFish = koiFishMapper.mapToKoiFish(addKoiFishRequest);
+        if(addKoiFishRequest.getFile()!=null)
+            koiFish.setImageUrl(imageStorage.uploadImage(addKoiFishRequest.getFile()));
+        else
+            koiFish.setImageUrl("https://koicaresystemv3.blob.core.windows.net/koicarestorage/defaultKoiFish.jpeg");
+        koiFish.setStatus("Alive");
+        koiFish.setKoiPond(koiPondRepository.findKoiPondsById(addKoiFishRequest.getKoiPondId()));
+        koiFish=koiFishRepository.save(koiFish);
+        originStateOfFishRepository.save(OriginStateOfFish.builder()
+                        .name(koiFish.getName())
+                        .age(koiFish.getAge())
+                        .physique(koiFish.getPhysique())
+                        .variety(koiFish.getVariety())
+                        .weight(koiFish.getWeight())
+                        .gender(koiFish.getGender())
+                        .length(koiFish.getLength())
+                        .pondDate(koiFish.getPondDate())
+                        .koiFish(koiFish)
+                .build());
+        return koiFishMapper.toDto(koiFish);
+    }
+    @Override
+    @PreAuthorize("hasRole('MEMBER')")
+    public KoiFishDto getKoiFishById(Long id) {
+        return koiFishMapper.toDto(koiFishRepository.findKoiFishById(id));
+    }
+
+    @Override
+    @PreAuthorize("hasRole('MEMBER')")
+    public List<KoiFishDto> getKoiFishByKoiPond(Long koiPondId) {
+        return koiFishRepository.findByKoiPondId(koiPondId).stream().map(koiFishMapper::toDto).toList();
+    }
+
+    @Override
+    public List<KoiFishDto> getAllFishByUserId(Long userId) {
+        List<KoiFishDto> koiFishDtos = new ArrayList<>();
+        koiPondService.getKoiPondByUserID(userId).forEach(koiPond ->
+                koiFishRepository.findByKoiPondId(koiPond.getId()).forEach(koiFish ->{
+                            koiFish.setAge(koiFish.getAge()+ Period.between(koiFish.getPondDate(),LocalDate.now()).getYears());
+                            koiFishDtos.add(koiFishMapper.toDto(koiFish));
+                        }
+                )
+        );
+        return koiFishDtos;
+    }
+    @Override
+    @PreAuthorize("hasRole('MEMBER')")
+    public void deleteKoiFish(Long id) {
+        koiFishRepository.findById(id)
+            .ifPresentOrElse(koiFishRepository::delete,()-> {
+                throw new ResourceNotFoundException("Koi Fish not found!");
+            });
+    }
+
+    @Override
+    public KoiFishDto getKoiFishByName(String name) {
+        return koiFishMapper.toDto(koiFishRepository.findKoiFishByName(name));
+    }
+
+    @Override
+    @PreAuthorize("hasRole('MEMBER')")
+    public KoiFishDto updateKoiFish(KoiFishUpdateRequest koiFishUpdateRequest, Long koiFishId) {
+        KoiFish oldKoiFish = koiFishRepository.findKoiFishById(koiFishId);
+        if(koiFishUpdateRequest.getFile()!=null)
+            if(!koiFishUpdateRequest.getFile().isEmpty()){
+                try {
+                    if (!oldKoiFish.getImageUrl().equals("https://koicaresystemv3.blob.core.windows.net/koicarestorage/defaultKoiFish.jpeg"))
+                        imageStorage.deleteImage(oldKoiFish.getImageUrl());
+                    oldKoiFish.setImageUrl(imageStorage.uploadImage(koiFishUpdateRequest.getFile()));
+                }catch (Exception e){
+                    throw new RuntimeException(e);
+                }
+            }
+        koiFishUpdateRequest.setKoiPond(koiPondRepository.findKoiPondsById(koiFishUpdateRequest.getKoiPondId()));
+        koiFishMapper.updateToKoiFish(oldKoiFish,koiFishUpdateRequest);
+        return koiFishMapper.toDto(koiFishRepository.save(oldKoiFish));
+    }
+
+    @Override
+    public List<KoiFishDto> getKoiFishByUserIdWithCurrentDate(Long userId, LocalDate date) {
+        List<KoiFishDto> koiFishDtos = new ArrayList<>();
+        koiPondService.getKoiPondByUserID(userId).forEach(koiPond ->
+                koiFishRepository.findByKoiPondId(koiPond.getId()).forEach(koiFish ->
+                        koiFishDtos.add(koiFishMapper.toDto(koiFish))
+                )
+        );
+        return koiFishDtos.stream().filter(koiFishDto -> koiFishDto.getPondDate().equals(date)).toList();
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/koifish/IKoiFishService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/koifish/IKoiFishService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/koifish/IKoiFishService.java
new file mode 100644
--- /dev/null	(date 1730910226000)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/koifish/IKoiFishService.java	(date 1730910226000)
@@ -0,0 +1,28 @@
+package com.swpproject.koi_care_system.service.koifish;
+
+import com.swpproject.koi_care_system.dto.KoiFishDto;
+import com.swpproject.koi_care_system.dto.KoiPondDto;
+import com.swpproject.koi_care_system.payload.request.AddKoiFishRequest;
+import com.swpproject.koi_care_system.payload.request.KoiFishUpdateRequest;
+
+import java.io.IOException;
+import java.time.LocalDate;
+import java.util.List;
+
+public interface IKoiFishService {
+
+    KoiFishDto addKoiFish(AddKoiFishRequest addKoiFishRequest) throws IOException;
+
+    KoiFishDto getKoiFishById(Long id);
+
+    List<KoiFishDto> getKoiFishByKoiPond(Long koiPondId);
+    List<KoiFishDto> getAllFishByUserId(Long userId);
+
+    void deleteKoiFish(Long id);
+    KoiFishDto getKoiFishByName(String name);
+
+    KoiFishDto updateKoiFish(KoiFishUpdateRequest koiFishUpdateRequest, Long koiFishId);
+
+    List<KoiFishDto> getKoiFishByUserIdWithCurrentDate(Long userId, LocalDate date);
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/report/ProductReportService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/report/ProductReportService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/report/ProductReportService.java
new file mode 100644
--- /dev/null	(date 1730910226004)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/report/ProductReportService.java	(date 1730910226004)
@@ -0,0 +1,115 @@
+package com.swpproject.koi_care_system.service.report;
+
+import com.swpproject.koi_care_system.dto.OrderDto;
+import com.swpproject.koi_care_system.dto.OrderItemDto;
+import com.swpproject.koi_care_system.dto.ProductCategoryReportDto;
+import com.swpproject.koi_care_system.dto.ProductReportDto;
+import com.swpproject.koi_care_system.models.Category;
+import com.swpproject.koi_care_system.models.Product;
+import com.swpproject.koi_care_system.service.category.ICategoryService;
+import com.swpproject.koi_care_system.service.order.IOrderService;
+import com.swpproject.koi_care_system.service.product.IProductService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+
+import java.math.BigDecimal;
+import java.math.RoundingMode;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.atomic.AtomicLong;
+import java.util.stream.Collectors;
+
+@Service
+@RequiredArgsConstructor
+public class ProductReportService {
+    private final IOrderService orderService;
+    private final IProductService productService;
+    private final ICategoryService categoryService;
+    public List<ProductReportDto> getProductReport(){
+        List<OrderDto> orderDtos = orderService.getOrdersInOneMonth();
+        List<Product> allProducts = productService.getAllProducts();
+
+        Map<String, ProductReportDto> productReportMap = allProducts.stream()
+                .collect(Collectors.toMap(
+                        Product::getName,
+                        product -> ProductReportDto.builder()
+                                .id(product.getId())
+                                .imageUrl((!product.getImages().isEmpty())?product.getImages().get(0).getDownloadUrl():"")
+                                .productName(product.getName())
+                                .categoryName(product.getCategory().getName())
+                                .quantity(0L)
+                                .totalPrice(BigDecimal.ZERO)
+                                .build()
+                ));
+        AtomicLong totalQuantity = new AtomicLong(0L);
+
+        for (OrderDto orderDto : orderDtos) {
+            for (OrderItemDto orderItemDto : orderDto.getItems()) {
+                ProductReportDto reportDto = productReportMap.get(orderItemDto.getProductName());
+                if (reportDto != null) {
+                    long orderQuantity = orderItemDto.getQuantity();
+                    reportDto.setQuantity(reportDto.getQuantity() + orderQuantity);
+                    if(!"Premium Plan".equals(reportDto.getCategoryName()))
+                        totalQuantity.addAndGet(orderQuantity);
+
+                    reportDto.setTotalPrice(reportDto.getTotalPrice().add(
+                            orderItemDto.getPrice().multiply(BigDecimal.valueOf(orderQuantity))
+                    ));
+                }
+
+            }
+        }
+        BigDecimal totalQuantityBigDecimal = BigDecimal.valueOf(totalQuantity.get());
+        if (totalQuantityBigDecimal.compareTo(BigDecimal.ZERO) > 0) {
+            productReportMap.values().forEach(reportDto -> {
+                BigDecimal quantityBigDecimal = BigDecimal.valueOf(reportDto.getQuantity());
+                BigDecimal percent = quantityBigDecimal
+                        .multiply(BigDecimal.valueOf(100))
+                        .divide(totalQuantityBigDecimal, 2, RoundingMode.HALF_UP);
+                reportDto.setPercent(percent.doubleValue());
+            });
+        }
+        return productReportMap.values().stream()
+                .filter(reportDto -> !"Premium Plan".equals(reportDto.getCategoryName()))
+                .sorted((r1, r2) -> r2.getPercent().compareTo(r1.getPercent()))
+                .toList();
+    }
+
+    public List<ProductCategoryReportDto> getProductCategoryReport(){
+        List<ProductReportDto> reportDtos = this.getProductReport();
+        Map<String,ProductCategoryReportDto> productCategoryReportDtoMap =categoryService.getAllCategories().stream()
+                .collect(Collectors.toMap(
+                        Category::getName,
+                        category -> ProductCategoryReportDto.builder()
+                                .categoryName(category.getName())
+                                .percent(0.0)
+                                .quantity(0L)
+                                .totalPrice(BigDecimal.ZERO)
+                                .build()
+                ));
+
+        for (ProductReportDto reportDto : reportDtos) {
+            ProductCategoryReportDto categoryReportDto = productCategoryReportDtoMap.get(reportDto.getCategoryName());
+            categoryReportDto.setQuantity(categoryReportDto.getQuantity() + reportDto.getQuantity());
+            categoryReportDto.setTotalPrice(categoryReportDto.getTotalPrice().add(reportDto.getTotalPrice()));
+        }
+
+        BigDecimal overallTotalPrice = productCategoryReportDtoMap.values().stream()
+                .map(ProductCategoryReportDto::getTotalPrice)
+                .reduce(BigDecimal.ZERO, BigDecimal::add);
+
+        if (overallTotalPrice.compareTo(BigDecimal.ZERO) > 0) {
+            productCategoryReportDtoMap.values().forEach(categoryReportDto -> {
+                BigDecimal categoryTotalPrice = categoryReportDto.getTotalPrice();
+                BigDecimal percent = categoryTotalPrice
+                        .multiply(BigDecimal.valueOf(100))
+                        .divide(overallTotalPrice, 2, RoundingMode.HALF_UP);
+                categoryReportDto.setPercent(percent.doubleValue());
+            });
+        }
+        return productCategoryReportDtoMap.values().stream()
+                .filter(productCategoryReportDto -> !"Premium Plan".equals(productCategoryReportDto.getCategoryName()))
+                .sorted((r1,r2)->r2.getPercent().compareTo(r1.getPercent()))
+                .toList();
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/product/IProductService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/product/IProductService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/product/IProductService.java
new file mode 100644
--- /dev/null	(date 1730910226002)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/product/IProductService.java	(date 1730910226002)
@@ -0,0 +1,28 @@
+package com.swpproject.koi_care_system.service.product;
+
+import com.swpproject.koi_care_system.dto.ProductDto;
+import com.swpproject.koi_care_system.dto.ProductReportDto;
+import com.swpproject.koi_care_system.models.Product;
+import com.swpproject.koi_care_system.payload.request.AddProductRequest;
+import com.swpproject.koi_care_system.payload.request.ProductUpdateRequest;
+
+import java.util.List;
+
+public interface IProductService {
+    Product addProduct(AddProductRequest product);
+    Product getProductById(Long id);
+    void deleteProductById(Long id);
+    Product updateProduct(ProductUpdateRequest product, Long productId);
+    List<Product> getAllProducts();
+    List<Product> getProductsByCategory(String category);
+    List<Product> getProductsByBrand(String brand);
+    List<Product> getProductsByCategoryAndBrand(String category, String brand);
+    List<Product> getProductsByName(String name);
+    List<Product> getProductsByBrandAndName(String category, String name);
+    List<Product> getProductsBySupplier(String supplierName);
+    Long countProductsByBrandAndName(String brand, String name);
+    List<Product> getProductsByIssueType(Long issueTypeId);
+    List<ProductDto> getConvertedProducts(List<Product> products);
+
+    ProductDto convertToDto(Product product);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/payment/PaymentService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/payment/PaymentService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/payment/PaymentService.java
new file mode 100644
--- /dev/null	(date 1730910226002)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/payment/PaymentService.java	(date 1730910226002)
@@ -0,0 +1,65 @@
+package com.swpproject.koi_care_system.service.payment;
+
+import com.swpproject.koi_care_system.dto.PaymentDto;
+import com.swpproject.koi_care_system.enums.OrderStatus;
+import com.swpproject.koi_care_system.mapper.PaymentMapper;
+import com.swpproject.koi_care_system.models.Order;
+import com.swpproject.koi_care_system.models.Payment;
+import com.swpproject.koi_care_system.payload.request.PaymentStoreRequest;
+import com.swpproject.koi_care_system.repository.OrderRepository;
+import com.swpproject.koi_care_system.repository.PaymentRepository;
+import com.swpproject.koi_care_system.service.order.IOrderService;
+import com.swpproject.koi_care_system.service.subscribe.SubscribePlanService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.stereotype.Service;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Collectors;
+
+@Service
+@RequiredArgsConstructor
+public class PaymentService implements IPaymentService {
+
+    private final PaymentMapper paymentMapper;
+    private final PaymentRepository paymentRepository;
+    private final OrderRepository orderRepository;
+    private final SubscribePlanService service;
+    private final IOrderService orderService;
+    @Override
+    public PaymentDto storePayment(PaymentStoreRequest request) {
+        Payment payment = paymentMapper.mapToPayment(request);
+        Order order = orderRepository.findByOrderId(request.getOrderId());
+        if(request.getStatus().equals("00")){
+            order.setOrderStatus(orderService.isPremiumOrder(request.getOrderId())?OrderStatus.DELIVERED:OrderStatus.PROCESSING);
+            payment.setStatus("COMPLETED");
+            service.upgradePremiumAuto(order);
+        }
+        else{
+            payment.setStatus("CANCELLED");
+            order.setOrderStatus(OrderStatus.CANCELLED);
+            orderService.returnQuantityIntoInventory(request.getOrderId());
+
+        }
+        orderRepository.save(order);
+        payment.setOrder(order);
+        return paymentMapper.mapToDto(paymentRepository.save(payment));
+    }
+
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public List<PaymentDto> getAllPayment() {
+        return paymentRepository.findAll().stream().map(paymentMapper::mapToDto).collect(Collectors.toList());
+    }
+
+    @Override
+    public List<PaymentDto> getAllPaymentByUserId(Long userId) {
+        List<Order> orderDtoList = orderRepository.findByUserId(userId);
+        List<PaymentDto> paymentDtoList = new ArrayList<>();
+        orderDtoList.forEach(order -> {
+            paymentDtoList.addAll(paymentRepository.findPaymentsByOrder_OrderId(order.getOrderId()).stream().map(paymentMapper::mapToDto).toList());
+        });
+        return paymentDtoList;
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/payment/IPaymentService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/payment/IPaymentService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/payment/IPaymentService.java
new file mode 100644
--- /dev/null	(date 1730910226002)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/payment/IPaymentService.java	(date 1730910226002)
@@ -0,0 +1,16 @@
+package com.swpproject.koi_care_system.service.payment;
+
+import com.swpproject.koi_care_system.dto.PaymentDto;
+import com.swpproject.koi_care_system.payload.request.PaymentStoreRequest;
+
+import java.util.List;
+
+public interface IPaymentService {
+    PaymentDto storePayment(PaymentStoreRequest request);
+
+    List<PaymentDto> getAllPayment();
+
+    List<PaymentDto> getAllPaymentByUserId(Long userId);
+
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/koipond/KoiPondService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/koipond/KoiPondService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/koipond/KoiPondService.java
new file mode 100644
--- /dev/null	(date 1730910226000)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/koipond/KoiPondService.java	(date 1730910226000)
@@ -0,0 +1,95 @@
+package com.swpproject.koi_care_system.service.koipond;
+
+import com.swpproject.koi_care_system.dto.KoiPondDto;
+import com.swpproject.koi_care_system.exceptions.AlreadyExistsException;
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.mapper.KoiPondMapper;
+import com.swpproject.koi_care_system.models.KoiPond;
+import com.swpproject.koi_care_system.payload.request.AddKoiPondRequest;
+import com.swpproject.koi_care_system.payload.request.KoiPondUpdateRequest;
+import com.swpproject.koi_care_system.repository.KoiPondRepository;
+import com.swpproject.koi_care_system.service.imageBlobStorage.ImageStorage;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.stereotype.Service;
+
+import java.io.IOException;
+import java.time.LocalDate;
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class KoiPondService implements IKoiPondService {
+    KoiPondRepository koiPondRepository;
+    KoiPondMapper koiPondMapper;
+    ImageStorage imageStorage;
+    @Override
+    @PreAuthorize("hasRole('MEMBER')")
+    public KoiPondDto addKoiPond(AddKoiPondRequest addKoiPondRequest) throws IOException {
+        if (koiPondRepository.existsByNameAndUserId(addKoiPondRequest.getName(), addKoiPondRequest.getUser().getId())) {
+            throw new AlreadyExistsException("Koi Pond with name " + addKoiPondRequest.getName() + " already exists!");
+        }
+        KoiPond koiPond = koiPondMapper.mapToKoiPond(addKoiPondRequest);
+        if(addKoiPondRequest.getFile()!=null)
+            koiPond.setImageUrl(!addKoiPondRequest.getFile().isEmpty() ? imageStorage.uploadImage(addKoiPondRequest.getFile()) : "https://koicaresystemv3.blob.core.windows.net/koicarestorage/defaultKoiPond.jpg");
+        else
+            koiPond.setImageUrl("https://koicaresystemv3.blob.core.windows.net/koicarestorage/defaultKoiPond.jpg");
+        return koiPondMapper.toDto(koiPondRepository.save(koiPond));
+    }
+    @Override
+    @PreAuthorize("hasRole('MEMBER')")
+    public KoiPondDto getKoiPondById(Long id) {
+        return koiPondMapper.toDto(koiPondRepository.findKoiPondsById(id));
+    }
+    @Override
+    @PreAuthorize("hasRole('MEMBER')")
+    public List<KoiPondDto> getKoiPondByUserID(Long userID) {
+        return  koiPondRepository.findByUserId(userID).stream().map(koiPondMapper::toDto).toList();
+    }
+    @Override
+    @PreAuthorize("hasRole('MEMBER')")
+    public void deleteKoiPond(Long id) {
+        koiPondRepository.findById(id)
+                .ifPresentOrElse(koiPond -> {
+                    if (!koiPond.getImageUrl().equals("https://koicaresystemv3.blob.core.windows.net/koicarestorage/defaultKoiPond.jpg")) {
+                        try {
+                            imageStorage.deleteImage(koiPond.getImageUrl());
+                        }catch (Exception e){
+                            throw new RuntimeException(e);
+                        }
+                    }
+                    koiPondRepository.delete(koiPond);
+                },()-> {
+                    throw new ResourceNotFoundException("Koi Pond not found!");
+                });
+    }
+    @Override
+    @PreAuthorize("hasRole('MEMBER')")
+    public KoiPondDto updateKoiPond(KoiPondUpdateRequest koiPondUpdateRequest, Long koiPondId) {
+
+        KoiPond oldKoiPond = koiPondRepository.findKoiPondsById(koiPondId);
+        if(koiPondUpdateRequest.getFile()!=null) {
+            if(!koiPondUpdateRequest.getFile().isEmpty())
+                try {
+                    if (!oldKoiPond.getImageUrl().equals("https://koicaresystemv3.blob.core.windows.net/koicarestorage/defaultKoiPond.jpg"))
+                        imageStorage.deleteImage(oldKoiPond.getImageUrl());
+                    oldKoiPond.setImageUrl(imageStorage.uploadImage(koiPondUpdateRequest.getFile()));
+                } catch (IOException e) {
+                    throw new RuntimeException(e);
+                }
+        }
+        koiPondMapper.updateToKoiPond(oldKoiPond,koiPondUpdateRequest);
+        return koiPondMapper.toDto(koiPondRepository.save(oldKoiPond));
+    }
+
+    @Override
+    public List<KoiPondDto> getKoiPondByUserIdWithCurrentDate(Long userId, LocalDate date){
+        return  koiPondRepository.findKoiPondsByUserId(userId)
+                .stream().map(koiPondMapper::toDto)
+                .filter(koiPondDto -> koiPondDto.getCreateDate().equals(date))
+                .toList();
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/vnpay/VnPayService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/vnpay/VnPayService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/vnpay/VnPayService.java
new file mode 100644
--- /dev/null	(date 1730910226005)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/vnpay/VnPayService.java	(date 1730910226005)
@@ -0,0 +1,70 @@
+package com.swpproject.koi_care_system.service.vnpay;
+
+import com.swpproject.koi_care_system.config.VnPayConfig;
+import com.swpproject.koi_care_system.dto.VnPayDto;
+import com.swpproject.koi_care_system.models.Order;
+import com.swpproject.koi_care_system.repository.OrderRepository;
+import com.swpproject.koi_care_system.service.order.IOrderService;
+import com.swpproject.koi_care_system.utils.VNPayUtil;
+import jakarta.servlet.http.HttpServletRequest;
+import lombok.RequiredArgsConstructor;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.stereotype.Service;
+
+import java.util.Map;
+
+@Service
+@RequiredArgsConstructor
+public class VnPayService {
+    private final VnPayConfig vnPayConfig;
+    private final IOrderService orderService;
+    private final OrderRepository orderRepository;
+    @Value("${payment.vnPay.secretKey}")
+    private String secretKey;
+    @Value("${payment.vnPay.url}")
+    private String vnp_PayUrl;
+    public VnPayDto createVnPayPayment(HttpServletRequest request) {
+        long amount = Integer.parseInt(request.getParameter("amount")) * 100L;
+        String bankCode = request.getParameter("bankCode");
+        Map<String, String> vnpParamsMap = vnPayConfig.getVNPayConfig();
+        vnpParamsMap.put("vnp_Amount", String.valueOf(amount));
+        if (bankCode != null && !bankCode.isEmpty()) {
+            vnpParamsMap.put("vnp_BankCode", bankCode);
+        }
+        Long userId = Long.parseLong(request.getParameter("userId"));
+        Long orderId = orderService.getUserOrders(userId).getLast().getId();
+        //Long orderId = 1L;s
+        vnpParamsMap.put("vnp_OrderInfo","Thanh toan cho don hang # "+ orderId);
+        vnpParamsMap.put("vnp_IpAddr", VNPayUtil.getIpAddress(request));
+        //build query url
+        String queryUrl = VNPayUtil.getPaymentURL(vnpParamsMap, true);
+        String hashData = VNPayUtil.getPaymentURL(vnpParamsMap, false);
+        String vnpSecureHash = VNPayUtil.hmacSHA512(secretKey, hashData);
+        queryUrl += "&vnp_SecureHash=" + vnpSecureHash;
+        String paymentUrl = vnp_PayUrl + "?" + queryUrl;
+        return VnPayDto.builder()
+                .message("success")
+                .paymentUrl(paymentUrl).build();
+    }
+    public VnPayDto createVnPayPaymentViaOrderId(HttpServletRequest request) {
+        Order order = orderRepository.findByOrderId(Long.parseLong(request.getParameter("orderId")));
+        long amount = order.getTotalAmount().longValue()*100L;
+        String bankCode = request.getParameter("bankCode");
+        Map<String, String> vnpParamsMap = vnPayConfig.getVNPayConfig();
+        vnpParamsMap.put("vnp_Amount", String.valueOf(amount));
+        if (bankCode != null && !bankCode.isEmpty()) {
+            vnpParamsMap.put("vnp_BankCode", bankCode);
+        }
+        vnpParamsMap.put("vnp_OrderInfo","Thanh toan cho don hang # "+ order.getOrderId());
+        vnpParamsMap.put("vnp_IpAddr", VNPayUtil.getIpAddress(request));
+        //build query url
+        String queryUrl = VNPayUtil.getPaymentURL(vnpParamsMap, true);
+        String hashData = VNPayUtil.getPaymentURL(vnpParamsMap, false);
+        String vnpSecureHash = VNPayUtil.hmacSHA512(secretKey, hashData);
+        queryUrl += "&vnp_SecureHash=" + vnpSecureHash;
+        String paymentUrl = vnp_PayUrl + "?" + queryUrl;
+        return VnPayDto.builder()
+                .message("success")
+                .paymentUrl(paymentUrl).build();
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/order/OrderService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/order/OrderService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/order/OrderService.java
new file mode 100644
--- /dev/null	(date 1730910226001)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/order/OrderService.java	(date 1730910226001)
@@ -0,0 +1,197 @@
+package com.swpproject.koi_care_system.service.order;
+
+import com.swpproject.koi_care_system.dto.OrderDto;
+import com.swpproject.koi_care_system.dto.OrderItemDto;
+import com.swpproject.koi_care_system.enums.OrderStatus;
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.mapper.OrderMapper;
+import com.swpproject.koi_care_system.models.*;
+import com.swpproject.koi_care_system.payload.request.PlaceOrderRequest;
+import com.swpproject.koi_care_system.payload.request.PlacePremiumOrderRequest;
+import com.swpproject.koi_care_system.repository.OrderRepository;
+import com.swpproject.koi_care_system.repository.ProductRepository;
+import com.swpproject.koi_care_system.repository.UserProfileRepository;
+import com.swpproject.koi_care_system.service.cart.CartItemService;
+import com.swpproject.koi_care_system.service.cart.CartService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.math.BigDecimal;
+import java.time.LocalDateTime;
+import java.util.Comparator;
+import java.util.HashSet;
+import java.util.List;
+import java.util.concurrent.atomic.AtomicReference;
+
+@Service
+@RequiredArgsConstructor
+public class OrderService implements IOrderService {
+    private final OrderRepository orderRepository;
+    private final ProductRepository productRepository;
+    private final CartService cartService;
+    private final OrderMapper orderMapper;
+    private final CartItemService cartItemService;
+    private final UserProfileRepository userProfileRepository;
+    @Transactional
+    @Override
+    public OrderDto placeOrder(PlaceOrderRequest request) {
+        Cart cart = cartService.getCartByUserId(request.getUserId());
+        Order order = createOrder(cart);
+        List<OrderItem> orderItemList = createOrderItems(order, cart);
+        order.setAddress(request.getAddress());
+        order.setPhone(request.getPhone());
+        order.setRecipientName(request.getRecipientName());
+        order.setNote(request.getNote());
+        order.setOrderItems(new HashSet<>(orderItemList));
+        order.setTotalAmount(calculateTotalAmount(orderItemList));
+        Order savedOrder = orderRepository.save(order);
+        cartService.clearCart(cart.getId());
+        return orderMapper.toDto(savedOrder);
+    }
+
+    @Override
+    public OrderDto placePremiumPlanOrder(PlacePremiumOrderRequest request) {
+        Cart virtualCart = cartService.getCartByUserId(request.getUserId());
+        cartService.clearCart(virtualCart.getId());
+        List<Product> products = productRepository.findByBrand("KoiCareSystem")
+                .stream()
+                .sorted(Comparator.comparing(Product::getName))
+                .toList();
+        switch (request.getTime()) {
+            case "1MONTH" -> cartItemService.addItemToCart(virtualCart.getId(), products.get(0).getId(), 1);
+            case "6MONTHS" -> cartItemService.addItemToCart(virtualCart.getId(), products.get(2).getId(), 1);
+            case "1YEAR" -> cartItemService.addItemToCart(virtualCart.getId(), products.get(1).getId(), 1);
+        }
+        UserProfile userProfile = userProfileRepository.findUserProfileByUserId(request.getUserId());
+        Order order = createOrder(virtualCart);
+        List<OrderItem> orderItemList = createOrderItems(order,virtualCart);
+        order.setAddress(userProfile.getAddress());
+        order.setPhone(userProfile.getPhone());
+        order.setRecipientName(userProfile.getName());
+        order.setOrderItems(new HashSet<>(orderItemList));
+        order.setTotalAmount(calculateTotalAmount(orderItemList));
+        cartService.clearCart(virtualCart.getId());
+        return orderMapper.toDto(orderRepository.save(order));
+    }
+
+    private Order createOrder(Cart cart) {
+        Order order = new Order();
+        order.setUser(cart.getUser());
+        order.setOrderStatus(OrderStatus.PENDING);
+        order.setOrderDate(LocalDateTime.now());
+        return  order;
+    }
+
+    private List<OrderItem> createOrderItems(Order order, Cart cart) {
+        return  cart.getItems().stream().map(cartItem -> {
+            Product product = cartItem.getProduct();
+            if((product.getInventory()-cartItem.getQuantity()) < 0){
+                throw new RuntimeException("The quantity in inventory is not enough for your order");
+            }
+            product.setInventory((product.getInventory() - cartItem.getQuantity()));
+            if(product.getInventory()==0)
+                product.setStatus(false);
+            productRepository.save(product);
+            String imageUrl = (!product.getImages().isEmpty() ? product.getImages().get(0).getDownloadUrl() :"");
+            return  new OrderItem(
+                    order,
+                    product,
+                    cartItem.getQuantity(),
+                    cartItem.getUnitPrice(),
+                    imageUrl,
+                    product.getCategory().getName()
+            );
+        }).toList();
+    }
+
+    private BigDecimal calculateTotalAmount(List<OrderItem> orderItemList) {
+        return  orderItemList
+                .stream()
+                .map(item -> item.getPrice()
+                        .multiply(new BigDecimal(item.getQuantity())))
+                .reduce(BigDecimal.ZERO, BigDecimal::add);
+    }
+
+    @Override
+    public OrderDto getOrder(Long orderId) {
+        return orderRepository.findById(orderId)
+                .map(orderMapper::toDto)
+                .orElseThrow(() -> new ResourceNotFoundException("Order not found"));
+    }
+
+    @Override
+    public List<OrderDto> getUserOrders(Long userId) {
+        List<Order> orders = orderRepository.findByUserId(userId);
+        return  orders.stream().map(orderMapper :: toDto).toList();
+    }
+
+    @Override
+    public List<OrderDto> getAllOrders() {
+        List<Order> orders = orderRepository.findAll();
+        orders.forEach(order -> {
+            if (order.getOrderStatus().equals(OrderStatus.PENDING) && order.getOrderDate().isBefore(LocalDateTime.now().minusDays(1))) {
+                order.setOrderStatus(OrderStatus.CANCELLED);
+                returnQuantityIntoInventory(order.getOrderId());
+                orderRepository.save(order);
+            }
+        });
+        return orders.stream()
+                .map(orderMapper::toDto)
+                .toList();
+    }
+
+
+    @Override
+    public List<OrderDto> getOrdersInOneMonth() {
+        return  orderRepository.findAll().stream()
+                .map(orderMapper::toDto)
+                .filter(order -> order.getOrderDate().isAfter(LocalDateTime.now().minusMonths(1))&& (order.getStatus().equals(OrderStatus.DELIVERED.toString())||order.getStatus().equals(OrderStatus.PROCESSING.toString())))
+                .toList();
+    }
+
+    @Override
+    public LocalDateTime isBoughtProduct(Long userId, Long productId) {
+        List<OrderDto> orders = this.getUserOrders(userId);
+        List<OrderDto> sortedDeliveredOrders = orders.stream()
+                .filter(orderDto -> orderDto.getStatus().equals(OrderStatus.DELIVERED.toString()))
+                .sorted(Comparator.comparing(OrderDto::getOrderDate))
+                .toList();
+
+        LocalDateTime defaultDateTime = LocalDateTime.of(1, 1, 1, 0, 0, 0);
+        for (OrderDto orderDto : sortedDeliveredOrders) {
+            for (OrderItemDto orderItemDto : orderDto.getItems()) {
+                if (orderItemDto.getProductId().equals(productId)) {
+                    return orderDto.getOrderDate();
+                }
+            }
+        }
+        return defaultDateTime;
+    }
+
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public void updateDeliveredStatus(Long orderId) {
+        Order order = orderRepository.findByOrderId(orderId);
+        order.setOrderStatus(OrderStatus.DELIVERED);
+        orderRepository.save(order);
+    }
+    @Override
+    public void returnQuantityIntoInventory(Long orderId) {
+        Order order = orderRepository.findByOrderId(orderId);
+        order.getOrderItems().forEach(orderItem ->
+                productRepository.findById(orderItem.getProduct().getId()).ifPresent(product -> {
+                    product.setInventory(product.getInventory() + orderItem.getQuantity());
+                    productRepository.save(product);
+                })
+        );
+    }
+
+    @Override
+    public boolean isPremiumOrder(Long orderId) {
+        Order order = orderRepository.findByOrderId(orderId);
+        return (order.getOrderItems().size() == 1 && order.getOrderItems().stream().allMatch(orderItem -> orderItem.getProduct().getCategory().getName().equals("Premium Plan")));
+    }
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/order/IOrderService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/order/IOrderService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/order/IOrderService.java
new file mode 100644
--- /dev/null	(date 1730910226001)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/order/IOrderService.java	(date 1730910226001)
@@ -0,0 +1,29 @@
+package com.swpproject.koi_care_system.service.order;
+
+import com.swpproject.koi_care_system.dto.OrderDto;
+import com.swpproject.koi_care_system.models.Order;
+import com.swpproject.koi_care_system.payload.request.PlaceOrderRequest;
+import com.swpproject.koi_care_system.payload.request.PlacePremiumOrderRequest;
+
+import java.time.LocalDateTime;
+import java.util.List;
+
+public interface IOrderService {
+    OrderDto placeOrder(PlaceOrderRequest request);
+
+    OrderDto placePremiumPlanOrder(PlacePremiumOrderRequest request);
+    OrderDto getOrder(Long orderId);
+    List<OrderDto> getUserOrders(Long userId);
+
+    List<OrderDto> getAllOrders();
+
+    List<OrderDto> getOrdersInOneMonth();
+
+    LocalDateTime isBoughtProduct(Long userId, Long productId);
+
+    void updateDeliveredStatus(Long orderId);
+
+    void returnQuantityIntoInventory(Long orderId);
+
+    boolean isPremiumOrder(Long orderId);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/issue/IssueTypeService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/issue/IssueTypeService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/issue/IssueTypeService.java
new file mode 100644
--- /dev/null	(date 1730910226000)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/issue/IssueTypeService.java	(date 1730910226000)
@@ -0,0 +1,48 @@
+package com.swpproject.koi_care_system.service.issue;
+
+import com.swpproject.koi_care_system.dto.IssueTypeDto;
+import com.swpproject.koi_care_system.enums.RangeParameter;
+import com.swpproject.koi_care_system.mapper.IssueTypeMapper;
+import com.swpproject.koi_care_system.models.IssueType;
+import com.swpproject.koi_care_system.repository.IssueTypeRepository;
+import jakarta.annotation.PostConstruct;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.cache.annotation.Cacheable;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+@Service
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class IssueTypeService implements IIssueTypeService {
+    IssueTypeRepository issueTypeRepository;
+    IssueTypeMapper issueTypeMapper;
+    @PostConstruct
+    public void init() {
+        for (RangeParameter parameter : RangeParameter.values()) {
+            // Create HIGH IssueType if it doesn't exist
+            if (issueTypeRepository.findByParameterTypeAndConditionType(parameter, "HIGH") == null) {
+                IssueType highIssueType = new IssueType();
+                highIssueType.setParameterType(parameter);
+                highIssueType.setConditionType("HIGH");
+                issueTypeRepository.save(highIssueType);
+            }
+
+            // Create LOW IssueType if it doesn't exist
+            if (issueTypeRepository.findByParameterTypeAndConditionType(parameter, "LOW") == null) {
+                IssueType lowIssueType = new IssueType();
+                lowIssueType.setParameterType(parameter);
+                lowIssueType.setConditionType("LOW");
+                issueTypeRepository.save(lowIssueType);
+            }
+        }
+    }
+
+    @Override
+    @Cacheable("issueTypes")
+    public List<IssueTypeDto> getAllIssueType() {
+        return issueTypeRepository.findAll().stream().map(issueTypeMapper::maptodto).toList();
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/report/FishPondWaterTimeReportService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/report/FishPondWaterTimeReportService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/report/FishPondWaterTimeReportService.java
new file mode 100644
--- /dev/null	(date 1730910226004)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/report/FishPondWaterTimeReportService.java	(date 1730910226004)
@@ -0,0 +1,28 @@
+package com.swpproject.koi_care_system.service.report;
+
+
+import com.swpproject.koi_care_system.dto.ReportByDateDto;
+import com.swpproject.koi_care_system.service.koifish.IKoiFishService;
+import com.swpproject.koi_care_system.service.koipond.IKoiPondService;
+import com.swpproject.koi_care_system.service.waterparameter.IWaterParameters;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+
+import java.time.LocalDate;
+
+@Service
+@RequiredArgsConstructor
+public class FishPondWaterTimeReportService {
+    private final IKoiPondService koiPondService;
+    private final IKoiFishService koiFishService;
+    private final IWaterParameters waterParameters;
+
+    public ReportByDateDto getFishPondWaterTimeReport(Long userId, LocalDate date){
+        return ReportByDateDto.builder()
+                .koiFishs(koiFishService.getKoiFishByUserIdWithCurrentDate(userId,date))
+                .koiPonds(koiPondService.getKoiPondByUserIdWithCurrentDate(userId,date))
+                .waterParameters(waterParameters.getAllWaterParametersByUserIdAndCurrentDate(userId,date))
+                .build();
+    }
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/report/FishGrowthReportService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/report/FishGrowthReportService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/report/FishGrowthReportService.java
new file mode 100644
--- /dev/null	(date 1730910226003)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/report/FishGrowthReportService.java	(date 1730910226003)
@@ -0,0 +1,98 @@
+package com.swpproject.koi_care_system.service.report;
+
+import com.swpproject.koi_care_system.dto.FishGrowthReportDto;
+import com.swpproject.koi_care_system.dto.GrowthHistoryDto;
+import com.swpproject.koi_care_system.models.OriginStateOfFish;
+import com.swpproject.koi_care_system.repository.OriginStateOfFishRepository;
+import com.swpproject.koi_care_system.service.growthhistory.IGrowthHistoryService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+
+import java.time.LocalDate;
+import java.time.Period;
+import java.time.temporal.ChronoUnit;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+public class FishGrowthReportService {
+
+    private final List<Double> growthRates = Arrays.asList(0.076, 0.06, 0.0334, 0.022, 0.015, 0.01, 0.0097, 0.007, 0.0017);
+    private final IGrowthHistoryService growthHistoryService;
+    private final OriginStateOfFishRepository originStateOfFishRepository;
+
+    public List<FishGrowthReportDto> getFishGrowthReport(Long koiFishId) {
+        List<FishGrowthReportDto> reportDtos = new ArrayList<>();
+        List<GrowthHistoryDto> growthHistoryDtos = growthHistoryService.getListGrowthHistory(koiFishId);
+
+        if (!growthHistoryDtos.isEmpty()) {
+            OriginStateOfFish originStateOfFish = originStateOfFishRepository.findOriginStateOfFishByKoiFishId(koiFishId);
+            reportDtos.add(createInitialReportDto(originStateOfFish));
+
+            for (int i = 0; i < growthHistoryDtos.size(); i++) {
+                GrowthHistoryDto growthHistory = growthHistoryDtos.get(i);
+                double lengthTmp = calculateLength(originStateOfFish, reportDtos.get(i), growthHistory);
+                double weightTmp = calculateWeight(growthHistory.getPhysique(), lengthTmp);
+
+                reportDtos.add(createGrowthReportDto(growthHistory, lengthTmp, weightTmp));
+            }
+        }
+
+        return reportDtos;
+    }
+
+    private FishGrowthReportDto createInitialReportDto(OriginStateOfFish originStateOfFish) {
+        return FishGrowthReportDto.builder()
+                .id(originStateOfFish.getId())
+                .createDate(originStateOfFish.getPondDate().atTime(0, 0, 0))
+                .length(originStateOfFish.getLength())
+                .physique(originStateOfFish.getPhysique())
+                .weight(originStateOfFish.getWeight())
+                .build();
+    }
+
+    private double calculateLength(OriginStateOfFish originState, FishGrowthReportDto previousReport, GrowthHistoryDto growthHistory) {
+        LocalDate pondDate = originState.getPondDate();
+        int age = originState.getAge();
+        LocalDate reportDate = previousReport.getCreateDate().toLocalDate();
+        LocalDate growthDate = growthHistory.getCreateDate().toLocalDate();
+
+        if (Period.between(pondDate, growthDate).getYears() - Period.between(pondDate, reportDate).getYears() > 0) {
+            LocalDate keyPoint = pondDate.plusYears(Period.between(pondDate, growthDate).getYears());
+            double lengthTmp = previousReport.getLength() + getGrowthForPeriod(age, reportDate, keyPoint.minusDays(1));
+            age = keyPoint.getYear();
+            return lengthTmp + getGrowthForPeriod(age, keyPoint, growthDate);
+        } else {
+            age += Period.between(pondDate, growthDate).getYears();
+            return previousReport.getLength() + getGrowthForPeriod(age, reportDate, growthDate);
+        }
+    }
+
+    private double getGrowthForPeriod(int age, LocalDate start, LocalDate end) {
+        int ageIndex = age < 9 ? age : 8;
+        double growthRate = growthRates.get(ageIndex);
+        return growthRate * ChronoUnit.DAYS.between(start, end);
+    }
+
+    private double calculateWeight(String physique, double length) {
+        double weightFactor = switch (physique) {
+            case "Slim" -> 1.5;
+            case "Normal" -> 1.7;
+            case "Corpulent" -> 2.0;
+            default -> 0.0;
+        };
+        return Math.round((weightFactor * Math.pow(length, 3)) / 100.0 * 100.0) / 100.0;
+    }
+
+    private FishGrowthReportDto createGrowthReportDto(GrowthHistoryDto growthHistory, double length, double weight) {
+        return FishGrowthReportDto.builder()
+                .id(growthHistory.getId())
+                .createDate(growthHistory.getCreateDate())
+                .physique(growthHistory.getPhysique())
+                .length(Math.round(length * 100.0) / 100.0)
+                .weight(Math.round(weight * 100.0) / 100.0)
+                .build();
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/remark/RemarkService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/remark/RemarkService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/remark/RemarkService.java
new file mode 100644
--- /dev/null	(date 1730910226003)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/remark/RemarkService.java	(date 1730910226003)
@@ -0,0 +1,60 @@
+package com.swpproject.koi_care_system.service.remark;
+
+import com.swpproject.koi_care_system.dto.RemarkDto;
+import com.swpproject.koi_care_system.enums.ErrorCode;
+import com.swpproject.koi_care_system.exceptions.AppException;
+import com.swpproject.koi_care_system.mapper.RemarkMapper;
+import com.swpproject.koi_care_system.models.KoiFish;
+import com.swpproject.koi_care_system.models.Remark;
+import com.swpproject.koi_care_system.payload.request.RemarkCreateRequest;
+import com.swpproject.koi_care_system.payload.request.RemarkUpdateRequest;
+import com.swpproject.koi_care_system.repository.KoiFishRepository;
+import com.swpproject.koi_care_system.repository.RemarkRepository;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class RemarkService implements IRemarkService {
+    RemarkRepository remarkRepository;
+    RemarkMapper remarkMapper;
+    KoiFishRepository koiFishRepository;
+
+    @Override
+    public RemarkDto createRemark(RemarkCreateRequest remarkCreateRequest) {
+        Remark remark = remarkMapper.mapToRemark(remarkCreateRequest);
+        KoiFish koiFish = koiFishRepository.findById(remarkCreateRequest.getKoiFishId()).orElseThrow(() -> new AppException(ErrorCode.KOI_FISH_NOT_FOUND));
+        remark.setKoiFish(koiFish);
+        return remarkMapper.mapToRemarkDto(remarkRepository.save(remark));
+    }
+
+    @Override
+    public RemarkDto updateRemark(Long id, RemarkUpdateRequest remarkUpdateRequest) {
+        Remark remark = remarkRepository.findById(id).orElseThrow(() -> new AppException(ErrorCode.REMARK_NOT_FOUND));
+        remarkMapper.updateRemark(remark, remarkUpdateRequest);
+        return remarkMapper.mapToRemarkDto(remarkRepository.save(remark));
+    }
+
+    @Override
+    public void deleteRemark(Long id) {
+        Remark remark = remarkRepository.findById(id).orElseThrow(() -> new AppException(ErrorCode.REMARK_NOT_FOUND));
+        remarkRepository.delete(remark);
+    }
+
+    @Override
+    public RemarkDto getRemark(Long id) {
+        Remark remark = remarkRepository.findById(id).orElseThrow(() -> new AppException(ErrorCode.REMARK_NOT_FOUND));
+        return remarkMapper.mapToRemarkDto(remark);
+    }
+
+    @Override
+    public List<RemarkDto> getRemarksByKoiFish(Long koiFishId) {
+        List<Remark> remarks = remarkRepository.findAllByKoiFishId(koiFishId);
+        return remarks.stream().map(remarkMapper::mapToRemarkDto).toList();
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/remark/IRemarkService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/remark/IRemarkService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/remark/IRemarkService.java
new file mode 100644
--- /dev/null	(date 1730910226003)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/remark/IRemarkService.java	(date 1730910226003)
@@ -0,0 +1,19 @@
+package com.swpproject.koi_care_system.service.remark;
+
+import com.swpproject.koi_care_system.dto.RemarkDto;
+import com.swpproject.koi_care_system.payload.request.RemarkCreateRequest;
+import com.swpproject.koi_care_system.payload.request.RemarkUpdateRequest;
+
+import java.util.List;
+
+public interface IRemarkService {
+    RemarkDto createRemark(RemarkCreateRequest remarkCreateRequest);
+
+    RemarkDto updateRemark(Long id, RemarkUpdateRequest remarkUpdateRequest);
+
+    void deleteRemark(Long id);
+
+    RemarkDto getRemark(Long id);
+
+    List<RemarkDto> getRemarksByKoiFish(Long koiFishId);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/image/IImageService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/image/IImageService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/image/IImageService.java
new file mode 100644
--- /dev/null	(date 1730910225999)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/image/IImageService.java	(date 1730910225999)
@@ -0,0 +1,17 @@
+package com.swpproject.koi_care_system.service.image;
+
+
+import com.swpproject.koi_care_system.dto.ImageDto;
+import com.swpproject.koi_care_system.models.Image;
+import org.springframework.web.multipart.MultipartFile;
+
+import java.util.List;
+
+public interface IImageService {
+    Image getImageById(Long id);
+    void deleteImageById(Long id);
+    List<ImageDto> saveImages(Long productId, List<MultipartFile> files);
+    void updateImage(MultipartFile file,  Long imageId);
+
+    List<ImageDto> getAll();
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/email/IEmailService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/email/IEmailService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/email/IEmailService.java
new file mode 100644
--- /dev/null	(date 1730910225998)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/email/IEmailService.java	(date 1730910225998)
@@ -0,0 +1,12 @@
+package com.swpproject.koi_care_system.service.email;
+
+import com.swpproject.koi_care_system.models.Reminder;
+
+public interface IEmailService {
+    void send(String name, String to, String subject, String token);
+
+    void sendOtp(String name, String to, String subject, String otp);
+
+    void sendReminder(String name, String to, String subject, Reminder reminderDetail);
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/email/EmailService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/email/EmailService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/email/EmailService.java
new file mode 100644
--- /dev/null	(date 1730910225998)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/email/EmailService.java	(date 1730910225998)
@@ -0,0 +1,121 @@
+package com.swpproject.koi_care_system.service.email;
+
+import com.swpproject.koi_care_system.enums.ErrorCode;
+import com.swpproject.koi_care_system.exceptions.AppException;
+import com.swpproject.koi_care_system.models.Reminder;
+import jakarta.mail.MessagingException;
+import jakarta.mail.internet.MimeMessage;
+import lombok.RequiredArgsConstructor;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.mail.javamail.JavaMailSender;
+import org.springframework.mail.javamail.MimeMessageHelper;
+import org.springframework.scheduling.annotation.Async;
+import org.springframework.stereotype.Service;
+import org.thymeleaf.TemplateEngine;
+import org.thymeleaf.context.Context;
+
+import java.util.Map;
+
+import static com.swpproject.koi_care_system.utils.EmailUtils.getVerificationUrl;
+
+@Service
+@RequiredArgsConstructor
+public class EmailService implements IEmailService {
+
+    private static final String EMAIL_TEMPLATE = "emailtemplate";
+    private static final String OTP_TEMPLATE = "otptemplate";
+    private static final String REMINDER_TEMPLATE = "reminderstemplate";
+    private final JavaMailSender mailSender;
+    private final TemplateEngine templateEngine;
+
+    @Value("${spring.mail.username}")
+    protected String FROM_EMAIL;
+
+    @Override
+    @Async
+    public void send(String name, String to, String subject, String token) {
+        try {
+            Context context = new Context();
+            context.setVariables(Map.of("name", name, "url", getVerificationUrl(to, token)));
+            String text = templateEngine.process(EMAIL_TEMPLATE, context);
+
+            // Create a MIME message
+            MimeMessage mimeMessage = mailSender.createMimeMessage();
+
+            // Use MimeMessageHelper to handle multipart and encoding
+            MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, MimeMessageHelper.MULTIPART_MODE_MIXED_RELATED, "UTF-8");
+            helper.setFrom(FROM_EMAIL); // From email
+            helper.setTo(to);           // Recipient
+            helper.setSubject(subject); // Email subject
+            helper.setText(text, true); // HTML content
+
+            // Send the email
+            mailSender.send(mimeMessage);
+
+        } catch (MessagingException e) {
+            e.printStackTrace();
+            throw new AppException(ErrorCode.SENDMAIL_FAILED);
+        }
+    }
+
+
+    @Override
+    @Async
+    public void sendOtp(String name, String to, String subject, String otp) {
+        try {
+            Context context = new Context();
+            context.setVariables(Map.of("name", name, "otp", otp));
+            String text = templateEngine.process(OTP_TEMPLATE, context);
+
+            // Create a MIME message
+            MimeMessage mimeMessage = mailSender.createMimeMessage();
+
+            // Use MimeMessageHelper to handle multipart and encoding
+            MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, MimeMessageHelper.MULTIPART_MODE_MIXED_RELATED, "UTF-8");
+            helper.setFrom(FROM_EMAIL); // From email
+            helper.setTo(to);           // Recipient
+            helper.setSubject(subject); // Email subject
+            helper.setText(text, true); // HTML content
+
+            // Send the email
+            mailSender.send(mimeMessage);
+
+        } catch (MessagingException e) {
+            e.printStackTrace();
+            throw new AppException(ErrorCode.SENDMAIL_FAILED);
+        }
+    }
+
+    @Override
+    @Async
+    public void sendReminder(String name, String to, String subject, Reminder reminderDetail) {
+        try {
+            Context context = new Context();
+            context.setVariables(Map.of("name", name,
+                    "url", "https://koi-care-system.vercel.app/member/reminders",
+                    "title", reminderDetail.getTitle(),
+                    "dateTime", reminderDetail.getDateTime().toString(),
+                    "repeatInterval", reminderDetail.getRepeatInterval(),
+                    "description", reminderDetail.getDescription()
+            ));
+            String text = templateEngine.process(REMINDER_TEMPLATE, context);
+
+            // Create a MIME message
+            MimeMessage mimeMessage = mailSender.createMimeMessage();
+
+            // Use MimeMessageHelper to handle multipart and encoding
+            MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, MimeMessageHelper.MULTIPART_MODE_MIXED_RELATED, "UTF-8");
+            helper.setFrom(FROM_EMAIL); // From email
+            helper.setTo(to);           // Recipient
+            helper.setSubject(subject); // Email subject
+            helper.setText(text, true); // HTML content
+
+            // Send the email
+            mailSender.send(mimeMessage);
+
+        } catch (MessagingException e) {
+            e.printStackTrace();
+            throw new AppException(ErrorCode.SENDMAIL_FAILED);
+        }
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/user/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/user/UserService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/user/UserService.java
new file mode 100644
--- /dev/null	(date 1730910226005)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/user/UserService.java	(date 1730910226005)
@@ -0,0 +1,130 @@
+package com.swpproject.koi_care_system.service.user;
+
+
+import com.swpproject.koi_care_system.dto.UserDTO;
+import com.swpproject.koi_care_system.enums.ErrorCode;
+import com.swpproject.koi_care_system.enums.Role;
+import com.swpproject.koi_care_system.exceptions.AppException;
+import com.swpproject.koi_care_system.mapper.UserMapper;
+import com.swpproject.koi_care_system.models.User;
+import com.swpproject.koi_care_system.payload.request.ChangePasswordRequest;
+import com.swpproject.koi_care_system.payload.request.CreateUserRequest;
+import com.swpproject.koi_care_system.payload.request.UpdateUserRequest;
+import com.swpproject.koi_care_system.repository.UserRepository;
+import com.swpproject.koi_care_system.service.email.IEmailService;
+import com.swpproject.koi_care_system.service.profile.ProfileService;
+import com.swpproject.koi_care_system.utils.JwtUtils;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.stereotype.Service;
+
+import java.security.Principal;
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class UserService implements IUserService {
+
+    UserRepository userRepo;
+    UserMapper userMapper;
+    ProfileService profileService;
+    PasswordEncoder passwordEncoder;
+    IEmailService emailService;
+    JwtUtils jwtUtils;
+
+    public UserDTO createUser(CreateUserRequest request) {
+        if (userRepo.existsByUsername(request.getUsername())) {
+            throw new AppException(ErrorCode.USER_EXISTED);
+        } else if (userRepo.existsByEmail(request.getEmail())) {
+            throw new AppException(ErrorCode.EMAIL_EXISTED);
+        }
+        User user = userMapper.maptoUser(request);
+        user.setPassword(passwordEncoder.encode(request.getPassword()));
+
+        var token = jwtUtils.generateToken(user);
+        emailService.send(user.getUsername(), user.getEmail(), "Welcome New User, Your Verify Email", token);
+
+        return userMapper.maptoUserDTO(userRepo.save(user));
+    }
+
+    @PreAuthorize("hasRole('ADMIN')")
+    public List<UserDTO> getListUser() {
+        return userRepo.findAll().stream()
+                .map(userMapper::maptoUserDTO).toList();
+    }
+
+    @PreAuthorize("hasRole('ADMIN')")
+    public UserDTO findUserByID(Long userID) {
+        return userMapper.maptoUserDTO(userRepo.findById(userID).orElseThrow(() -> new RuntimeException("User Not Found")));
+    }
+
+    @PreAuthorize("hasRole('ADMIN')")
+    public UserDTO updateUserByID(Long id, UpdateUserRequest request) {
+        User user = userRepo.findById(id)
+                .orElseThrow(() -> new RuntimeException("User not found"));
+        if (!user.getUsername().equals(request.getUsername()))
+            throw new AppException(ErrorCode.USER_EXISTED);
+        if (!request.getPassword().isEmpty()) {
+            request.setPassword(passwordEncoder.encode(request.getPassword()));
+        }
+        userMapper.updateUser(user, request);
+        return userMapper.maptoUserDTO(userRepo.save(user));
+    }
+
+    @PreAuthorize("hasRole('ADMIN')")
+    public void deleteUserByID(Long id) {
+        User user = userRepo.findById(id)
+                .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));
+        user.setStatus(false);
+        userRepo.save(user);
+    }
+
+    @Override
+    public void changePassword(ChangePasswordRequest request, Principal connectedUser) {
+        var user = userRepo.findByUsername(connectedUser.getName())
+                .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));
+        if (!passwordEncoder.matches(request.getCurrentPassword(), user.getPassword())) {
+            throw new AppException(ErrorCode.WRONG_PASSWORD);
+        }
+        if (!request.getNewPassword().equals(request.getConfirmationPassword())) {
+            throw new AppException(ErrorCode.PASSWORD_NOT_MATCH);
+        }
+        user.setPassword(passwordEncoder.encode(request.getNewPassword()));
+        userRepo.save(user);
+    }
+
+    @Override
+    public void verifyUser(String email, String token) {
+        User user = userRepo.findByEmail(email)
+                .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));
+        user.setStatus(true);
+        user.setRole(Role.MEMBER);
+        user.setUserProfile(profileService.createProfile(user));
+        userRepo.save(user);
+    }
+
+    @Override
+    @PreAuthorize("hasRole('ADMIN')")
+    public UserDTO createStaff(CreateUserRequest request) {
+        if (userRepo.existsByUsername(request.getUsername())) {
+            throw new AppException(ErrorCode.USER_EXISTED);
+        } else if (userRepo.existsByEmail(request.getEmail())) {
+            throw new AppException(ErrorCode.EMAIL_EXISTED);
+        }
+        User user = userMapper.maptoUser(request);
+        if (request.getEmail() == null || request.getEmail().isEmpty())
+            user.setEmail(request.getUsername() + "@koicare.comany.vn");
+        else user.setEmail(request.getEmail());
+        user.setPassword(passwordEncoder.encode("ABC@123"));
+        user.setRole(Role.SHOP);
+        user.setStatus(true);
+        userRepo.save(user);
+        user.setUserProfile(profileService.createProfile(user));
+        return userMapper.maptoUserDTO(userRepo.save(user));
+    }
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/issue/IssueService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/issue/IssueService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/issue/IssueService.java
new file mode 100644
--- /dev/null	(date 1730910226000)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/issue/IssueService.java	(date 1730910226000)
@@ -0,0 +1,123 @@
+package com.swpproject.koi_care_system.service.issue;
+
+import com.swpproject.koi_care_system.dto.IssueDto;
+import com.swpproject.koi_care_system.enums.RangeParameter;
+import com.swpproject.koi_care_system.mapper.IssueMapper;
+import com.swpproject.koi_care_system.models.Issue;
+import com.swpproject.koi_care_system.models.IssueType;
+import com.swpproject.koi_care_system.models.WaterParameters;
+import com.swpproject.koi_care_system.repository.IssueRepository;
+import com.swpproject.koi_care_system.repository.IssueTypeRepository;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class IssueService implements IIssueService {
+    IssueRepository issueRepository;
+    IssueTypeRepository issueTypeRepository;
+    IssueMapper issueMapper;
+
+    public void detectIssues(WaterParameters waterParameters) {
+        List<Issue> existingIssues = issueRepository.findByWaterParametersKoiPondId(waterParameters.getKoiPond().getId());
+        if (!existingIssues.isEmpty()) {
+            issueRepository.deleteAll(existingIssues);
+        }
+        for (RangeParameter parameter : RangeParameter.values()) {
+            double value = getParameterValue(waterParameters, parameter);
+            if (parameter.isLow(value) || parameter.isHigh(value)) {
+                String conditionType = parameter.isLow(value) ? "LOW" : "HIGH";
+                createIssue(conditionType, parameter, waterParameters);
+            }
+        }
+    }
+
+    private void createIssue(String conditionType, RangeParameter parameter, WaterParameters waterParameters) {
+        IssueType issueType = issueTypeRepository.findByParameterTypeAndConditionType(parameter, conditionType);
+        boolean issueExist = issueRepository.existsByWaterParametersAndDescription(waterParameters, conditionType + " " + parameter.name());
+
+        if (!issueExist) {
+            Issue issue = new Issue();
+            issue.setName(parameter.getName());
+            issue.setWaterParameters(waterParameters);
+            issue.setIssueType(issueType);
+            issue.setDescription(getDescription(parameter, conditionType));
+            issueRepository.save(issue);
+        }
+    }
+
+    public List<IssueDto> getIssue(Long waterParametersId) {
+        return issueRepository.findByWaterParametersId(waterParametersId).stream().map(issueMapper::mapToIssueDto).toList();
+    }
+
+    private double getParameterValue(WaterParameters waterParameters, RangeParameter parameter) {
+        return switch (parameter) {
+            case NO2 -> waterParameters.getNitrite();
+            case NO3 -> waterParameters.getNitrate();
+            case PO4 -> waterParameters.getPhosphate();
+            case NH4 -> waterParameters.getAmmonium();
+            case GH -> waterParameters.getHardness();
+            case O2 -> waterParameters.getOxygen();
+            case TEMPERATURE -> waterParameters.getTemperature();
+            case PH -> waterParameters.getPhValue();
+            case KH -> waterParameters.getCarbonHardness();
+            case CO2 -> waterParameters.getCarbonDioxide();
+            case SALT -> waterParameters.getSalt();
+            case CHLORINE -> waterParameters.getTotalChlorine();
+            case OUTDOORTEMP -> waterParameters.getTemp();
+            default -> throw new IllegalArgumentException("Unknown parameter: " + parameter);
+        };
+    }
+
+    private String getDescription(RangeParameter parameter, String conditionType) {
+        switch (parameter) {
+            case NO2 -> {
+                return conditionType.equals("HIGH") ? "High nitrite levels are toxic to Koi fish, causing stress, impaired oxygen transport in the blood, and possibly leading to death if not corrected." : "Low nitrite levels can indicate inadequate filtration or biological activity, leading to potential imbalances in water quality";
+            }
+            case NO3 -> {
+                return conditionType.equals("HIGH") ? "High nitrate levels can promote algae blooms and stress fish, leading to poor health and increased disease susceptibility." : "Low nitrate levels can hinder plant growth and may signal a poorly established nitrogen cycle.";
+            }
+            case PO4 -> {
+                return conditionType.equals("HIGH") ? "High phosphate levels can cause excessive algae growth, leading to oxygen depletion and poor water quality." : "Low phosphate levels can limit plant growth, impacting the ecosystem balance.";
+            }
+            case TEMPERATURE -> {
+                return conditionType.equals("HIGH") ? "High temperatures can lead to decreased oxygen levels, increased stress, and heightened disease risk." : "Low temperatures can slow down the metabolism of Koi fish, making them lethargic and more susceptible to disease.";
+            }
+            case PH -> {
+                return conditionType.equals("HIGH") ? "High pH levels can impair fish health and increase the toxicity of ammonia." : "Low pH levels can stress Koi fish and lead to harmful metal leaching from the pond materials.";
+            }
+            case NH4 -> {
+                return conditionType.equals("HIGH") ? "High ammonium levels are highly toxic to Koi fish and can cause gill damage and stress, potentially leading to death." : "Low ammonium levels indicate effective biological filtration; however, very low levels can signal a lack of necessary biological activity.";
+            }
+            case GH -> {
+                return conditionType.equals("HIGH") ? "High hardness levels can inhibit the absorption of essential nutrients and minerals for Koi fish health." : "Low hardness levels can stress Koi fish by affecting their ability to regulate their internal salt balance.";
+            }
+            case KH -> {
+                return conditionType.equals("HIGH") ? "High KH levels can stabilize pH but may also limit the availability of essential nutrients." : "Low KH levels can lead to pH fluctuations, stressing Koi fish and affecting their health.";
+            }
+            case O2 -> {
+                return conditionType.equals("HIGH") ? "High oxygen levels, while generally beneficial, can lead to gas bubble disease in extreme cases." : "Low oxygen levels can lead to suffocation, stress, and increased mortality rates in Koi fish.";
+            }
+            case CO2 -> {
+                return conditionType.equals("HIGH") ? "High CO2 levels can lead to decreased oxygen availability, stressing Koi fish." : "Low CO2 levels can hinder plant growth, affecting the overall ecosystem balance.";
+            }
+            case SALT -> {
+                return conditionType.equals("HIGH") ? "High salt levels can lead to osmotic stress in Koi fish, affecting their health and vitality." : "Low salt levels may fail to provide the necessary osmotic balance, potentially stressing Koi fish.";
+            }
+            case CHLORINE -> {
+                return conditionType.equals("HIGH") ? "High chlorine levels are toxic to Koi fish, leading to gill damage and respiratory distress." : "Low chlorine levels are generally safe for Koi fish; however, extremely low levels may indicate inadequate disinfection.";
+            }
+            case OUTDOORTEMP -> {
+                return conditionType.equals("HIGH") ? "High outdoor temperatures can lead to heat stress, reduced oxygen levels, and increased disease risk." : "Extremely low outdoor temperatures can cause Koi fish to enter a dormant state, leading to decreased activity and potential health risks.";
+            }
+            default -> {
+                return "";
+            }
+        }
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/issue/IIssueTypeService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/issue/IIssueTypeService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/issue/IIssueTypeService.java
new file mode 100644
--- /dev/null	(date 1730910225999)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/issue/IIssueTypeService.java	(date 1730910225999)
@@ -0,0 +1,10 @@
+package com.swpproject.koi_care_system.service.issue;
+
+import com.swpproject.koi_care_system.dto.IssueTypeDto;
+import com.swpproject.koi_care_system.models.IssueType;
+
+import java.util.List;
+
+public interface IIssueTypeService {
+    List<IssueTypeDto> getAllIssueType();
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/issue/IIssueService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/issue/IIssueService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/issue/IIssueService.java
new file mode 100644
--- /dev/null	(date 1730910225999)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/issue/IIssueService.java	(date 1730910225999)
@@ -0,0 +1,14 @@
+package com.swpproject.koi_care_system.service.issue;
+
+import com.swpproject.koi_care_system.dto.IssueDto;
+import com.swpproject.koi_care_system.models.Issue;
+import com.swpproject.koi_care_system.models.WaterParameters;
+
+import java.util.List;
+
+public interface IIssueService {
+    void detectIssues(WaterParameters waterParameters);
+
+    List<IssueDto> getIssue(Long waterParametersId);
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/image/ImageService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/image/ImageService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/image/ImageService.java
new file mode 100644
--- /dev/null	(date 1730910225999)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/image/ImageService.java	(date 1730910225999)
@@ -0,0 +1,90 @@
+package com.swpproject.koi_care_system.service.image;
+
+import com.swpproject.koi_care_system.dto.ImageDto;
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.mapper.ImageMapper;
+import com.swpproject.koi_care_system.models.Image;
+import com.swpproject.koi_care_system.models.Product;
+import com.swpproject.koi_care_system.repository.ImageRepository;
+import com.swpproject.koi_care_system.service.imageBlobStorage.AzureImageStorage;
+import com.swpproject.koi_care_system.service.product.IProductService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.stereotype.Service;
+import org.springframework.web.multipart.MultipartFile;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Collectors;
+
+@Service
+@RequiredArgsConstructor
+public class ImageService implements IImageService {
+    private final ImageRepository imageRepository;
+    private final IProductService productService;
+    private final AzureImageStorage imageStorage;
+    private final ImageMapper imageMapper;
+    @Override
+    public Image getImageById(Long id) {
+        return imageRepository.findById(id)
+                .orElseThrow(() -> new ResourceNotFoundException("No image found with id: " + id));
+    }
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public void deleteImageById(Long id) {
+        imageRepository.findById(id).ifPresentOrElse(image -> {
+            if(!image.getDownloadUrl().isEmpty())
+                imageStorage.deleteImage(image.getDownloadUrl());
+            imageRepository.delete(image);
+        },() -> {
+            throw new ResourceNotFoundException("No image found with id: " + id);
+        });
+    }
+
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public List<ImageDto> saveImages(Long productId, List<MultipartFile> files) {
+        Product product = productService.getProductById(productId);
+
+        List<ImageDto> savedImageDto = new ArrayList<>();
+        for (MultipartFile file : files) {
+            try {
+                String imageUrl = imageStorage.uploadImage(file);
+                Image image = new Image();
+                image.setFileName(file.getOriginalFilename());
+                image.setFileType(file.getContentType());
+                image.setDownloadUrl(imageUrl);
+                image.setProduct(product);
+
+                Image savedImage = imageRepository.save(image);
+
+                ImageDto imageDto = new ImageDto();
+                imageDto.setId(savedImage.getId());
+                imageDto.setFileName(savedImage.getFileName());
+                imageDto.setDownloadUrl(savedImage.getDownloadUrl());
+                savedImageDto.add(imageDto);
+
+            } catch (Exception e) {
+                throw new RuntimeException("Failed to upload image: " + e.getMessage());
+            }
+        }
+        return savedImageDto;
+    }
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public void updateImage(MultipartFile file, Long imageId) {
+        Image image = getImageById(imageId);
+            String newImageUrl = imageStorage.uploadImage(file);
+            if(!image.getDownloadUrl().isEmpty())
+                imageStorage.deleteImage(image.getDownloadUrl());
+            image.setFileName(file.getOriginalFilename());
+            image.setFileType(file.getContentType());
+            image.setDownloadUrl(newImageUrl);
+            imageRepository.save(image);
+    }
+
+    @Override
+    public List<ImageDto> getAll() {
+        return imageRepository.findAll().stream().map(imageMapper::mapToImageDto).collect(Collectors.toList());
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/cart/CartItemService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/cart/CartItemService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/cart/CartItemService.java
new file mode 100644
--- /dev/null	(date 1730910225997)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/cart/CartItemService.java	(date 1730910225997)
@@ -0,0 +1,103 @@
+package com.swpproject.koi_care_system.service.cart;
+
+import com.swpproject.koi_care_system.enums.PromotionStatus;
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.models.Cart;
+import com.swpproject.koi_care_system.models.CartItem;
+import com.swpproject.koi_care_system.models.Product;
+import com.swpproject.koi_care_system.repository.CartItemRepository;
+import com.swpproject.koi_care_system.repository.CartRepository;
+import com.swpproject.koi_care_system.service.product.IProductService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+
+import java.math.BigDecimal;
+import java.math.RoundingMode;
+
+@Service
+@RequiredArgsConstructor
+public class CartItemService  implements ICartItemService{
+    private final CartItemRepository cartItemRepository;
+    private final CartRepository cartRepository;
+    private final IProductService productService;
+    private final ICartService cartService;
+
+    @Override
+    public void addItemToCart(Long cartId, Long productId, int quantity) {
+        Cart cart = cartService.getCart(cartId);
+        Product product = productService.getProductById(productId);
+        CartItem cartItem = cart.getItems()
+                .stream()
+                .filter(item -> item.getProduct().getId().equals(productId))
+                .findFirst().orElse(new CartItem());
+
+        if (cartItem.getId() == null) {
+            if(quantity > product.getInventory())
+                throw new RuntimeException("The quantity in inventory is not enough for your order");
+            cartItem.setCart(cart);
+            cartItem.setProduct(product);
+            cartItem.setQuantity(quantity);
+            cartItem.setUnitPrice(calculateDiscountedPrice(product));
+        }
+        else {
+            if(cartItem.getQuantity()+quantity > product.getInventory())
+                throw new RuntimeException("The quantity in inventory is not enough for your order");
+            cartItem.setQuantity(cartItem.getQuantity() + quantity);
+        }
+        cartItem.setTotalPrice();
+        cart.addItem(cartItem);
+        cartItemRepository.save(cartItem);
+        cartRepository.save(cart);
+    }
+
+    // Update the calculateDiscountedPrice method
+    private BigDecimal calculateDiscountedPrice(Product product) {
+        BigDecimal totalDiscountRate = product.getPromotions().stream()
+                .filter(promotion -> PromotionStatus.PROCESSING.equals(promotion.getStatus()))
+                .map(promotion -> BigDecimal.valueOf(promotion.getDiscountRate()))
+                .reduce(BigDecimal.ZERO, BigDecimal::add);
+        BigDecimal tmp = new BigDecimal(100);
+        BigDecimal discountMultiplier = BigDecimal.ONE.subtract(totalDiscountRate.divide(tmp));
+        System.out.println(discountMultiplier);
+        return product.getPrice().multiply(discountMultiplier).setScale(2, RoundingMode.HALF_UP);
+    }
+
+    @Override
+    public void removeItemFromCart(Long cartId, Long productId) {
+        Cart cart = cartService.getCart(cartId);
+        CartItem itemToRemove = getCartItem(cartId, productId);
+        cart.removeItem(itemToRemove);
+        cartRepository.save(cart);
+    }
+
+    @Override
+    public void updateItemQuantity(Long cartId, Long productId, int quantity) {
+        Cart cart = cartService.getCart(cartId);
+        cart.getItems()
+                .stream()
+                .filter(item -> item.getProduct().getId().equals(productId))
+                .findFirst()
+                .ifPresent(item -> {
+                    if(quantity > item.getProduct().getInventory())
+                        throw new RuntimeException("The quantity in inventory is not enough for your order");
+                    item.setQuantity(quantity);
+                    item.setUnitPrice(calculateDiscountedPrice(item.getProduct()));
+                    item.setTotalPrice();
+                });
+        BigDecimal totalAmount = cart.getItems()
+                .stream().map(CartItem ::getTotalPrice)
+                .reduce(BigDecimal.ZERO, BigDecimal::add);
+
+        cart.setTotalAmount(totalAmount);
+        cartRepository.save(cart);
+    }
+
+    @Override
+    public CartItem getCartItem(Long cartId, Long productId) {
+        Cart cart = cartService.getCart(cartId);
+        return  cart.getItems()
+                .stream()
+                .filter(item -> item.getProduct().getId().equals(productId))
+                .findFirst().orElseThrow(() -> new ResourceNotFoundException("Item not found"));
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/Blog/IBlogService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/Blog/IBlogService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/Blog/IBlogService.java
new file mode 100644
--- /dev/null	(date 1730910225996)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/Blog/IBlogService.java	(date 1730910225996)
@@ -0,0 +1,30 @@
+package com.swpproject.koi_care_system.service.Blog;
+
+import com.swpproject.koi_care_system.dto.BlogDto;
+import com.swpproject.koi_care_system.payload.request.BlogCreateRequest;
+import com.swpproject.koi_care_system.payload.request.BlogUpdateRequest;
+
+import java.io.IOException;
+import java.util.List;
+
+public interface IBlogService {
+    BlogDto createBlog(BlogCreateRequest blogCreateRequest, String username) throws IOException;
+
+    BlogDto updateBlog(int id, BlogUpdateRequest blogUpdateRequest);
+
+    void deleteBlog(int id);
+
+    List<BlogDto> getAllBlogs();
+
+    BlogDto getBlogById(int id);
+
+    //Get all Blogs by tagName
+    List<BlogDto> getBlogByTag(int tagId);
+
+    //Get all Blogs by username
+    List<BlogDto> getBlogByUsername(long userId);
+
+    //Search Blogs
+    List<BlogDto> searchBlogs(String keyword);
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/Blog/BlogService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/Blog/BlogService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/Blog/BlogService.java
new file mode 100644
--- /dev/null	(date 1730910225996)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/Blog/BlogService.java	(date 1730910225996)
@@ -0,0 +1,139 @@
+package com.swpproject.koi_care_system.service.Blog;
+
+import com.swpproject.koi_care_system.dto.BlogDto;
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.mapper.BlogMapper;
+import com.swpproject.koi_care_system.models.Blog;
+import com.swpproject.koi_care_system.models.Tag;
+import com.swpproject.koi_care_system.models.User;
+import com.swpproject.koi_care_system.payload.request.BlogCreateRequest;
+import com.swpproject.koi_care_system.payload.request.BlogUpdateRequest;
+import com.swpproject.koi_care_system.repository.BlogRepository;
+import com.swpproject.koi_care_system.repository.TagRepository;
+import com.swpproject.koi_care_system.repository.UserRepository;
+import com.swpproject.koi_care_system.service.imageBlobStorage.ImageStorage;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.stereotype.Service;
+
+import java.io.IOException;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+@Service
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class BlogService implements IBlogService {
+    BlogRepository blogRepository;
+    BlogMapper blogMapper;
+    UserRepository userRepository;
+    TagRepository tagRepository;
+    ImageStorage imageStorage;
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public BlogDto createBlog(BlogCreateRequest blogCreateRequest, String username) throws IOException {
+        if (blogRepository.existsByBlogTitle(blogCreateRequest.getBlogTitle())) {
+            throw new RuntimeException("Blog already exists");
+        }
+        Blog blog = blogMapper.mapToBlog(blogCreateRequest);
+        if(blogCreateRequest.getFile()!=null)
+            blog.setBlogImage(!blogCreateRequest.getFile().isEmpty() ? imageStorage.uploadImage(blogCreateRequest.getFile()) : "https://koicaresystemv4.blob.core.windows.net/koicarestorage/defaultBlog.png");
+        else
+            blog.setBlogImage("https://koicaresystemv3.blob.core.windows.net/koicarestorage/defaultBlog.png");
+        if (blogCreateRequest.getTagIds() == null || blogCreateRequest.getTagIds().isEmpty()) {
+            throw new RuntimeException("Tags cannot be null");
+        }
+        blog.setBlogDate(java.time.LocalDate.now());
+        Set<Tag> tags = new HashSet<>();
+        for (int tagId : blogCreateRequest.getTagIds()) {
+            Tag tag = tagRepository.findById(tagId).orElseThrow(() -> new RuntimeException("Tag not found"));
+            tags.add(tag);
+        }
+        blog.setTags(tags);
+        blog.setUser(userRepository.findByUsername(username).orElseThrow(() -> new RuntimeException("User not found")));
+
+        return blogMapper.mapToBlogDto(blogRepository.save(blog));
+    }
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public BlogDto updateBlog(int id, BlogUpdateRequest blogUpdateRequest) {
+        Blog blog = blogRepository.findById(id).orElseThrow(() -> new RuntimeException("Blog not found"));
+        if (!blogUpdateRequest.getBlogTitle().equals(blog.getBlogTitle())) {
+            if (blogRepository.existsByBlogTitle(blogUpdateRequest.getBlogTitle())) {
+                throw new RuntimeException("Blog title already exists");
+            }
+        }
+        if(blogUpdateRequest.getFile()!=null)
+            if(!blogUpdateRequest.getFile().isEmpty()){
+                try{
+                    if (!blog.getBlogImage().equals("https://koicaresystemv3.blob.core.windows.net/koicarestorage/defaultBlog.png"))
+                        imageStorage.deleteImage(blog.getBlogImage());
+                    blog.setBlogImage(imageStorage.uploadImage(blogUpdateRequest.getFile()));
+                }catch (Exception e){
+                    throw new RuntimeException(e);
+                }
+            }
+        if (blogUpdateRequest.getTagIds() == null || blogUpdateRequest.getTagIds().isEmpty()) {
+            throw new RuntimeException("Tags cannot be null");
+        }
+        blogMapper.updateBlog(blog, blogUpdateRequest);
+        Set<Tag> tags = new HashSet<>();
+        for (int tagId : blogUpdateRequest.getTagIds()) {
+            Tag tag = tagRepository.findById(tagId).orElseThrow(() -> new RuntimeException("Tag not found"));
+            tags.add(tag);
+        }
+        blog.setTags(tags);
+        return blogMapper.mapToBlogDto(blogRepository.save(blog));
+    }
+
+    @Override
+    @PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+    public void deleteBlog(int id) {
+        blogRepository.findById(id).ifPresentOrElse(blog -> {
+            if (!blog.getBlogImage().equals("https://koicaresystemv3.blob.core.windows.net/koicarestorage/defaultBlog.png")) {
+                try {
+                    imageStorage.deleteImage(blog.getBlogImage());
+                }catch (Exception e) {
+                    throw new RuntimeException(e);
+                }
+                blogRepository.delete(blog);
+            }
+        },()->{
+            throw new ResourceNotFoundException("Blog not found!");
+        });
+    }
+
+    @Override
+    public List<BlogDto> getAllBlogs() {
+        List<Blog> blogs = blogRepository.findAll();
+        return blogs.stream().map(blogMapper::mapToBlogDto).toList();
+    }
+
+    @Override
+    public BlogDto getBlogById(int id) {
+        return blogRepository.findById(id).map(blogMapper::mapToBlogDto).orElseThrow(() -> new RuntimeException("Blog not found"));
+    }
+
+    @Override
+    public List<BlogDto> getBlogByTag(int tagId) {
+        Tag tag = tagRepository.findById(tagId).orElseThrow(() -> new RuntimeException("Tag not found"));
+        List<Blog> blogs = blogRepository.findByTags(tag);
+        return blogs.stream().map(blogMapper::mapToBlogDto).toList();
+    }
+
+    @Override
+    public List<BlogDto> getBlogByUsername(long userId) {
+        User user = userRepository.findById(userId).orElseThrow(() -> new RuntimeException("User not found"));
+        List<Blog> blogs = blogRepository.findByUser(user);
+        return blogs.stream().map(blogMapper::mapToBlogDto).toList();
+    }
+
+    @Override
+    public List<BlogDto> searchBlogs(String keyword) {
+        List<Blog> blogs = blogRepository.findByBlogTitleContaining(keyword);
+        return blogs.stream().map(blogMapper::mapToBlogDto).toList();
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/tag/TagService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/tag/TagService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/tag/TagService.java
new file mode 100644
--- /dev/null	(date 1730910226005)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/tag/TagService.java	(date 1730910226005)
@@ -0,0 +1,71 @@
+package com.swpproject.koi_care_system.service.tag;
+
+import com.swpproject.koi_care_system.dto.TagDto;
+import com.swpproject.koi_care_system.enums.ErrorCode;
+import com.swpproject.koi_care_system.exceptions.AppException;
+import com.swpproject.koi_care_system.mapper.TagMapper;
+import com.swpproject.koi_care_system.models.Blog;
+import com.swpproject.koi_care_system.models.Tag;
+import com.swpproject.koi_care_system.payload.request.TagCreateRequest;
+import com.swpproject.koi_care_system.payload.request.TagUpdateRequest;
+import com.swpproject.koi_care_system.repository.BlogRepository;
+import com.swpproject.koi_care_system.repository.TagRepository;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+@PreAuthorize("hasRole('ADMIN') or hasRole('SHOP')")
+public class TagService implements ITagService {
+
+    TagRepository tagRepository;
+    TagMapper tagMapper;
+    private final BlogRepository blogRepository;
+
+    @Override
+    public TagDto createTag(TagCreateRequest request) {
+        if (tagRepository.existsByTagName(request.getTagName())) {
+            throw new AppException(ErrorCode.TAG_EXISTED);
+        } else if (tagRepository.existsByTagDescription(request.getTagDescription())) {
+            throw new AppException(ErrorCode.TAG_DESCRIPTION_EXISTED);
+        }
+        Tag tag = tagMapper.maptoTag(request);
+        return tagMapper.maptoTagDto(tagRepository.save(tag));
+    }
+
+    @Override
+    public TagDto updateTag(int id, TagUpdateRequest request) {
+        Tag tag = tagRepository.findById(id).orElseThrow(() -> new RuntimeException("Tag not found"));
+        tagMapper.updateTag(tag, request);
+        return tagMapper.maptoTagDto(tagRepository.save(tag));
+
+    }
+
+    @Override
+    public void deleteTag(int id) {
+        Tag tag = tagRepository.findById(id).orElseThrow(() -> new RuntimeException("Tag not found"));
+        for (Blog blog : tag.getBlogs()) {
+            blog.getTags().remove(tag);
+            if (blog.getTags().isEmpty()) {
+                blogRepository.delete(blog);
+            } else blogRepository.save(blog);
+        }
+        tagRepository.delete(tag);
+    }
+
+    @Override
+    public TagDto getTagById(int id) {
+        return tagMapper.maptoTagDto(tagRepository.findById(id).orElseThrow(() -> new RuntimeException("Tag not found")));
+    }
+
+    @Override
+    public List<TagDto> getAllTags() {
+        return tagRepository.findAll().stream().map(tagMapper::maptoTagDto).toList();
+    }
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/user/IUserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/user/IUserService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/user/IUserService.java
new file mode 100644
--- /dev/null	(date 1730910226005)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/user/IUserService.java	(date 1730910226005)
@@ -0,0 +1,29 @@
+package com.swpproject.koi_care_system.service.user;
+
+import com.swpproject.koi_care_system.dto.UserDTO;
+import com.swpproject.koi_care_system.payload.request.ChangePasswordRequest;
+import com.swpproject.koi_care_system.payload.request.CreateUserRequest;
+import com.swpproject.koi_care_system.payload.request.UpdateUserRequest;
+
+import java.security.Principal;
+import java.util.List;
+
+
+public interface IUserService {
+    UserDTO createUser(CreateUserRequest request);
+
+    List<UserDTO> getListUser();
+
+    UserDTO findUserByID(Long userID);
+
+    UserDTO updateUserByID(Long id, UpdateUserRequest request);
+
+    void deleteUserByID(Long id);
+
+    void verifyUser(String email, String token);
+
+    UserDTO createStaff(CreateUserRequest request);
+
+    void changePassword(ChangePasswordRequest request, Principal connectedUser);
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/cart/ICartService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/cart/ICartService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/cart/ICartService.java
new file mode 100644
--- /dev/null	(date 1730910225997)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/cart/ICartService.java	(date 1730910225997)
@@ -0,0 +1,17 @@
+package com.swpproject.koi_care_system.service.cart;
+
+import com.swpproject.koi_care_system.dto.CartDto;
+import com.swpproject.koi_care_system.models.Cart;
+
+import java.math.BigDecimal;
+
+public interface ICartService {
+    Cart getCart(Long id);
+    CartDto getCartDto(Long id);
+    void clearCart(Long id);
+    BigDecimal getTotalPrice(Long id);
+
+    Long initializeNewCart(Long userId);
+
+    Cart getCartByUserId(Long userId);
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/cart/ICartItemService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/cart/ICartItemService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/cart/ICartItemService.java
new file mode 100644
--- /dev/null	(date 1730910225997)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/cart/ICartItemService.java	(date 1730910225997)
@@ -0,0 +1,10 @@
+package com.swpproject.koi_care_system.service.cart;
+
+import com.swpproject.koi_care_system.models.CartItem;
+
+public interface ICartItemService {
+    void addItemToCart(Long cartId, Long productId, int quantity);
+    void removeItemFromCart(Long cartId, Long productId);
+    void updateItemQuantity(Long cartId, Long productId, int quantity);
+    CartItem getCartItem(Long cartId, Long productId);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/cart/CartService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/cart/CartService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/cart/CartService.java
new file mode 100644
--- /dev/null	(date 1730910225997)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/cart/CartService.java	(date 1730910225997)
@@ -0,0 +1,82 @@
+package com.swpproject.koi_care_system.service.cart;
+
+import com.swpproject.koi_care_system.dto.CartDto;
+import com.swpproject.koi_care_system.dto.CartItemDto;
+import com.swpproject.koi_care_system.exceptions.ResourceNotFoundException;
+import com.swpproject.koi_care_system.models.Cart;
+import com.swpproject.koi_care_system.repository.CartItemRepository;
+import com.swpproject.koi_care_system.repository.CartRepository;
+import com.swpproject.koi_care_system.repository.UserRepository;
+import com.swpproject.koi_care_system.service.product.ProductService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.math.BigDecimal;
+import java.util.concurrent.atomic.AtomicLong;
+import java.util.stream.Collectors;
+
+@Service
+@RequiredArgsConstructor
+public class CartService implements ICartService{
+    private final CartRepository cartRepository;
+    private final CartItemRepository cartItemRepository;
+    private final UserRepository userRepository;
+    private final ProductService productService;
+    private final AtomicLong cartIdGenerator = new AtomicLong(0);
+
+    @Override
+    public Cart getCart(Long id) {
+        Cart cart = cartRepository.findById(id)
+                .orElseThrow(() -> new ResourceNotFoundException("Cart not found"));
+        BigDecimal totalAmount = cart.getTotalAmount();
+        cart.setTotalAmount(totalAmount);
+        return cartRepository.save(cart);
+    }
+    @Override
+    public CartDto getCartDto(Long id) {
+        Cart cart = getCart(id);
+        CartDto cartDto = new CartDto();
+        cartDto.setCartId(cart.getId());
+        cartDto.setTotalAmount(cart.getTotalAmount());
+        cartDto.setItems(cart.getItems().stream()
+                .map(item -> {
+                    CartItemDto itemDto = new CartItemDto();
+                    itemDto.setItemId(item.getId());
+                    itemDto.setProduct(productService.convertToDto(item.getProduct()));
+                    itemDto.setQuantity(item.getQuantity());
+                    itemDto.setUnitPrice(item.getUnitPrice());
+                    return itemDto;
+                }).collect(Collectors.toSet()));
+        return cartDto;
+    }
+    @Transactional
+    @Override
+    public void clearCart(Long id) {
+        Cart cart = getCart(id);
+        cartItemRepository.deleteAllByCartId(id);
+        cart.getItems().clear();
+
+
+    }
+
+    @Override
+    public BigDecimal getTotalPrice(Long id) {
+        Cart cart = getCart(id);
+        return cart.getTotalAmount();
+    }
+
+    @Override
+    public Long initializeNewCart(Long userId) {
+        Cart newCart = new Cart();
+        newCart.setUser(userRepository.findById(userId).orElseThrow(() -> new ResourceNotFoundException("User not found")));;
+        Long newCartId = cartIdGenerator.incrementAndGet();
+        newCart.setId(newCartId);
+        return cartRepository.save(newCart).getId();
+    }
+
+    @Override
+    public Cart getCartByUserId(Long userId) {
+        return cartRepository.findByUserId(userId);
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/log/ILogService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/log/ILogService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/log/ILogService.java
new file mode 100644
--- /dev/null	(date 1730910226001)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/log/ILogService.java	(date 1730910226001)
@@ -0,0 +1,27 @@
+package com.swpproject.koi_care_system.service.log;
+
+import com.swpproject.koi_care_system.dto.LogDto;
+import com.swpproject.koi_care_system.payload.request.LogCreateRequest;
+import com.swpproject.koi_care_system.payload.request.LogUpdateRequest;
+
+import java.util.List;
+
+public interface ILogService {
+    LogDto createLog(LogCreateRequest request, long pondId);
+
+    LogDto updateLog(int logId, LogUpdateRequest request);
+
+    void deleteLog(int logId);
+
+    LogDto getLogById(int logId);
+
+    List<LogDto> getAllLogs(String sortBy, String sortDir);
+
+    List<LogDto> getLogsByPondId(long pondId);
+
+    List<LogDto> getLogsByUserId(Long userId);
+
+    List<LogDto> getLogsByCategory(String category);
+
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/response/LoginResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/response/LoginResponse.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/response/LoginResponse.java
new file mode 100644
--- /dev/null	(date 1730910225992)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/response/LoginResponse.java	(date 1730910225992)
@@ -0,0 +1,23 @@
+package com.swpproject.koi_care_system.payload.response;
+
+import jakarta.validation.constraints.Email;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class LoginResponse {
+    Long id;
+    String username;
+    @Email
+    String email;
+    String role;
+    String token;
+    String avatar;
+    boolean status;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/tag/ITagService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/tag/ITagService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/tag/ITagService.java
new file mode 100644
--- /dev/null	(date 1730910226004)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/tag/ITagService.java	(date 1730910226004)
@@ -0,0 +1,20 @@
+package com.swpproject.koi_care_system.service.tag;
+
+import com.swpproject.koi_care_system.dto.TagDto;
+import com.swpproject.koi_care_system.payload.request.TagCreateRequest;
+import com.swpproject.koi_care_system.payload.request.TagUpdateRequest;
+
+import java.util.List;
+
+public interface ITagService {
+
+    TagDto createTag(TagCreateRequest request);
+
+    TagDto updateTag(int id, TagUpdateRequest request);
+
+    void deleteTag(int id);
+
+    TagDto getTagById(int id);
+
+    List<TagDto> getAllTags();
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/otp/OtpService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/otp/OtpService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/otp/OtpService.java
new file mode 100644
--- /dev/null	(date 1730910226002)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/otp/OtpService.java	(date 1730910226002)
@@ -0,0 +1,48 @@
+package com.swpproject.koi_care_system.service.otp;
+
+import com.swpproject.koi_care_system.enums.ErrorCode;
+import com.swpproject.koi_care_system.exceptions.AppException;
+import com.swpproject.koi_care_system.models.Otp;
+import com.swpproject.koi_care_system.repository.OtpRepository;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.stereotype.Service;
+
+import java.time.LocalDateTime;
+
+@Service
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class OtpService implements IOtpService {
+    OtpRepository otpRepository;
+
+    @Override
+    public void saveOtp(String email, String token) {
+        //Check if otp existed then delete
+        otpRepository.findByEmail(email).ifPresent(otpRepository::delete);
+
+        var otp = new Otp();
+        otp.setEmail(email);
+        otp.setOtp(token);
+        otp.setExpiredAt(LocalDateTime.now().plusMinutes(5));
+        otpRepository.save(otp);
+    }
+
+    @Override
+    public void deleteOtp(String email) {
+        otpRepository.findByEmail(email).ifPresentOrElse(otpRepository::delete, () -> {
+            throw new RuntimeException("Not found otp");
+        });
+    }
+
+    @Override
+    public boolean verifyOtp(String email, String otp) {
+        Otp otpEntity = otpRepository.findByEmailAndOtp(email, otp).orElseThrow(() -> new AppException(ErrorCode.INVALID_OTP));
+        if (otpEntity.getExpiredAt().isBefore(LocalDateTime.now())) {
+            deleteOtp(email);
+            return false;
+        }
+        return true;
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/otp/IOtpService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/otp/IOtpService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/otp/IOtpService.java
new file mode 100644
--- /dev/null	(date 1730910226002)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/otp/IOtpService.java	(date 1730910226002)
@@ -0,0 +1,9 @@
+package com.swpproject.koi_care_system.service.otp;
+
+public interface IOtpService {
+    void saveOtp(String email, String token);
+
+    boolean verifyOtp(String email, String otp);
+
+    void deleteOtp(String email);
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/log/LogService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/log/LogService.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/log/LogService.java
new file mode 100644
--- /dev/null	(date 1730910226001)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/service/log/LogService.java	(date 1730910226001)
@@ -0,0 +1,84 @@
+package com.swpproject.koi_care_system.service.log;
+
+import com.swpproject.koi_care_system.dto.LogDto;
+import com.swpproject.koi_care_system.enums.LogCategory;
+import com.swpproject.koi_care_system.mapper.LogMapper;
+import com.swpproject.koi_care_system.models.KoiPond;
+import com.swpproject.koi_care_system.models.Log;
+import com.swpproject.koi_care_system.payload.request.LogCreateRequest;
+import com.swpproject.koi_care_system.payload.request.LogUpdateRequest;
+import com.swpproject.koi_care_system.repository.KoiPondRepository;
+import com.swpproject.koi_care_system.repository.LogRepository;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.data.domain.Sort;
+import org.springframework.stereotype.Service;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class LogService implements ILogService {
+    LogMapper logMapper;
+    LogRepository logRepository;
+    KoiPondRepository koiPondRepository;
+
+    @Override
+    public LogDto createLog(LogCreateRequest request, long pondId) {
+        KoiPond koiPond = koiPondRepository.findById(pondId).orElseThrow(() -> new RuntimeException("Pond not found"));
+        Log log = logMapper.mapToLog(request);
+        log.setKoiPond(koiPond);
+        return logMapper.mapToLogDto(logRepository.save(log));
+    }
+
+    @Override
+    public LogDto updateLog(int logId, LogUpdateRequest request) {
+        Log log = logRepository.findById(logId).orElseThrow(() -> new RuntimeException("Log not found"));
+        KoiPond koiPond = koiPondRepository.findById(request.getKoiPondId()).orElseThrow(() -> new RuntimeException("Pond not found"));
+        logMapper.updateLog(log, request);
+        log.setKoiPond(koiPond);
+        return logMapper.mapToLogDto(logRepository.save(log));
+    }
+
+    @Override
+    public void deleteLog(int logId) {
+        logRepository.findById(logId).ifPresentOrElse(logRepository::delete, () -> {
+            throw new RuntimeException("Log not found");
+        });
+
+    }
+
+    @Override
+    public LogDto getLogById(int logId) {
+        return logRepository.findById(logId).map(logMapper::mapToLogDto).orElseThrow(() -> new RuntimeException("Log not found"));
+    }
+
+    @Override
+    public List<LogDto> getAllLogs(String sortBy, String sortDir) {
+        Sort sort = ("Desc".equalsIgnoreCase(sortDir)) ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();
+        return logRepository.findAll(sort).stream().map(logMapper::mapToLogDto).toList();
+    }
+
+    @Override
+    public List<LogDto> getLogsByPondId(long pondId) {
+        return logRepository.findAllByKoiPondId(pondId).stream().map(logMapper::mapToLogDto).toList();
+    }
+
+    @Override
+    public List<LogDto> getLogsByUserId(Long userId) {
+        List<Log> logs = new ArrayList<>();
+        koiPondRepository.findKoiPondsByUserId(userId).forEach(koiPond -> {
+            logs.addAll(logRepository.findAllByKoiPondId(koiPond.getId()));
+        });
+        return logs.stream().map(logMapper::mapToLogDto).toList();
+    }
+
+    @Override
+    public List<LogDto> getLogsByCategory(String category) {
+        LogCategory logCategory = LogCategory.valueOf(category);
+        return logRepository.findAllByCategory(logCategory).stream().map(logMapper::mapToLogDto).toList();
+    }
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/TagUpdateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/TagUpdateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/TagUpdateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225991)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/TagUpdateRequest.java	(date 1730910225991)
@@ -0,0 +1,20 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import jakarta.validation.constraints.NotBlank;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class TagUpdateRequest {
+    @NotBlank
+    String tagName;
+    @NotBlank
+    String tagDescription;
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/TagCreateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/TagCreateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/TagCreateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225991)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/TagCreateRequest.java	(date 1730910225991)
@@ -0,0 +1,20 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import jakarta.validation.constraints.NotBlank;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class TagCreateRequest {
+    @NotBlank
+    String tagName;
+    @NotBlank
+    String tagDescription;
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/SupplierUpdateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/SupplierUpdateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/SupplierUpdateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225991)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/SupplierUpdateRequest.java	(date 1730910225991)
@@ -0,0 +1,12 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import lombok.Data;
+
+@Data
+public class SupplierUpdateRequest {
+    private String name;
+
+    private String phone;
+
+    private String address;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ResetPasswordRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ResetPasswordRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ResetPasswordRequest.java
new file mode 100644
--- /dev/null	(date 1730910225991)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ResetPasswordRequest.java	(date 1730910225991)
@@ -0,0 +1,25 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import jakarta.validation.constraints.Email;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.Size;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class ResetPasswordRequest {
+    @Email(message = "Invalid email address")
+    @NotBlank(message = "Email is required")
+    String email;
+    @NotBlank(message = "OTP is required")
+    String otp;
+    @Size(min = 8, message = "USER_NEW_PASSWORD")
+    String newPassword;
+
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/UpgradePremiumRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/UpgradePremiumRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/UpgradePremiumRequest.java
new file mode 100644
--- /dev/null	(date 1730910225992)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/UpgradePremiumRequest.java	(date 1730910225992)
@@ -0,0 +1,11 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import lombok.Builder;
+import lombok.Data;
+
+@Data
+@Builder
+public class UpgradePremiumRequest {
+    private Long userProfileId;
+    private String time;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/UpdateUserRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/UpdateUserRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/UpdateUserRequest.java
new file mode 100644
--- /dev/null	(date 1730910225992)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/UpdateUserRequest.java	(date 1730910225992)
@@ -0,0 +1,20 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import com.swpproject.koi_care_system.enums.Role;
+import jakarta.validation.constraints.Size;
+import lombok.*;
+import lombok.experimental.FieldDefaults;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+@Builder
+public class UpdateUserRequest {
+    @Size(min = 3, message = "USERNAME_INVALID")
+    String username;
+    @Size(min = 8, message = "USER_PASSWORD")
+    String password;
+    Role role;
+    boolean status;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/UpdateItemRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/UpdateItemRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/UpdateItemRequest.java
new file mode 100644
--- /dev/null	(date 1730910225992)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/UpdateItemRequest.java	(date 1730910225992)
@@ -0,0 +1,8 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import lombok.Data;
+
+@Data
+public class UpdateItemRequest {
+    private int quantity;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ProfileUpdateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ProfileUpdateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ProfileUpdateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225991)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ProfileUpdateRequest.java	(date 1730910225991)
@@ -0,0 +1,24 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import com.swpproject.koi_care_system.enums.ProfileStatus;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.web.multipart.MultipartFile;
+
+import java.time.LocalDate;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class ProfileUpdateRequest {
+    String phone;
+    String address;
+    String gender;
+    MultipartFile file;
+    String bio;
+    LocalDate dateOfBirth;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ProductUpdateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ProductUpdateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ProductUpdateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225991)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ProductUpdateRequest.java	(date 1730910225991)
@@ -0,0 +1,21 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import com.swpproject.koi_care_system.models.Category;
+import lombok.Data;
+
+import java.math.BigDecimal;
+import java.util.Set;
+
+@Data
+public class ProductUpdateRequest {
+    private Long id;
+    private String brand;
+    private String name;
+    private BigDecimal price;
+    private int inventory;
+    private String description;
+    private String description_detail;
+    private Category category;
+    private String supplierName;
+    private Set<Long> issueTypeId;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/PlacePremiumOrderRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/PlacePremiumOrderRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/PlacePremiumOrderRequest.java
new file mode 100644
--- /dev/null	(date 1730910225991)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/PlacePremiumOrderRequest.java	(date 1730910225991)
@@ -0,0 +1,13 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class PlacePremiumOrderRequest {
+    private Long userId;
+    private String time;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/PlaceOrderRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/PlaceOrderRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/PlaceOrderRequest.java
new file mode 100644
--- /dev/null	(date 1730910225991)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/PlaceOrderRequest.java	(date 1730910225991)
@@ -0,0 +1,16 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class PlaceOrderRequest {
+    private Long userId;
+    private String address;
+    private String phone;
+    private String recipientName;
+    private String note;
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ReminderRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ReminderRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ReminderRequest.java
new file mode 100644
--- /dev/null	(date 1730910225991)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/ReminderRequest.java	(date 1730910225991)
@@ -0,0 +1,19 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import com.swpproject.koi_care_system.enums.ReminderRepeat;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.time.LocalDateTime;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class ReminderRequest {
+    private String title;
+    private String description;
+    private LocalDateTime dateTime;
+    private ReminderRepeat repeatInterval;
+
+}
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/RemarkUpdateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/RemarkUpdateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/RemarkUpdateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225991)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/RemarkUpdateRequest.java	(date 1730910225991)
@@ -0,0 +1,19 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDateTime;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class RemarkUpdateRequest {
+    String title;
+    LocalDateTime createDate;
+    String note;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/RemarkCreateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/RemarkCreateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/RemarkCreateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225991)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/RemarkCreateRequest.java	(date 1730910225991)
@@ -0,0 +1,20 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDateTime;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class RemarkCreateRequest {
+    String title;
+    LocalDateTime createDate;
+    String note;
+    Long koiFishId;
+}
\ No newline at end of file
Index: Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/PromotionUpdateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/PromotionUpdateRequest.java b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/PromotionUpdateRequest.java
new file mode 100644
--- /dev/null	(date 1730910225991)
+++ b/Backend/koi_care_system/src/main/java/com/swpproject/koi_care_system/payload/request/PromotionUpdateRequest.java	(date 1730910225991)
@@ -0,0 +1,15 @@
+package com.swpproject.koi_care_system.payload.request;
+
+import lombok.Data;
+import java.time.LocalDateTime;
+import java.util.List;
+
+@Data
+public class PromotionUpdateRequest {
+    private String name;
+    private Double discountRate;
+    private String description;
+    private LocalDateTime startDate;
+    private LocalDateTime endDate;
+    private List<Long> productIds;
+}
\ No newline at end of file
